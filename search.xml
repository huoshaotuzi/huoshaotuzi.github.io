<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始开发自己的Composer包</title>
      <link href="/composer-package/"/>
      <url>/composer-package/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 <code>composer</code> 的时候，我们几乎都是在用其他人分享出来的包，久而久之，难免会产生开发自己包的想法，不仅可以加深对 <code>composer</code> 的理解程度，同时还可以把自己常用的功能封装起来，作为自己的“小金库”储备起来。</p><blockquote><p>使用 <code>composer</code> 开发依赖包是一项非常考验能力的事情，它涉及到一个微型系统的架构，阅读<strong>设计模式</strong>有助于帮助我们开发一个优秀的 <code>composer</code> 依赖包。</p></blockquote><h2 id="开发自己的第一个-Composer-包"><a href="#开发自己的第一个-Composer-包" class="headerlink" title="开发自己的第一个 Composer 包"></a>开发自己的第一个 Composer 包</h2><p><code>composer.json</code> 是 <code>composer</code> 的基础，文件夹目录下存在 <code>composer.json</code> 文件，那么这个文件夹就是一个<strong>资源包</strong>。</p><p>我们可以手动创建 <code>composer.json</code> 文件，不过，我们推荐使用 <code>composer init</code> 命令。</p><blockquote><p>composer init 命令帮助我们自动生成 composer.json，文件可以修改，不必担心按错了什么会产生不好的影响。</p></blockquote><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p><code>composer.json</code> 配置项的字段较多，后续步骤如果对配置文件的字段抱有疑问，可以返回此处查看：<a href="https://idce.com/document/0ANQ" target="_blank" rel="noopener">composer.json 详解</a>。</p><p>现在，不需要了解这些。</p><h3 id="创建包目录"><a href="#创建包目录" class="headerlink" title="创建包目录"></a>创建包目录</h3><p>我们的操作是在命令行界面操作的，如果是 Windows 系统，则需要进入 CMD 界面，进入到你的工作磁盘目录下，使用快捷键 <code>Shift + 鼠标右键</code>，在菜单栏中选择进入命令行（DOS 界面）。</p><p>首先，我们需要创建一个包的目录 <code>packagist</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Mac OS 系统</span><br><span class="line">mkdir packagist</span><br><span class="line"></span><br><span class="line"># Windows 系统(可以直接右键创建）</span><br><span class="line">md packagist</span><br><span class="line"></span><br><span class="line"># 创建完成后进入文件夹</span><br><span class="line">cd packagist</span><br></pre></td></tr></table></figure><h3 id="输入包的名字"><a href="#输入包的名字" class="headerlink" title="输入包的名字"></a>输入包的名字</h3><p>在 <code>packagist</code> 目录下，执行 <code>composer init</code>，<code>composer</code> 会提示我们设置配置参数信息，如下图：</p><p><img src="https://i.loli.net/2019/08/24/NSPn6GYuE83jcs1.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package name (&lt;vendor&gt;&#x2F;&lt;name&gt;) [firerabbit&#x2F;packagist]:</span><br></pre></td></tr></table></figure><p>提示让你输入包的名字，格式为 <code>&lt;vendor&gt;/&lt;name&gt;</code>，<code>vendor</code> 为服务商名字，个人开发可以使用自己在 GitHub 中使用的昵称，<code>name</code> 为包的名字，<code>&lt;vendor&gt;/&lt;name&gt;</code> 不能存在同名，这里设置的名字即后面使用 <code>composer require</code> 的名字。</p><p>中括号内的 <code>[firerabbit/packagist]</code> 是默认值，直接按回车的话就会使用这个名字。</p><h3 id="输入包的描述信息"><a href="#输入包的描述信息" class="headerlink" title="输入包的描述信息"></a>输入包的描述信息</h3><p>包名输入完成后，接下来需要设置 <code>Description</code> （描述）字段，这个字段是包的功能性描述，作为练习包就随便输入啦：</p><p><img src="https://i.loli.net/2019/08/24/y6EWBMhGbZ1V3Qt.png" alt="image.png"></p><h3 id="输入作者信息"><a href="#输入作者信息" class="headerlink" title="输入作者信息"></a>输入作者信息</h3><p>接下来设置 <code>Author</code> (作者信息)，格式为 <code>name example@email.com</code>，输入 n 可以跳过：</p><p><img src="https://i.loli.net/2019/08/24/V7UsaPQpm5LyKqu.png" alt="image.png"></p><h3 id="minimum-stability-最小稳定版本"><a href="#minimum-stability-最小稳定版本" class="headerlink" title="minimum-stability 最小稳定版本"></a>minimum-stability 最小稳定版本</h3><p>通过设置 <code>minimum-stability</code> 的值，来告诉 <code>Composer</code> 当前开发的项目的依赖要求的包的全局稳定性级别，它的值包括：dev、alpha、beta、RC、stable，stable 是默认值。</p><p><img src="https://i.loli.net/2019/08/24/IFecMfkGXYgWU9T.png" alt="image.png"></p><p>稳定性介绍：<a href="https://learnku.com/php/t/9929/understanding-composers-stability-stability-identity" target="_blank" rel="noopener">理解 Composer 的稳定性（Stability）标识</a></p><p>我们直接按回车默认值即可。</p><h3 id="Package-Type-包类型"><a href="#Package-Type-包类型" class="headerlink" title="Package Type 包类型"></a>Package Type 包类型</h3><p>接下来设置包的类型：</p><p><img src="https://i.loli.net/2019/08/24/4PMEiWuaXIb2Zyd.png" alt="image.png"></p><p>composer 原生支持以下4种类型：</p><ul><li>library: 默认类型，它会简单的将文件复制到 vendor 目录。</li><li>project: 一个项目，而不是一个库。</li><li>metapackage: 空的包，包含依赖并且需要触发依赖的安装。</li><li>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。</li></ul><p>这里我们直接按回车，采用默认的 library。</p><h3 id="License-许可协议"><a href="#License-许可协议" class="headerlink" title="License 许可协议"></a>License 许可协议</h3><p>接下来输入包的许可协议：</p><p><img src="https://i.loli.net/2019/08/24/UW2StviLwyIO9ef.png" alt="image.png"></p><p>包的许可协议，它可以是一个字符串或者字符串数组。</p><p>最常见的许可协议的推荐写法：</p><ul><li>Apache-2.0</li><li>BSD-2-Clause</li><li>BSD-3-Clause</li><li>BSD-4-Clause</li><li>GPL-2.0</li><li>GPL-2.0+</li><li>GPL-3.0</li><li>GPL-3.0+</li><li>LGPL-2.1</li><li>LGPL-2.1+</li><li>LGPL-3.0</li><li>LGPL-3.0+</li><li>MIT</li></ul><p>这里我们输入 MIT （开源许可协议）。</p><h3 id="定义依赖项"><a href="#定义依赖项" class="headerlink" title="定义依赖项"></a>定义依赖项</h3><p>接下来设置依赖项：</p><p><img src="https://i.loli.net/2019/08/24/6iHFcMvR8UK7o2O.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Define your dependencies.</span><br><span class="line"></span><br><span class="line">Would you like to define your dependencies (require) interactively [yes]?</span><br></pre></td></tr></table></figure><p>我们的练习项目不需要设置此项，输入 no。</p><h3 id="dev-依赖项"><a href="#dev-依赖项" class="headerlink" title="dev 依赖项"></a>dev 依赖项</h3><p>设置 dev 环境依赖项：</p><p><img src="https://i.loli.net/2019/08/24/LEelWoaq4dwNts2.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]?</span><br></pre></td></tr></table></figure><p>同上，输入 no。</p><h3 id="最后一步：确认信息"><a href="#最后一步：确认信息" class="headerlink" title="最后一步：确认信息"></a>最后一步：确认信息</h3><p>最后一步，确认包的信息：</p><p><img src="https://i.loli.net/2019/08/24/fDkiBObK9QXo1aJ.png" alt="image.png"></p><p>输入 yes，回车，然后查看当前目录即可看到 <code>composer.json</code> 文件。</p><p><code>composer init</code> 命令帮助你自动生成文件，实际上你可以直接在<strong>包的目录下</strong>创建 <code>composer.json</code>，并且输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;huotu&#x2F;test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;我的第一个包。&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;火兔兔子&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;huoshaotuzi@icloud.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上两种方式都是一样的。</p><h2 id="依赖包的基本结构"><a href="#依赖包的基本结构" class="headerlink" title="依赖包的基本结构"></a>依赖包的基本结构</h2><p>一个 <code>composer</code> 依赖包的基本结构，以我们上面的 <code>packagist</code> 为例：</p><ul><li>packagist<ul><li>src<ul><li>类文件</li><li>…</li></ul></li><li>tests<ul><li>单元测试文件</li><li>… </li></ul></li><li>README.md</li><li>composer.json</li><li>LICENSE</li></ul></li></ul><h3 id="src-文件夹"><a href="#src-文件夹" class="headerlink" title="src 文件夹"></a>src 文件夹</h3><p><code>src</code> 是包所在的路径，一般我们都会将其命名为 <code>src</code>（业界共识），不建议改成其他的名字。</p><p>开发包的工作就是在这个目录下进行的，你可以在这个目录下创建更多的文件夹来划分不同功能的类。</p><h3 id="tests-文件夹"><a href="#tests-文件夹" class="headerlink" title="tests 文件夹"></a>tests 文件夹</h3><p><code>tests</code> 文件夹用来存放单元测试的，如果你不写的话，这个文件夹可以不要。</p><h3 id="README-md-文件"><a href="#README-md-文件" class="headerlink" title="README.md 文件"></a>README.md 文件</h3><p><code>README.md</code> 是包描述的 Markdown 语法的介绍文档，在 GitHub 中将会自动解析这个文件并且展示出来，每一个包都<strong>应该</strong>要包含 <code>README.md</code> 文件，用来介绍这个包的基本信息和操作方法。</p><p>创建 <code>README.md</code> 文件的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Mac OS</span><br><span class="line">vim README.md</span><br><span class="line"></span><br><span class="line"># Windows 系统</span><br><span class="line">创建 README.txt，保存后改成 .md</span><br><span class="line">如需编辑，右键以文本文档打开即可</span><br></pre></td></tr></table></figure><h3 id="composer-json-文件"><a href="#composer-json-文件" class="headerlink" title="composer.json 文件"></a>composer.json 文件</h3><p>包的配置信息。</p><h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><p>许可协议文本，文本格式。</p><p>练习项目中，我们只需要 <code>src</code> 和 <code>README.md</code> 即可。</p><p>推荐使用 <code>PHPstorm</code> 作为编辑工具，最后我们的包目录结构如图所示：</p><p><img src="https://i.loli.net/2019/08/24/he9UfyOz2W6Z5Qi.png" alt="image.png"></p><h2 id="配置自动加载规则"><a href="#配置自动加载规则" class="headerlink" title="配置自动加载规则"></a>配置自动加载规则</h2><p>为了防止命名空间冲突，开发的包需要配置自动加载，修改 <code>composer.json</code> 添加 <code>autoload</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;Huotu\\Test\\&quot;: &quot;src&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们采用 <code>psr-4</code> 的规范来自动加载包目录下 <code>src</code> 文件夹内的类文件，这里的 <code>&quot;Huotu\\Test\\&quot;</code> 是我们使用的命名空间，<code>\\</code> 不能写成 <code>\</code>，一般而言，命名空间以包的名字来命名。</p><p>完整的 <code>composer.json</code> 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;huotu&#x2F;test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;我的第一个包。&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;火兔兔子&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;huoshaotuzi@icloud.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;&#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;Huotu\\Test\\&quot;: &quot;src&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建包的类文件"><a href="#创建包的类文件" class="headerlink" title="创建包的类文件"></a>创建包的类文件</h3><p>在 <code>src</code> 目录下创建 <code>Robot.php</code> 文件，我们希望写一个可以自动打招呼的机器人（类）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Huotu\Test;</span><br><span class="line"></span><br><span class="line">class Robot</span><br><span class="line">&#123;</span><br><span class="line">    public function sayHello($name) &#123;</span><br><span class="line">        echo &#39;hello,&#39; . $name . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就完成了一个依赖包的开发，使用者只需要引入这个包就可以调用 <code>Robot</code> 的 <code>sayHello</code> 方法。</p><h2 id="测试包的功能"><a href="#测试包的功能" class="headerlink" title="测试包的功能"></a>测试包的功能</h2><p>我们现在已经写好了一个包，但是开发过程以及准备发布的时候，我们都需要对功能进行调试，你可以在目录下创建一个 <code>test.php</code>，然后运行 <code>php test.php</code> 来测试，不过这样总是不太方便的，尤其是某些有其他依赖的操作（如需要连接数据库、Redis）等等。最好的方法是将包文件放在一个真实的项目里进行测试，下面模拟创造一个 <code>project</code> 来作为我们实际的项目。</p><p>在 <code>packagist</code> 同级目录下，创建一个文件夹 <code>project</code>。</p><p>由于我们本地开发的包并未上传的 Packagist，无法通过 <code>composer require</code> 进行安装，因此我们必须手动配置加载目录，进入 project 文件夹，创建 <code>composer.json</code>：</p><ul><li>project<ul><li>composer.json</li></ul></li></ul><p>编辑 <code>composer.json</code>，输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;Huotu\\Test\\&quot;: &quot;..&#x2F;packagist&#x2F;src&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完成后，我们需要执行 <code>composer dump-autoload</code> 来生成自动加载文件。</p><blockquote><p>如果对依赖包添加了新的类或者删除了类，涉及到类文件数量、名称改变的，都需要重新执行 composer dump-autoload，否则无法读取到最新的类文件</p></blockquote><p>执行完成后，在当前目录下生成了 <code>vendor</code> 文件夹，这个文件夹里即包含了我们依赖包的自动加载信息。</p><p><img src="https://i.loli.net/2019/08/24/nCVmNxviFpfJUw5.png" alt="image.png"></p><p>接着一个文件用来测试结果 <code>test.php</code>：</p><ul><li>project<ul><li>composer.json</li><li>test.php</li><li>vendor<ul><li>composer<ul><li>…</li></ul></li><li>autoload.php </li></ul></li></ul></li></ul><p>输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">use Huotu\Test\Robot;</span><br><span class="line"></span><br><span class="line">$robot &#x3D; new Robot();</span><br><span class="line">$robot-&gt;sayHello(&#39;IDCE.COM&#39;);</span><br></pre></td></tr></table></figure><p>终端中输入 <code>php test.php</code> 执行结果：</p><p><img src="https://i.loli.net/2019/08/24/BYavLTK2W9JDncZ.png" alt="image.png"></p><p>可以看到我们成功调用自己开发的包了！</p><p>必须将 <code>autoload</code> 引入才能实现自动加载，如果提示找不到类可能就是没有正确引入的关系或者 <code>composer.json</code> 配置的 <code>psr-4</code> 路径不正确。</p><h2 id="上传到-GitHub"><a href="#上传到-GitHub" class="headerlink" title="上传到 GitHub"></a>上传到 GitHub</h2><p>开发完成后，我们需要把包文件上传到 <a href="https://github.com" target="_blank" rel="noopener">GitHub</a>，如果没有账号则注册一个。</p><p>进入个人主页，在左侧的 Repositories（仓库）选择 New 创建一个新的仓库：</p><p><img src="https://i.loli.net/2019/08/24/ISdkXipUAeLfv2c.png" alt="image.png"></p><p>仓库信息，权限要选择 <code>public</code>（公开的），完成后点击 <code>Create repository</code>：</p><p><img src="https://i.loli.net/2019/08/24/FuyLgqBpdAH3W8R.png" alt="image.png"></p><p>创建好的项目：</p><p><img src="https://i.loli.net/2019/08/24/WZdpEtnvL3qCeVX.png" alt="image.png"></p><p>GitHub 十分友好的提示了上传文件的步骤，我们只需要执行以下几个步骤即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;huoshaotuzi&#x2F;test.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>返回 <code>packagist</code> 目录下，我们按照 GitHub 上提示的内容，执行 <code>git init</code>，并添加文件：</p><p><img src="https://i.loli.net/2019/08/24/B1vg4hK95lz2VkC.png" alt="image.png"></p><blockquote><p>注！由于 ide 产生的文件是必须添加 .gitigonre 排除的</p></blockquote><p>然后添加上传的仓库信息，并执行 <code>push</code> 推送到 GitHub 的仓库：</p><p><img src="https://i.loli.net/2019/08/24/FK5Gz1rpVluQLgn.png" alt="image.png"></p><p>返回 GitHub 仓库，刷新页面即可看到上传文件的信息：</p><p><img src="https://i.loli.net/2019/08/24/IbWEe8VnKwmZhCP.png" alt="image.png"></p><h2 id="上传到-Packagist"><a href="#上传到-Packagist" class="headerlink" title="上传到 Packagist"></a>上传到 Packagist</h2><p>如果希望自己的包被其他人安装，就需要将包上传到 Packagist 官网上。</p><p>Packagist 官网：<a href="https://packagist.org/" target="_blank" rel="noopener">https://packagist.org/</a></p><p><img src="https://i.loli.net/2019/08/24/sX6AxhSyfEC9pVg.png" alt="image.png"></p><p>如果没有账号可以注册一个，或者直接使用 GitHub 登录（推荐）。</p><p>登录后，选择右上角的 <code>Submit</code>（提交）：</p><p><img src="https://i.loli.net/2019/08/24/8zhUPTDwsbOt5fa.png" alt="image.png"></p><p>在提交页面会提示你输入 GitHub 上仓库的地址：</p><p><img src="https://i.loli.net/2019/08/24/GQSMnub7JdOxWjH.png" alt="image.png"></p><p>输入刚才创建的仓库地址，点击 <code>Check</code>：</p><p><img src="https://i.loli.net/2019/08/24/qeuQ6oEsWdLl2cF.png" alt="image.png"></p><p>这边会提示一些同名的包，并且出现了 <code>Submit</code> 按钮，我们直接点击 <code>Submit</code>，此时会进入包页面，<code>update</code> 会进入转圈圈状态，表示正在同步包信息，稍等一会刷新页面即可看到包信息。</p><p>到目前为止，已经将包上传到 Packagist 官网了，但是我们还没有设置版本信息，需要返回到包目录下，给这个包打上标签。</p><p>输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 -m &quot;初始版本&quot;</span><br><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure><p>然后返回 Packagist 官网，点击 <code>update</code> 同步包信息，然后刷新页面就能看到刚刚提交的版本信息了。</p><p>现在，用户可以使用 <code>composer require</code> 命令下载你的包了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require huotu&#x2F;test:1.0</span><br></pre></td></tr></table></figure><h2 id="自动同步版本更新"><a href="#自动同步版本更新" class="headerlink" title="自动同步版本更新"></a>自动同步版本更新</h2><p>每次更新包都需要手动点击 <code>update</code> 十分不便，实际上 GitHub 提供了钩子可以用来推送更新信息到 Packagist，默认情况下已经帮助我们打开了自动更新功能。</p><p>回到 GitHub 的仓库地址，选择 <code>Setting</code>，左侧菜单 <code>Webhook</code>，可以看到配置的推送信息：</p><p><img src="https://user-images.githubusercontent.com/28209810/63644830-3432b800-c724-11e9-98c1-8ee55b76825c.png" alt="webhook"></p><p>每当我们推送新的版本标签到 GitHub 时，Packagist 就会接收到一个 GitHub 的 Hook（钩子）发出的 POST 请求，这样 Packagist 上的包就会与 GitHub 上的同步了。</p><p>如果你不需要自动更新功能，可以点击右侧的 <code>Delete</code> 将其删除，删除后每次更新包都要前往 Packagist 点击 <code>Update</code> 手动进行更新。</p><p>开启自动更新情况下，每次 <code>push</code> 标签后都会自动同步到 Packagist，刷新页面即可看到最新提交的版本：</p><p><img src="https://user-images.githubusercontent.com/28209810/63644872-eff3e780-c724-11e9-9507-f722204a1422.png" alt="new version"></p><h2 id="依赖包编写小建议"><a href="#依赖包编写小建议" class="headerlink" title="依赖包编写小建议"></a>依赖包编写小建议</h2><p>开发依赖包需要要丰富的开发经验，可以多参考其他开源包，尤其是具有团队进行维护的，观察他们是如何区分目录和封装类的，可以学到很多知识。</p><p>推荐阅读：<a href="https://learnku.com/docs/php-design-patterns/2018" target="_blank" rel="noopener">PHP 设计模式</a></p><p>编写依赖包能得到锻炼和成长的机会，开源自己的包也是一件十分具有成就感的事。</p><blockquote><p>分享，是最好的学习方式 —— IDCE.COM</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> composer </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登录原理及方法</title>
      <link href="/ssh-no-password-method/"/>
      <url>/ssh-no-password-method/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH-命令"><a href="#SSH-命令" class="headerlink" title="SSH 命令"></a>SSH 命令</h2><p>使用 <code>ssh 用户名@服务器IP</code> 可以连接到服务器，这样做的缺点是每次都要输入密码，一方面是不安全，另一方面是麻烦。</p><h2 id="SSH-免密登录服务器"><a href="#SSH-免密登录服务器" class="headerlink" title="SSH 免密登录服务器"></a>SSH 免密登录服务器</h2><p>在本地主机上使用 <code>ssh-keygen -t rsa</code> 生成密匙对，这里的 <code>-t rsa</code> 指的是用 <code>rsa</code> 加密方式生成密匙：</p><p><img src="https://i.loli.net/2019/08/31/wpMU4vaBQfOoej8.png" alt="image.png"></p><p>第一步，输入密匙存放目录，使用默认路径直接按回车即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure><p>第二步，输入密码，建议直接回车使用空密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>如果输入了密码则需要再输入一次确认密码。这里的密码不是指远程登录主机的密码，而是使用密匙时的密码，既然我们是希望免密登录了，自然不希望再输入任何密码，因此此处填空即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---[RSA 2048]----+</span><br><span class="line">|    ..    .      |</span><br><span class="line">|    o. . . o     |</span><br><span class="line">|   o...+* +      |</span><br><span class="line">|    .o+*+O       |</span><br><span class="line">|    . &#x3D;+So+o     |</span><br><span class="line">| . . . @.*B.     |</span><br><span class="line">|  o . . Eoo.     |</span><br><span class="line">|   o   * ..      |</span><br><span class="line">|    ..o o.       |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>上面会生成 <code>randomart image</code> 图案，这个图案是根据密匙生成的，因此每个人看到的都不同。</p><blockquote><p>趣味小科普：为什么要生成这种图案呢？这是由于密匙对是一个很长的随机字符串，比起加密的字符串人们更容易接受图片，可以说是很贴心了</p></blockquote><p>生成的密匙包含一对，<strong>公钥和私匙</strong>（<strong>其实叫做私钥</strong>，但感觉这样比较有意思所以就这么写）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.</span><br></pre></td></tr></table></figure><p>我们根据路径可以找到文件所在位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_8_centos ~]# cd &#x2F;root&#x2F;.ssh</span><br><span class="line">[root@VM_0_8_centos .ssh]# ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><p>这两个密匙文件分别是：</p><ul><li>id_rsa 生成的私钥文件</li><li>id_rsa.pub 生成的公钥文件</li></ul><p>另外一个 <code>authorized_keys</code> 是保存远程免密登录公钥的文件，主要通过这个文件记录多台机器的公钥，我们要做的就是把本机的公钥发送到服务器主机的这个文件里。</p><p>接着，把公钥发到需要登录的服务器主机上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub 服务器IP地址:&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>接着会要求你输入一次密码，输入完成后就可以实现免密登录了。</p><p>在本机上执行 <code>ssh 用户名@服务器IP</code>，不再需要输入密码验证。</p><h2 id="SSH-添加别名"><a href="#SSH-添加别名" class="headerlink" title="SSH 添加别名"></a>SSH 添加别名</h2><p>网络上的教程一般到上一步就结束了，在这里传授一个小技巧可以事半功倍。</p><p>虽然我们现在跳过了输入密码这个步骤，但是每次都要输入 IP 也是很蛋疼的一件事，<strong>我们甚至想要不输入 IP 就能登录到远程服务器</strong> ？</p><p>这也能做到！</p><p>在本地进入 <code>.ssh</code> 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入 .ssh 目录</span><br><span class="line">FireRabbitdeMacBook-Pro:.ssh firerabbit$ cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><p>使用 <code>vim config</code> 编辑文件并且输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host dev</span><br><span class="line">HostName 127.0.0.1</span><br><span class="line">User root</span><br><span class="line">Port 22</span><br></pre></td></tr></table></figure><p>这里的 <code>dev</code> 是我们给远程主机起的别名，<code>127.0.0.1</code> 是远程主机的地址，请替换成你的服务器 IP，<code>User</code> 即登录的用户名，<code>Port</code> 为服务器访问端口，如果修改了端口在这里也要修改。</p><p>现在我们的目录应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FireRabbitdeMacBook-Pro:.ssh firerabbit$ ls</span><br><span class="line">configid_rsaid_rsa.pubknown_hosts</span><br></pre></td></tr></table></figure><p><code>known_hosts</code> 是连接过的主机记录，可以随意删除。</p><p>接着在命令行输入：<code>ssh dev</code> 即可连接到服务器！</p><blockquote><p>阅读至此，恭喜你！Linux Exp + 1</p></blockquote><h2 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h2><p>如果出现如下报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: ERROR: ssh: Could not resolve hostname xxx:&#x2F;root&#x2F;.ssh&#x2F;authorized_keys: nodename nor servname provided, or not known</span><br></pre></td></tr></table></figure><p>网上查了下，大都是说 hosts 文件的问题。</p><p>可以尝试修改 <code>/etc/hosts</code> 看看是否有如下行，如果没有则添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure><p>经过本人尝试结果无效，可用别的方法。</p><p>那就是——手动上传！！！</p><p>编辑本地主机的密匙文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>把密匙内容全部拷贝下来。</p><p>接着先用 <code>ssh root@远程主机IP</code> 用密码登录进去，然后在远程主机中 <code>vim /root/.ssh/authorized_keys</code>。</p><p>把复制的密钥直接粘贴下来就可以啦！</p><h2 id="免密登录原理"><a href="#免密登录原理" class="headerlink" title="免密登录原理"></a>免密登录原理</h2><p>网上的教程一般都是直接贴出代码和操作步骤，但这样我们根本不清楚它的原理是什么。</p><p>我们希望能像侦探一样追根究底，查清楚它的原理是什么。</p><blockquote><p>真正理解后的知识才能永远刻入你的脑海里</p></blockquote><p>上面的步骤，我们在本机生成一个密匙对，一共包含两个文件，一个是公钥，一个是私匙，公钥是发送到服务器主机的，私匙是留在本地的。</p><p>这样包含一对公钥私匙的加密叫做“<strong>非对称加密</strong>”。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>在了解非对称加密之前需要先了解对称加密，所有新事物的出现必然伴随着某种需求。</p><p>小红和小明私底下正在交往，但又不希望被别人发现，于是他们约定了一种加密算法，每个字母向后移动一位，如 a 往后移一位是 b，b 往后移一位是 c……z往后移是 a。</p><p>那么，<code>ni hao</code> 就变成了 <code>oj ibp</code>。</p><p>由于双方约定好了同样的加密算法，所以小红发给小明消息时，就可以按照约定好的算法进行解密。</p><p>于是他们大胆的在班级群里用加密后的消息进行聊天，其他同学一脸茫然的看着不明觉厉的消息。</p><p>但是此时，<strong>名侦探小刚</strong>破解了他们约定好的加密算法，并且截获了（截获很简单，毕竟他们公然秀恩爱）他们互通的消息，此时小红和小明的聊天记录就被小刚一清二楚的知道了！</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>聊天记录被小刚公开后，小明和小红十分尴尬，于是机智的小明想出了一种方法，把前面约定的加密算法做了一些小的改进，小明告诉小红，我发给你一个密匙串，你用这个给消息进行加密（某种加密算法），你发给我消息后，<strong>我再用我这边的密匙进行解密，我发给你的密匙和我本地的密匙是不同的，只有我本地的密匙才能解密你加密过的内容。</strong></p><blockquote><p>问题又来了……现在只有小明破解小红的消息，小明用公钥加密消息发给小红，小红是解密不了的；如果需要双向沟通的话，自然是用同样的方法，小红也给小明一个密匙，小红本地存有另外一个用来解密的密匙。但是 Linux 免密登录是本机免密登录到服务器，属于单向的沟通，如果你希望服务器也能免密登录本机（一般不会有这种需求），就在服务器用同样的方法生成密匙，把密匙发生到本机就可以了。</p></blockquote><p>接下来的日子，小刚也无法破解他们的聊天记录，恼羞成怒的小刚带着三名小弟放学后去堵小红，逼迫小红把小明给她的加密密匙交出来，小红无奈之下将密匙交出，然而，即使拿到密匙，小刚依然无法破解小红的密码，因为，<strong>还需要小明手里的密匙才能解密小红的消息</strong>。</p><p>非对称加密的存在就是为了避免加密算法被第三者知道，导致密码泄露。上面的故事中小明交给小红的加密串叫做<strong>公钥</strong>，公钥可以让任何第三者知道，公钥加密过的密码只有小明手里的加密串——<strong>私匙</strong>才能解密，对于加密和解密使用不同的加密策略，叫做<strong>非对称加密</strong>。</p><h3 id="使用公钥实现免密登录"><a href="#使用公钥实现免密登录" class="headerlink" title="使用公钥实现免密登录"></a>使用公钥实现免密登录</h3><p>我们通过 <code>ssh-keygen -t rsa</code> 生成了公钥和私匙对，接着我们把公钥发送到服务器上，当连接的时候，服务端会发送一个用公钥加密的字符串过来，本地再使用私匙进行解密，实现了登录验证，从而不需要输入密码就能进行登录。</p><p>用盗来的一张图解释：</p><p><img src="https://i.loli.net/2019/08/31/pk2cFyIrHoVAJYE.png" alt="image.png"></p><h2 id="RSA-非对称加密算法"><a href="#RSA-非对称加密算法" class="headerlink" title="RSA 非对称加密算法"></a>RSA 非对称加密算法</h2><p>参考：<a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&fromid=210678&fr=aladdin" target="_blank" rel="noopener">百度百科 - RSA</a></p><p>只做兴趣了解，不需要掌握原理，因为我们的研究方向不是这个。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Gitlab</title>
      <link href="/centos-install-gitlab/"/>
      <url>/centos-install-gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安准基础依赖"><a href="#1、安准基础依赖" class="headerlink" title="1、安准基础依赖"></a>1、安准基础依赖</h2><p>安装 Gitlab 所需依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br></pre></td></tr></table></figure><p>启动 ssh 服务并设置开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure><h2 id="2、安装邮件服务"><a href="#2、安装邮件服务" class="headerlink" title="2、安装邮件服务"></a>2、安装邮件服务</h2><p>Postfix 是一个邮件服务器，GitLab 发送邮件需要用到。</p><p>安装 postfix：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y postfix</span><br></pre></td></tr></table></figure><p>启动 postfix 并设置为开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start postfix</span><br><span class="line">sudo systemctl enable postfix</span><br></pre></td></tr></table></figure><h2 id="3、开放-ssh-以及-http-服务（80-端口）"><a href="#3、开放-ssh-以及-http-服务（80-端口）" class="headerlink" title="3、开放 ssh 以及 http 服务（80 端口）"></a>3、开放 ssh 以及 http 服务（80 端口）</h2><p>查看防火墙是否启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>以下为我的服务器上的防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-86c0 ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></table></figure><p>如果看到 Active: inactive (dead)，表示防火墙没有启动，执行下面的命令启动防火墙并且设置为开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><p>此时，在查看防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-86c0 ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 一 2019-09-02 17:56:23 CST; 2s ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 26477 (firewalld)</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;firewalld.service</span><br><span class="line">           └─26477 &#x2F;usr&#x2F;bin&#x2F;python -Es &#x2F;usr&#x2F;sbin&#x2F;firewalld --nofork --nopid</span><br></pre></td></tr></table></figure><p><code>Active: active (running)</code> 表示防火墙正常运行。</p><p>开放 ssh、http 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-service&#x3D;ssh --permanent</span><br><span class="line">sudo firewall-cmd --add-service&#x3D;http --permanent</span><br></pre></td></tr></table></figure><blockquote><p>只有防火墙开启状态才能执行上述命令，否则会报 FirewallD is not running 错误</p></blockquote><p>重新加载防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="4、安装-Gitlab"><a href="#4、安装-Gitlab" class="headerlink" title="4、安装 Gitlab"></a>4、安装 Gitlab</h2><p>我们使用 Gitlab 的社区版：gitlab-ce，如果需要使用商业版，则安装：gitlab-ee。</p><h3 id="4-1、添加-Gitlab-社区版资源包"><a href="#4-1、添加-Gitlab-社区版资源包" class="headerlink" title="4.1、添加 Gitlab 社区版资源包"></a>4.1、添加 Gitlab 社区版资源包</h3><p>默认情况下 yum 源没有 gitlab-ce 软件包，需要手动下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><h3 id="4-2、使用-yum-安装-gitlab-ce"><a href="#4-2、使用-yum-安装-gitlab-ce" class="headerlink" title="4.2、使用 yum 安装 gitlab-ce"></a>4.2、使用 yum 安装 gitlab-ce</h3><p>在这里强烈推荐阅读：<a href="https://idce.com/document/VO4j" target="_blank" rel="noopener">Centos 系统更新 yum 源为国内镜像源</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><p>软件包的安装大小足足有 1.4 G，更换镜像后只需要数十秒就下载完了。</p><p><img src="https://i.loli.net/2019/09/02/eAobTa7M8LyECUn.png" alt="image.png"></p><p>安装成功后可以看到一个类似“狐狸头像”的图案：</p><p><img src="https://i.loli.net/2019/09/02/PcAFUhG7LDm4TfJ.png" alt="image.png"></p><h3 id="4-3、配置-Gitlab-访问地址"><a href="#4-3、配置-Gitlab-访问地址" class="headerlink" title="4.3、配置 Gitlab 访问地址"></a>4.3、配置 Gitlab 访问地址</h3><p>Gitlab 安装完成后，配置文件所在路径为 <code>/etc/gitlab/gitlab.rb</code>，编辑配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br></pre></td></tr></table></figure><p>将 <code>external_url</code> 字段修改为你的域名信息，如果没有域名可以改成 <code>IP:端口</code> 的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## GitLab configuration settings</span><br><span class="line">##! This file is generated during initial installation and **is not** modified</span><br><span class="line">##! during upgrades.</span><br><span class="line">##! Check out the latest version of this file to know about the different</span><br><span class="line">##! settings that can be configured by this file, which may be found at:</span><br><span class="line">##! https:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-org&#x2F;omnibus-gitlab&#x2F;raw&#x2F;master&#x2F;files&#x2F;gitlab-config-template&#x2F;gitlab.rb.template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## GitLab URL</span><br><span class="line">##! URL on which GitLab will be reachable.</span><br><span class="line">##! For more details on configuring external_url see:</span><br><span class="line">##! https:&#x2F;&#x2F;docs.gitlab.com&#x2F;omnibus&#x2F;settings&#x2F;configuration.html#configuring-the-external-url-for-gitlab</span><br><span class="line">external_url &#39;http:&#x2F;&#x2F;gitlab.example.com&#39;</span><br></pre></td></tr></table></figure><h3 id="4-4、启动-Gitlab"><a href="#4-4、启动-Gitlab" class="headerlink" title="4.4、启动 Gitlab"></a>4.4、启动 Gitlab</h3><p>重新载入配置并启动 Gitlab（如果修改了配置文件需要再运行此命令）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>翻车现场：</p><p><img src="https://i.loli.net/2019/09/02/6kpd51B8TZqHyGD.png" alt="image.png"></p><p>报错原文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Running handlers:</span><br><span class="line">There was an error running gitlab-ctl reconfigure:</span><br><span class="line"></span><br><span class="line">Multiple failures occurred:</span><br><span class="line">* Chef::Exceptions::MultipleFailures occurred in chef run: Multiple failures occurred:</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: ruby_block[restart_log_service] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 69) had an error: Errno::ENOMEM: ruby_block[wait for logrotate service socket] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 266) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: ruby_block[reload_log_service] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 77) had an error: Errno::ENOMEM: ruby_block[wait for logrotate service socket] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 266) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line"></span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: execute[clear the gitlab-rails cache] (gitlab::gitlab-rails line 408) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: service[gitaly] (dynamically defined) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: runit_service[gitaly] (gitaly::enable line 75) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: service[gitlab-workhorse] (dynamically defined) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br></pre></td></tr></table></figure><p>%&gt;_&lt;%</p><p>原来是我的测试机内存（1G）不够！</p><blockquote><p>穷人没有资格安装 Gitlab （╯‵□′）╯︵┴─┴ </p></blockquote><h3 id="4-5、访问-Gitlab"><a href="#4-5、访问-Gitlab" class="headerlink" title="4.5、访问 Gitlab"></a>4.5、访问 Gitlab</h3><p>如果不出意外，输入 <code>external_url</code> 配置的地址，即可看到 Gitlab 页面。</p><p>第一次登陆 Gitlab 时需要设置 root 密码，然后就可以愉快的创建项目了。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再战！Docker 安装 Gitlab</title>
      <link href="/docker-install-gitlab/"/>
      <url>/docker-install-gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一次因为服务器配置太低翻车了，现在重新挑战一次。</p><h2 id="Gitlab-硬件要求"><a href="#Gitlab-硬件要求" class="headerlink" title="Gitlab 硬件要求"></a>Gitlab 硬件要求</h2><p>Gitlab 十分吃机器的配置，Gitlab 官方推荐 2核 4G，最低建议 1 核 2G，再低的话可能会像我上次那样直接翻车或者运行起来十分卡顿。</p><p>由于是个人学习，就不打算将其部署到线上的服务器上了，这一次我采用在本地安装的方式搭建 Gitlab。</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>拉取 Gitlab 官方最新版本镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure><p>由于镜像较大，建议换成国内镜像提高下载速度。</p><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>下载完成后，再执行 <code>run</code> 启动容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname localhost \</span><br><span class="line">    --publish 4443:443 --publish 999:80 --publish 22:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume ~&#x2F;docker&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab \</span><br><span class="line">    --volume ~&#x2F;docker&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab \</span><br><span class="line">    --volume ~&#x2F;docker&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab \</span><br><span class="line">    gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure><p><code>run</code> 参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--detach：让容器在后台运行</span><br><span class="line">--hostname：主机地址，本地使用 localhost，可以换成域名</span><br><span class="line">--publish：宿主机的端口映射到容器的端口，由于我本地已经有其他容器使用了 443 和 80 端口，因此我改成了 4443 和 999 端口。</span><br><span class="line">--name：自定义容器的名称</span><br><span class="line">--restart：容器重启策略，在退出时容器应该如何重启或不应该重启，always 始终重启 </span><br><span class="line">--volume：宿主机映射到容器的卷，用来做容器数据的持久化，这里我将卷的目录设置为 ~&#x2F;docker&#x2F;gitlab</span><br></pre></td></tr></table></figure><p><code>run</code> 命令执行后，可以执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;docker&#x2F;gitlab</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>可以看到自动生成了以下几个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configdatalogs</span><br></pre></td></tr></table></figure><p>这些文件就是宿主机与容器之间通过卷映射的文件（容器数据持久化）。</p><p>执行 <code>docker ps</code> 可以看到容器运行状态：</p><p><img src="https://user-images.githubusercontent.com/28209810/64143262-d0a23c00-ce41-11e9-81d3-4b727313dacf.png" alt="image"></p><h3 id="Gitlab-初始化"><a href="#Gitlab-初始化" class="headerlink" title="Gitlab 初始化"></a>Gitlab 初始化</h3><p>容器启动后，需要稍等几分钟，然后再访问 <code>127.0.0.1:999</code>，如果直接访问的话可能 Gitlab 还未完全启动，这个时候是访问不了的。</p><p>第一次访问时，需要设置管理员（root 用户）密码：</p><p><img src="https://user-images.githubusercontent.com/28209810/64143324-10692380-ce42-11e9-98a9-f7372dc57b02.png" alt="image"></p><p>初始化密码设置完成后，返回到登录页面，使用账户 root 以及刚才设置的密码进行登录：</p><p><img src="https://user-images.githubusercontent.com/28209810/64143342-31317900-ce42-11e9-98df-6ea83f67a14a.png" alt="image"></p><p>登录成功后，就可以操作界面啦！</p><p><img src="https://user-images.githubusercontent.com/28209810/64143494-dba99c00-ce42-11e9-864a-861c4a2adacc.png" alt="image"></p><h3 id="添加-SSH-key"><a href="#添加-SSH-key" class="headerlink" title="添加 SSH key"></a>添加 SSH key</h3><p>在开始使用之前，需要添加 <code>ssh key</code> 才能拉取或者推送到仓库，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>查看是否生成过 <code>ssh key</code>，如果当前目录下没有文件，则需要创建新的 <code>ssh key</code>，执行以下命令生成 <code>ssh key</code>，<code>-C</code> 参数后面是你的邮箱地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>完成后在当前目录下会生成 <code>ssh key</code>，包含两个文件，这是一对密匙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_rsaid_rsa.pub</span><br></pre></td></tr></table></figure><p>其中，<code>id_rsa.pub</code> 是公钥，我们需要的就是这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的密匙字符串复制下来（注意是把所有的内容都复制下来，包括邮箱）。</p><p><img src="https://user-images.githubusercontent.com/28209810/64162429-dca5f200-ce71-11e9-8812-5d3a965ea569.png" alt="image"></p><p>接着返回 Gitlab，点击左上角个人头像，选择 <code>Settings</code>：</p><p><img src="https://user-images.githubusercontent.com/28209810/64161700-a320b700-ce70-11e9-8444-2370d88bff56.png" alt="image"></p><p>选择左侧菜单 <code>SSH Keys</code>，将你的 <code>ssh key</code> 黏贴到方框内，然后点击 <code>Add key</code> 即可：</p><p><img src="https://user-images.githubusercontent.com/28209810/64162574-27276e80-ce72-11e9-95e6-e2e23ca57098.png" alt="image"></p><p>接下来就可以愉快的开始使用 Gitlab 啦！</p><h2 id="为什么安装后的-Gitlab-可以直接访问？"><a href="#为什么安装后的-Gitlab-可以直接访问？" class="headerlink" title="为什么安装后的 Gitlab 可以直接访问？"></a>为什么安装后的 Gitlab 可以直接访问？</h2><p>这是由于 Gitlab 内置了 nginx 服务器，所以才能在安装完成后通过地址进行访问。</p><p>完结撒花～ ҉٩(<em>´︶`</em>)۶҉ ??</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab + Satis 搭建私有 Composer 仓库</title>
      <link href="/install-gitlab-satis-composer/"/>
      <url>/install-gitlab-satis-composer/</url>
      
        <content type="html"><![CDATA[<h2 id="Satis-介绍"><a href="#Satis-介绍" class="headerlink" title="Satis 介绍"></a>Satis 介绍</h2><p>Satis 是开源的静态 Composer 仓库生成器，可用于托管公司私有包的元数据。</p><p>环境要求：PHP &gt;= 7.2</p><h2 id="安装-Gitlab"><a href="#安装-Gitlab" class="headerlink" title="安装 Gitlab"></a>安装 Gitlab</h2><p>Centos 搭建 Gitlab：<a href="https://blog.huotuyouxi.com/centos-install-gitlab">Centos 系统安装 Gitlab</a><br>Docker 搭建 Gitlab：<a href="https://blog.huotuyouxi.com/docker-install-gitlab">再战！Docker 安装 Gitlab</a></p><h2 id="上传-Composer-包"><a href="#上传-Composer-包" class="headerlink" title="上传 Composer 包"></a>上传 Composer 包</h2><p>Composer 包开发教程：<a href="https://blog.huotuyouxi.com/composer-package">从零开始开发自己的包</a></p><p>在 Gitlab 新建一个仓库，把自己开发完成的包上传到这个仓库，上传完成后的仓库如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/64165187-204f2a80-ce77-11e9-9532-fbe4a9239a37.png" alt="image"></p><p>包的配置文件 <code>composer.json</code> 如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/64166482-c7cd5c80-ce79-11e9-8b25-7719a08c156e.png" alt="image"></p><p>包的名字叫做：<code>huotu/test</code>，我们后面需要用到。</p><p>这个仓库的地址就是我们私有包的地址，接下来拿这个包作为演示。</p><h2 id="安装-Satis"><a href="#安装-Satis" class="headerlink" title="安装 Satis"></a>安装 Satis</h2><p>可以使用两种方式安装 Satis。</p><h3 id="1、Composer-安装"><a href="#1、Composer-安装" class="headerlink" title="1、Composer 安装"></a>1、Composer 安装</h3><p>可以直接使用 <code>composer</code> 命令安装 Satis： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project composer&#x2F;satis --stability&#x3D;dev --keep-vcs</span><br></pre></td></tr></table></figure><h3 id="2、从-GitHub-下载"><a href="#2、从-GitHub-下载" class="headerlink" title="2、从 GitHub 下载"></a>2、从 GitHub 下载</h3><p>使用 <code>git clone</code> 将 Satis 下载到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;composer&#x2F;satis.git</span><br></pre></td></tr></table></figure><h2 id="添加-Satis-配置文件"><a href="#添加-Satis-配置文件" class="headerlink" title="添加 Satis 配置文件"></a>添加 Satis 配置文件</h2><p>在下载好的 satis 目录下，创建 <code>satis.json</code> 配置文件，一个示例的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;My Repository&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;packages.example.org&quot;,</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;mycompany&#x2F;privaterepo&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;svn.example.org&#x2F;private&#x2F;repo&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;mycompany&#x2F;privaterepo2&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;company&#x2F;package&quot;: &quot;*&quot;,</span><br><span class="line">    &quot;company&#x2F;package2&quot;: &quot;*&quot;,</span><br><span class="line">    &quot;company&#x2F;package3&quot;: &quot;2.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;require-all&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name：仓库的名字，将会展示在页面上</li><li>homepage：satis 访问地址</li><li>repositories：包所在的地址</li><li>require：获取指定的包</li><li>require-all：如果为 true 表示获取所有包</li></ul><p>根据自己的情况进行配置，这里我们拿刚刚上传到 Gitlab 的包演示，配置如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;My Repository&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;,</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;require-all&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http://satis.com</code> 为 satis 访问页面地址，<code>http://gitlab.com/huotu/test</code> 为私有包所在地址。</p><h2 id="Composer-配置"><a href="#Composer-配置" class="headerlink" title="Composer 配置"></a>Composer 配置</h2><p>由于我们使用 <code>http</code>，在这里需要修改设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g secure-http false</span><br></pre></td></tr></table></figure><h2 id="生成-Satis-索引页面"><a href="#生成-Satis-索引页面" class="headerlink" title="生成 Satis 索引页面"></a>生成 Satis 索引页面</h2><p>在 satis 目录下执行命令 <code>composer install</code> 安装所需依赖，然后再执行如下命令生成 satis 页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php bin&#x2F;satis build &lt;configuration file&gt; &lt;build dir&gt;</span><br><span class="line"></span><br><span class="line"># 示例 ：</span><br><span class="line">php bin&#x2F;satis build satis.json public&#x2F;</span><br><span class="line"></span><br><span class="line"># 跳过 Gitlab 密码验证</span><br><span class="line">php bin&#x2F;satis build -n satis.json public&#x2F;</span><br></pre></td></tr></table></figure><p>执行完命令后，在当前目录生成了 public 文件夹，接着配置 nginx，将域名指向这个目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name satis.com;</span><br><span class="line">    root &#x2F;www&#x2F;satis&#x2F;public;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 nginx，不出意外就可以通过域名访问 satis 了！</p><blockquote><p>使用域名记得添加解析到服务器</p></blockquote><p>访问 <code>http://satis.com</code>（这个是你配置的域名）：</p><p><img src="https://user-images.githubusercontent.com/28209810/64164278-8044d180-ce75-11e9-8b1a-9e81d905418c.png" alt="image"></p><h2 id="Composer-使用私有仓库"><a href="#Composer-使用私有仓库" class="headerlink" title="Composer 使用私有仓库"></a>Composer 使用私有仓库</h2><p>我们现在完成了 Satis + Gitlab 的全部安装，接下来我们的项目就可以使用自己搭建的私有 Composer 源了。</p><p>新建一个 test 文件夹，在 test 目录下创建 <code>compsoer.json</code>，编辑 <code>composer.json</code> 添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;huotu&#x2F;test&quot;: &quot;*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;repositories&quot;: [&#123;</span><br><span class="line">        &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存，然后在当前目录下执行 <code>composer install</code>：</p><p><img src="https://user-images.githubusercontent.com/28209810/64166283-58576d00-ce79-11e9-9cf3-233193e4963e.png" alt="image"></p><p>成功把自己私有仓库的包下载下来了。</p><p>如果有多个包，则添加多个仓库地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;My Repository&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;,</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test2&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test3&quot; &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;require-all&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存包资源"><a href="#缓存包资源" class="headerlink" title="缓存包资源"></a>缓存包资源</h2><p>可以把所需要的包都缓存在本地 Satis 上，这样可以避免每次都需要从仓库中 clone，在 <code>satis.json</code> 添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;archive&quot;: &#123;</span><br><span class="line">        &quot;directory&quot;: &quot;dist&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;tar&quot;,</span><br><span class="line">        &quot;prefix-url&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;,</span><br><span class="line">        &quot;skip-dev&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>archive</code> 参数：</p><ul><li>directory: 表示生成的压缩包存放的目录，会在我们 build 时的目录中</li><li>format: 压缩包格式，zip（默认） tar</li><li>prefix-url: 下载链接的前缀的 Url, 默认从 homepage 中取</li><li>skip-dev: 默认为 false，是否跳过开发分支</li><li>absolute-directory: 可选，包文件存储到绝对路径的目录</li><li>whitelist: 可选，如果设置为包名称列表，则只会转储这些包的 dist 文件</li><li>blacklist: 可选，如果设置为包名称列表，则不会转储这些包的 dist 文件</li><li>checksum: 可选，默认情况下为 true，禁用时（false）不会为 dist 文件提供 sha1 校验 启用后，所有下载（包括来自 GitHub 和 BitBucket 的下载） 将替换为本地版本。</li></ul><p>添加 <code>archive</code> 后，配置的包信息就会下载到本地 Satis 目录下 dist 文件夹中，从 Satis 下载依赖时将从这个文件夹获取资源。</p><h2 id="定期更新-Satis"><a href="#定期更新-Satis" class="headerlink" title="定期更新 Satis"></a>定期更新 Satis</h2><p>需要定期执行 <code>php bin/satis build satis.json public/</code> 命令来生成最新的 Composer 包信息，可以将此命令作为定期任务执行，或是增加一个钩子 push 来更新 Satis。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> docker </tag>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的抽奖是否应该有保底机制？</title>
      <link href="/game-draw-card-mechanism/"/>
      <url>/game-draw-card-mechanism/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏中的抽奖机制是几乎所有游戏都要面临的问题，在一定程度上来说，抽奖机制可以决定游戏的命运。</p><p>当一个打算弃坑的玩家，想在最后抽个爽，结果却出了许多氪金大佬都没有的神宠！在游戏广播下，世界频道异口同声的喊起“狗托”，豹子头“零充”玩家心情自然不言而喻，十有八九会享受万众羡慕的眼神继续愉快的玩耍。</p><p>反之，一个氪金大佬怒抽 100 连，砸了 N 个 648 结果还不出货，正气急败坏，却看楼上那位零氪玩家的广播 <strong>XXX 玩家抽到 XXX</strong>，试问氪金大佬此时作何感想？</p><p>当然，上面的情景仅为 YY，实际上可能并没有那么夸张，举例只是为了说明在某些特定情况下可以决定玩家是否继续玩下去。</p><h2 id="游戏中的抽奖机制"><a href="#游戏中的抽奖机制" class="headerlink" title="游戏中的抽奖机制"></a>游戏中的抽奖机制</h2><p>游戏中的抽奖机制经过不断演变，发展为两种比较常见的形式：<strong>无保底机制</strong> 与 <strong>保底机制</strong>。</p><h3 id="无保底机制"><a href="#无保底机制" class="headerlink" title="无保底机制"></a>无保底机制</h3><p>如字面意思，无论抽几次，概率都是一样。</p><p>这种模型会造成某些玩家运气好，尤其是零元党在抽到好东西的时候很喜欢在 <strong>贴吧秀</strong>，对包括零氪、土豪玩家造成暴击伤害，“脸帝”是玩家公敌。</p><p>无保底机制的弊端会造成游戏过于依赖运气成分。</p><p>脸黑玩家可能永远抽不到，土豪玩家可能连砸 N 个 648 依然得不到。</p><p>站在游戏开发者的角度，希望绝大多数玩家可以体验到游戏绝大多数内容，而不是单纯的靠运气决定，这个时候就可以依靠俗话说的“努力就会有回报”。</p><h3 id="保底机制"><a href="#保底机制" class="headerlink" title="保底机制"></a>保底机制</h3><p>玩家通过抽奖，达到一定次数就能得到最好的奖励，这就是保底奖励。</p><p>保底奖励又有两种形式。</p><h4 id="积分兑换"><a href="#积分兑换" class="headerlink" title="积分兑换"></a>积分兑换</h4><p>第一种是以累计 <strong>“积分”</strong> 的形式，玩家可以用积分在商店兑换到最好的奖励。</p><p>这种方式的好处是，玩家可以 <strong>明确的知道</strong> 抽几次一定可以拿到大奖，虽然可能会损失几分惊喜的感觉，但是会让玩家心里感到踏实。即使失败也不会有太大的负面影响，因为失败也会累计积分作为补偿。</p><h4 id="幸运值"><a href="#幸运值" class="headerlink" title="幸运值"></a>幸运值</h4><p>第二种是通过抽奖累计 <strong>“幸运值”</strong>，每次抽奖都可以使下次抽到大奖的几率提高，幸运值达到满时必定抽到。比如王者荣耀的水晶/积分抽奖，玩家可以通过日常获得的钻石去抽奖，即使没抽到也可以积累幸运值，慢慢积累直到抽到水晶然后兑换韩信这个英雄。有些游戏的强化系统也采用这种形式，每次强化失败，下一次强化的成功几率就会提高。</p><p>这种方式的好处是可以让玩家 <strong>保持对于抽奖的期待</strong>，因为概率不断提高，玩家的内心就会觉得可能下一次就中了，而且有保底满幸运值必中的结果，玩家对于失败的感觉就很淡然了，现在的抽奖已经变为 <strong>“可以让我省多少钱”</strong>，越早抽到，玩家反而会觉得赚到了。</p><h2 id="游戏的抽奖该不该保底？"><a href="#游戏的抽奖该不该保底？" class="headerlink" title="游戏的抽奖该不该保底？"></a>游戏的抽奖该不该保底？</h2><p>回到标题，让我们思考下面几个问题：</p><ul><li><p>游戏的抽奖该不该保底？</p></li><li><p>开发商会因为保底而亏损吗？</p></li><li><p>保底抽奖机制到底对哪种类型的玩家更有好处？</p></li></ul><p><strong>1、个人的看法是游戏抽奖以保底机制更好</strong></p><p>我是一个游戏开发者，我希望玩家可以体验到游戏的更多内容（毕竟是我亲自设计的），故意吊玩家的胃口，让某些神宠只让个别人拥有，固然可以提高玩家对神宠的追求，但如果一个永远无法达成的目标，只会让玩家失望，累积越来越多的失望最终就会失去玩家。</p><p><strong>2、不会因为保底抽奖而亏损</strong><br>首先保底机制可以减少玩家的流失，这是其一；其二，保底机制也让土豪玩家更有动力去充钱，以上面的积分模型为例，土豪玩家如果想要得到所有最好的奖励，“最坏”的结果已经可以通过计算明确知道了，当人知道最坏结果时，对失败的承担能力就会越强，而且土豪也可以通过计算推出自己 <strong>应该充多少钱</strong> 才能拿到所有的奖励，土豪并不差钱，但是土豪并不想被 <strong>概率</strong> 忽悠。</p><p>策划也可以通过 <strong>临界值</strong> 来诱使玩家进行充值，这个方法十分见效，我自己就上过很多次当。</p><p>下面是我被网易坑的血泪史（┭┮﹏┭┮）：</p><p>网易新出的游戏百闻牌，里面故意设计红玉和蓝玉兑换机制，让玩家误以为充值的就是红玉，其实充值的是蓝玉，需要再兑换成红玉才能抽奖。</p><p>（<strong>这种欺骗玩家或者诱导玩家错觉的行为极其不可取！</strong>）</p><p>抽奖处显示抽 10 次就可以得到妖刀姬，我就充了 30（计算得出只要充 30 就可以抽 10 次奖），结果发现充值的是蓝玉，兑换之后只有 5 次抽奖机会（真是神坑！）</p><p>好吧，现在已经抽了 5 次，再抽 5 次才能抽到，那我是抽还是不抽呢？这里还涉及到沉默成本，后文介绍。</p><p>当然是选择继续抽，而且这次还充了 68，原因是首充有额外赠送。</p><p>落入策划步步设计的深坑 ┭┮﹏┭┮</p><p>然后又抽了 5 次才拿到妖刀姬。</p><p>这里，由于我之前已经累积了 5 次，只要再抽 5 次就可以拿到大奖，因此我会有驱动力去继续抽下去，如果是在临界值，这个动力就会更强，例如：299/300 的时候，只需要再一次就可以抽到！</p><p>接下来谈一谈 <strong>沉默成本</strong>。</p><p>沉默成本是经济学里面的概念（我大学也是学过经济学的2333）。</p><p>比如你投一只股票，当天亏损了 5 万，你会卖掉还是等明天看看？</p><p>很多人都会留着看看，因为这样白白亏损很不甘心。</p><p>但实际上，你亏损的 5 万已经成为了事实，已经无法改变，不应该影响下一步的决策。</p><p>就像上面我充了 30，结果发现只抽了 5 次，但此时我损失 30 块钱已经是板上钉钉子的事了，但是我的心里面就会想：“我已经充了 30，再充 30 就可以拿到想要的了，不能让之前充的白白浪费”。</p><p>这里就是沉默成本在作怪。</p><p>实际上，沉默成本也是决定游戏命运至关重要的要素，如果一个策划可以让玩家在游戏里投入更多的时间，那玩家就会越来越难以失去这个游戏，甚至以为是“情怀”什么的，比如魔兽玩家经常会说，“那不是游戏，而是我逝去的青春”，可以说是沉默成本非常形象的说明了。</p><p><strong>3、保底机制更利于氪金玩家</strong><br>由于保底机制，只要无限氪金 <strong>必然可以得到一切</strong>，也就造成了有钱可以为所欲为的情况，难道开发商不希望土豪充更多的钱吗？所以，开发商是绝对不会亏的，这一点可以保证。</p><p>由于氪金玩家可以不断充钱得到所有的奖励，如果不是保底机制呢？氪金玩家投入将是无底洞，无论投入多少钱，也许永远都得不到想要的一只英雄或者宠物。</p><p>其次，对于零氪玩家来说也是极好的，只是提升的程度没有土豪玩家那么大而已。</p><p>保底机制对“脸帝”来说是最大的威胁，由于保底，这样他们根本 <strong>秀不起来</strong>，他们由于脸好得到的神宠已经是人手可得的普通宠物了，晒这样的宠物已经无法满足他们日渐膨胀的虚荣心。</p><p>作为贴吧 13 级的大水比，已经见惯了秀脸贴。</p><p>“萌新求问 XXX 有用吗？”</p><h2 id="抽奖中的暗箱操作"><a href="#抽奖中的暗箱操作" class="headerlink" title="抽奖中的暗箱操作"></a>抽奖中的暗箱操作</h2><p>之前看了一期游戏抽奖的视频，介绍了游戏抽奖中的各种暗箱操作。</p><p>其中之一是最坑的，下面用一个故事来说明。</p><p>隔壁老王有一颗价值 1 万的钻石，他想了一个办法，可以让这颗钻石赚到更多钱。</p><p>他做了 300 个空盒子，接着把钻石放在其中一个盒子，其他 299 个盒子都放一颗与钻石等重的碎玻璃，然后他开始在大街上摆摊吆喝：300 个盒子里有一颗价值 1 万的钻石，其他都是玻璃，每个盒子卖 50 块，买盒子的人不能说出自己开到什么东西。</p><p>众人听到，纷纷想以 50 博 1 万，结果所有的盒子都卖出去了，老王共得 1.5 万，比直接出售钻石还多赚了 5000。</p><p>在这里有一个很坑的点，假设第一个买盒子的人开到钻石，那后面 299 个人必定无法开到钻石，也就是必定亏损的，但是由于 <strong>“不能说出自己开到什么”</strong> 导致后面来买盒子的人仍然抱有期待，因而继续购买盒子。</p><p>在一些游戏中，由于玩家并不能知道游戏的抽奖机制是什么，因此就会有策划想出这种“歪点子”，有些游戏里的大奖每天只会发放一份（或者固定份数），而后续的玩家永远抽不到。</p><p>除此之外，还有另一种暗箱操作——奖池机制。</p><p>这种方式的特点是全服玩家共享一个奖池，上面的例子也可以归为此类，只不过奖池机制有些不同。</p><p>奖池是彩票或者棋牌游戏中的概念，所有玩家一起打牌，每轮都要下赌资，赌资全部汇集到奖池中，直到某个玩家开牌，牌面最大的玩家得到所有奖池的钱。</p><p>游戏抽奖机制也存在这种情况，所有玩家都在一个奖池里抽奖，玩家的每次抽奖相当于 <strong>“投入赌资”</strong>，只有抽奖次数达到一定水平时才会出现大奖，大奖被一个玩家得到以后，奖池清空，开启下一轮的奖池，以此类推。</p><p>所以在某些游戏中，垫子之类的说法存在一定道理，一个服务器里面抽奖的玩家越多，抽到大奖的几率就越高，在鬼区没人抽奖的情况下，甚至有可能抽奖几率为负数。</p><h2 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h2><p>在这里写一下个人的想法。</p><p>假如作为开发商，自然希望玩家能多充钱，因为开发商开发游戏的目的很明确就是为了赚钱。</p><p>作为游戏制作者，我希望玩家可以体验到更多的游戏内容，而不是靠运气和财富差距造成严重游戏体验偏差。至于钱，目前并没有太大的想法，现在只是单纯的因为喜欢游戏而做游戏，也许以后会为了钱设计坑玩家的套路，但是赚到钱（维持生计）的同时，一定会并行开发一款自己真正想做的游戏（单机游戏）。</p><p>作为玩家，希望策划别坑！</p>]]></content>
      
      
      <categories>
          
          <category> 游戏日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猴子都能学会的hexo博客安装教程</title>
      <link href="/easy-to-start-hexo/"/>
      <url>/easy-to-start-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-简介"><a href="#hexo-简介" class="headerlink" title="hexo 简介"></a>hexo 简介</h2><p>hexo 是一款开源博客项目。</p><p>即使是小白借助 hexo 也能轻松搭建属于自己的博客。</p><p>根据下面的教程，你能学会搭建个人博客，并且其他人可以通过外网访问到你的博客！</p><p>hexo 官网：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p><p>官方中文文档：<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a></p><p>【FAQ】</p><p>需要买服务器和域名吗？</p><p>通过 Github Pages 可以白嫖域名和服务器，所以不用买。</p><p>当然，如果你的钱包预算足够，买一款心仪的域名和自己的服务器那就更完美了！</p><p>话不多说，接下来直接进入教学篇。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本教程主要基于 Linux 系统，如果是 Window 系统也不用急，只是增加一个配置环境变量的步骤，机智的你一定懂得怎么做！</p><p>代码编辑器：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a></p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>hexo 依赖于 node，首先需要安装 node 环境。</p><h3 id="1、安装-Nodejs"><a href="#1、安装-Nodejs" class="headerlink" title="1、安装 Nodejs"></a>1、安装 Nodejs</h3><p><strong>Windows 系统</strong></p><p>nodejs 官网下载：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p><p>如果确实是小白，建议下载 Windows 安装包 (.msi)，msi 安装包会自动配置环境变量，真正实现小白式操作。</p><p><strong>Linux 系统</strong></p><p>Linux 版本众多，在这里只介绍 Centos 的安装方法。</p><p>第一步：安装 node 相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ openssl-devel epel-release</span><br></pre></td></tr></table></figure><p>第二步：安装 nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure><p>安装完成后，在控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果可以看得到版本信息说明安装成功。</p><p>安装完 node 之后，即可使用 npm 命令，由于 npm 的源是国外网站，速度会很慢，为了节省时间我们可以更换淘宝提供的镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装完成后就可以使用 <code>cnpm</code> 命令了，在后续的操作用 cnpm 来代替 npm。</p><h3 id="2、安装-Git"><a href="#2、安装-Git" class="headerlink" title="2、安装 Git"></a>2、安装 Git</h3><p>Git 是代码托管工具，整个过程 Git 的戏份很少，不懂的小白也不用担心，安装好就对了！</p><ul><li>Windows：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a>.</li><li>Mac：使用 Homebrew, MacPorts 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：sudo apt-get install -y git-core</li><li>Linux (Fedora, Red Hat, CentOS)：sudo yum install -y git-core</li></ul><blockquote><p>Mac 用户请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote><h3 id="3、安装-hexo"><a href="#3、安装-hexo" class="headerlink" title="3、安装 hexo"></a>3、安装 hexo</h3><p>使用 cnpm 命令一键安装 hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，在控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo</span><br></pre></td></tr></table></figure><p>如果看得到如下信息说明安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  help     Get help on a command.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &#39;hexo help [command]&#39; for the detailed information</span><br><span class="line">or you can check the docs: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;</span><br></pre></td></tr></table></figure><h2 id="搭建博客！"><a href="#搭建博客！" class="headerlink" title="搭建博客！"></a>搭建博客！</h2><p>现在开始搭建博客项目，运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>这个 blog 是文件夹的名字，你可以随意取，在这里我把它取名 blog。</p><p>执行完这个命令会自动在当前目录下创建一个 blog 文件夹，使用命令 <code>cd blog</code> 进入这个文件夹，接着再执行 <code>cnpm install</code>。</p><p>安装完成后，文件夹的目录如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>需要注意两个主要的配置文件：</p><h3 id="1、-config-yml"><a href="#1、-config-yml" class="headerlink" title="1、_config.yml"></a>1、_config.yml</h3><p>网站的配置信息，比如网站的名字什么的，都在这里进行配置。</p><h3 id="2、package-json"><a href="#2、package-json" class="headerlink" title="2、package.json"></a>2、package.json</h3><p>网站依赖的包（小白不用管这个东西），默认已经帮你配置好常用的包了。</p><p>以上，你的博客已经搭建完啦！</p><h2 id="访问博客！"><a href="#访问博客！" class="headerlink" title="访问博客！"></a>访问博客！</h2><p>什么鬼！？这就搭建完了？？</p><p>yes，我们打开控制台，在博客目录下执行命令启动博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619193-9a0c6a80-5bb3-11ea-88af-f8ea2b22b051.png" alt="启动hexo博客"></p><p>然后打开浏览器，输入 <code>http://localhost:4000</code> 或 <code>127.0.0.1:4000</code>。</p><p>你就可以看到搭建好的博客啦！</p><p>如下图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619228-6716a680-5bb4-11ea-99c2-d121aba9338f.png" alt="hexo博客"></p><h2 id="写下第一篇博文！"><a href="#写下第一篇博文！" class="headerlink" title="写下第一篇博文！"></a>写下第一篇博文！</h2><p>好吧，其实你的第一篇博客已经被系统写好了，也就是你在上图看到的标题为 Hello World 的博文。</p><p>接下来我们要手动创建第一篇博客！</p><p>使用命令 <code>hexo n &lt;博文标题&gt;</code> 来创建一篇新的博文。</p><p>控制台下输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure><p>执行完命令后，可以看到生成了一个 .md 格式的文件 <code>/blog/source/_posts/我的第一篇博客.md</code>，如下图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619292-13588d00-5bb5-11ea-9ff2-4833965a8456.png" alt="image"></p><p>这个文件就是我们的博文内容，进入 <code>/blog/source/_posts/</code> 然后打开 <code>我的第一篇博客.md</code>， 可以看到默认内容类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2020-03-01 10:49:10</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>开头的部分不要动，在结尾部分写自己想写的文章即可，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2020-03-01 10:49:10</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 兔子的日记</span><br><span class="line"></span><br><span class="line">今天的天气真好！</span><br></pre></td></tr></table></figure><p>如果你用的是 Markdown 还能看到预览效果！</p><p>Markdown 编辑器推荐：<a href="http://note.youdao.com/semdl/markdown.html" target="_blank" rel="noopener">有道云笔记</a></p><p>（你可以在其他地方编辑好文章，然后复制过来）</p><p>我用的是 PHPstorm，预览效果如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619349-c5905480-5bb5-11ea-89d2-d2abf88cdef4.png" alt="hexo第一篇博文"></p><p>文章内容已经写好了，接下来要生成静态页面，按 <code>Ctrl+C</code> 把刚才启动的博客关掉：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619390-2ae44580-5bb6-11ea-8835-12430e945e21.png" alt="关闭hexo服务"></p><p>然后依次运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清空数据库，如图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619432-8d3d4600-5bb6-11ea-9985-a56c65a7cf48.png" alt="hexo clean"></p><p>接着输入 <code>hexo g</code> 重新编译生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619447-c4135c00-5bb6-11ea-827b-28be7914d84c.png" alt="hexo 生成博文"></p><p>最后，再启动 hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器输入：<code>127.0.0.1:4000</code> 就可以看到自己刚才写的那篇文章了。</p><p>如图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619492-5451a100-5bb7-11ea-9af3-c25af149898f.png" alt="hexo第一篇博文"></p><p>至此，hexo 的基本操作已经 OK 了。</p><p>再来总结一下怎么发一篇博文。</p><p>1、执行 <code>hexo n &lt;标题&gt;</code> 创建博文文件</p><p>2、在 Markdown 编辑器完成博文书写，把内容复制到上面生成的博文文件里</p><p>3、执行 <code>hexo clean</code> 清空数据</p><p>4、执行 <code>hexo g</code> 重新编译生成静态文件</p><p>此外，本地调试用 <code>hexo s</code> 开启本地服务，在浏览器输入 <code>127.0.0.1:4000</code> 访问博客项目。</p><p>要记住这些步骤和命令对小白来说十分吃力，这是很正常的事情。</p><p>如果忘记了怎么操作，回头多看几遍本博文，熟能生巧！</p><h2 id="自定义主题！"><a href="#自定义主题！" class="headerlink" title="自定义主题！"></a>自定义主题！</h2><p>默认博客页面太丑，想换一个怎么办？</p><p>网上找到其他人分享的主题：<a href="https://github.com/zhvala/hexo-material-x-black" target="_blank" rel="noopener">https://github.com/zhvala/hexo-material-x-black</a></p><p>然后把它下载下来，点击右侧 Clone or download：</p><p>下载下来并且解压，把解压后的文件复制到博客项目的 themes 目录下。</p><p>或者直接 clone 到 themes 目录下并且命名为 material-x：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-material-x themes&#x2F;material-x</span><br></pre></td></tr></table></figure><p>主题文件都很大，等下载完成就可以了。</p><p>主题下载下来以后，目录结构如下：</p><p><img src="https://s2.ax1x.com/2020/03/01/3g86hV.png" alt="3g86hV.png"></p><p>themes 下面的文件夹都是主题。</p><p>接着编辑 .config.yml，拉到底部，修改 theme 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: material-x</span><br></pre></td></tr></table></figure><p>theme 默认是 landscape，改成刚刚下载的主题 material-x（即文件夹的名字）。</p><p>然后安装主题所需的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-posts</span><br></pre></td></tr></table></figure><p>接着执行下面几个命令（如果之前启动了博客项目，记得按 Ctrl+C 先关掉）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code>，可以发现主题已经被更换成新的了。</p><p>在 Github 上还有更多主题可以选择：<a href="https://github.com/search?q=hexo+theme&type=Repositories" target="_blank" rel="noopener">点击此处获取更多主题</a></p><h2 id="发布博客！"><a href="#发布博客！" class="headerlink" title="发布博客！"></a>发布博客！</h2><p>上面的步骤只能在自己的电脑打开博客项目，现在我们要把博客发到外网去，让别人来参观你的博客！</p><p>— 小剧场 —</p><p>你是想要节操，还是想白嫖域名和服务器？</p><p>我是想要节操还把域名和服务器嫖了！</p><p>嫖不成。</p><p>啪一声，你把 300 块大洋拍在桌子上。</p><p>这个能不能换来节操？</p><p>能，但是钱包空了。</p><p>啪一声，你把节操拍在桌子上，300 块大洋收回兜里。</p><p>嫖谁的？</p><p>GitHub 的！</p><p>就那个全球最大同性交流社区？</p><p>正是。</p><p>敢问君为何方神圣？</p><p>GitHub 基佬是也。</p><p>— 小剧场（完） —</p><p>没错，我们要白嫖 GitHub 提供的免费域名和空间——GitHub Pages！</p><p>GitHub Pages 提供了免费的服务可以让我们部署博客项目。</p><p>Github：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>注册一个账户并登陆。</p><p>接着点击左侧 Repositories 旁边的按钮 New 创建一个新的仓库，如图：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619699-608b2d80-5bba-11ea-8bff-2570abd32650.png" alt="image"></p><p>仓库的配置有两点需要注意，如果你没按照下面的要求，你的博客就访问不了：</p><p>1、仓库名称必须为：你的 GitHub 用户名.github.io，比如我的 Github 用户名是 huoshaotuzi，那么仓库的名字就是：huoshaotuzi.github.io</p><p>2、仓库必须为 Public 公开权限，如果选择 Private，就不能白嫖了，这也是上面的小剧场所说的出卖节操的原因，一旦公开权限，你的仓库 <strong>任何人都能访问</strong>，你的仓库设置成 Public，相当于你光着屁股暴露在 Github 几百万基佬面前，知道啥意思了吧？</p><p>创建好仓库后，可以看到如下的仓库信息：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619801-8107b780-5bbb-11ea-9b9b-77f1eb0b4078.png" alt="image"><br>（xxoo 是随便取的名字，不要问 xxoo 是什么意思，问了也不会告诉你。）</p><p>在这里把 SSH 后面的仓库地址复制下来，后面会用到。</p><p>接着返回到你博客的目录下，执行命令安装 git 插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>安装完成后，编辑根目录下的 _config.yml，拉到最底部，deploy 后面添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;huoshaotuzi&#x2F;xxoo.git（填你自己的）</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这里的 repo 填入上面说的仓库地址：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619912-0fc90400-5bbd-11ea-9636-1d7bbc7310ce.png" alt="image"></p><p>保存配置文件后，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>执行命令后开始自动编译并且上传到 GitHub 仓库，然后会提示要输入 Github 的账号跟密码。</p><p>为了避免每次上传都要重复输入账号密码，你可以输入下面的命令记住密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>上传成功后，返回仓库就能看到上传好的代码。</p><p>然后就可以通过仓库名称访问到你的博客了！</p><p>我的仓库名称是：huoshaotuzi.github.io</p><p>在浏览器输入：huoshaotuzi.github.io</p><p>刚刚部署上去的时候，需要等几分钟才能看到博客，不然会出现 404 或者其他问题。</p><p>白嫖党只能使用 GitHub 提供的域名，接下来给大家介绍如何指定域名进行访问。</p><p>比如我的网站是：<a href="https://blog.huotuyouxi.com">blog.huotuyouxi.com</a></p><p>这是怎么实现的呢?</p><h2 id="指定域名！"><a href="#指定域名！" class="headerlink" title="指定域名！"></a>指定域名！</h2><p>首先，你得有一个域名。</p><p>万网阿里云、百度云、腾讯云、京东云、华为云、国外的 GoDaddy……诸如此类域名服务提供商，任选一家即可。</p><p>建议购买 .com 后缀的域名，域名的名称就按照你自己喜欢的挑选了。</p><p>比如张三：zhangsan.com</p><p>皮卡丘博客：pikachublog.com</p><p>简单好记的域名，这个没什么要求的，选你喜欢的就好。</p><p>域名买好之后，在仓库主页的菜单栏，选择 Settings：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619981-0be9b180-5bbe-11ea-8b71-1a5cc2f906df.png" alt="image"></p><p>拉到下面，直到看到 GitHub Pages，然后点击 Choose a theme 选择一个主题：</p><p><img src="https://ae01.alicdn.com/kf/Hb6adf75de5bb405396b8991dcab4ccf2d.png" alt="image"></p><p>主题按照你喜欢的随便选一个就好：</p><p><img src="https://ae01.alicdn.com/kf/Hdad8baba745a4a5698426e9b386d9606a.png" alt="image"></p><p>比如选第一个，然后点击右下角 Select theme。</p><p>接着返回 Github Pages 配置域名：</p><p><img src="https://ae01.alicdn.com/kf/Ha7c7c267f4594459854b89d8782cf9366.png" alt="image"></p><p>在 Custom domain 栏处填写你购买的域名，然后点击 Save。</p><p>如果需要启用 https 域名，把 Enforce HTTPS 勾选即可，刚部署时需要等待几分钟 Enforce HTTPS 才会显示可选，并且勾选完成后也需要等待几分钟，Github 会为你免费提供 SSL 证书。</p><p>然后打开你购买域名的网站，例如阿里云，登录后打开右上角控制台-点击左上角展开菜单-选择域名：</p><p><img src="https://ae01.alicdn.com/kf/H59ae77f519c645c486feacd4c8e68ff8d.png" alt="image"></p><p>在域名右侧选择解析：</p><p><img src="https://ae01.alicdn.com/kf/H0f6fb6011e264e39a694159c9deac969C.png" alt="域名解析"></p><p>点击“添加记录”，记录类型 CNAME，主机记录 @，记录值填你自己仓库的名字：</p><p><img src="https://ae01.alicdn.com/kf/Hfa26d74adaf24408aba88ef049091802E.png" alt=""></p><p>如果你希望可以用 www 访问，那就再添加一条记录，主机记录填 www，其他跟上面的一样：</p><p><img src="https://ae01.alicdn.com/kf/H638380f92dbf4ff0bd97f57117e225fcv.png" alt=""></p><p>完成这一步你就可以通过购买的域名访问到博客了！</p><h2 id="指定服务器！"><a href="#指定服务器！" class="headerlink" title="指定服务器！"></a>指定服务器！</h2><p>不想出卖节操，就买台服务器自己安装环境，这样可以保证代码不被其他基佬看到。</p><h3 id="1、域名和服务器的选择"><a href="#1、域名和服务器的选择" class="headerlink" title="1、域名和服务器的选择"></a>1、域名和服务器的选择</h3><p>选服务器可是很有讲究的，看你网站的受众，如果是面向海外用户，就选国外的服务器；如果面向国内用户，那就买国内的服务器。服务器放在哪很大程度上会影响你网站的打开速度。</p><p>再者，如果你选国内服务器，还需要注意域名备案的问题。</p><p>想要搭建博客，最好提前买个域名进行备案。</p><p>没有备案的域名只能选择国外主机。</p><p>只建议购买：com、cn、net 这三个老牌域名。</p><p>非主流域名即使能备案，搜索引擎也很难收录，所以不推荐。</p><p>有条件或者嫌备案麻烦的，可以购买香港或者台湾地区的服务器，靠近大陆，延迟相对低一点，域名即买即用。</p><h3 id="2、服务器环境"><a href="#2、服务器环境" class="headerlink" title="2、服务器环境"></a>2、服务器环境</h3><p>服务器推荐 Centos 系统，如果是小白也可以选 Windows Server。</p><p>要让网站解析到服务器，首先需要安装 Web 服务器，老牌的 Web 服务器软件有 Apache，Windows 的 IIS。</p><p>这两个本人几乎没用过，就不在这里介绍了。</p><p>推荐使用 Nginx。</p><p>以 Centos 为例，安装十分简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>安装完成后，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;blog.conf</span><br></pre></td></tr></table></figure><p>按下 i 键插入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name blog.huotuyouxi.com;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按 Esc，输入 <code>wq!</code> 保存。</p><p>接着重启 Nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>在这里，<code>server_name</code> 是你的域名。</p><p><code>root</code> 是你的博客项目路径，可以下载 FileZilla 把博客上传到服务器，或者直接使用 <code>git clone</code> 下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www</span><br><span class="line">git clone &lt;你的博客仓库地址&gt;</span><br></pre></td></tr></table></figure><p>然后你在哪买的域名，就登录到控制台把域名解析到服务器的公网 IP。</p><p>解析的方法在上面已经有介绍了，这里不再重复。</p><p>3、更新博客内容</p><p>前面的文章介绍了如何编写和更新博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>更新博客内容并且推送到 Github 上面，你就可以回到服务器上，然后执行 <code>git pull</code> 把最新的博客内容拉取下来，实现博客的更新。</p><p>其中，<code>hexo g</code> 和 <code>hexo d</code> 两个命令可以简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><blockquote><p>有兴趣的可以去了解一下 Git 自动构建，延伸的内容太多了，本文写不下</p></blockquote><h3 id="4、博客代码备份"><a href="#4、博客代码备份" class="headerlink" title="4、博客代码备份"></a>4、博客代码备份</h3><p>使用 <code>hexo d</code> 上传到 Github 的只是编译后的静态文件，博客的代码并没有上传到仓库里。</p><p>这样一旦你的博客代码丢失，你就无法继续更新了。</p><p>为了避免这种情况，我们要把博客代码也上传到仓库里，最好是上传到同一个仓库。</p><p>回到本地的博客项目，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop</span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><p>这两个步骤，第一个是切换到新的分支 <code>develop</code>（名字可以随便取），然后把新的分支推送到远程仓库。</p><p>如此一来，你的博客代码也被保存至仓库里。</p><p>前往 Github 查看，点击 Branch 即可看到新的分支：</p><p><img src="https://s2.ax1x.com/2020/03/01/3g2BzF.png" alt="git 分支"></p><p>还记得最早我们在 _config.yml 设置的 Github 仓库地址吗？</p><p><img src="https://s2.ax1x.com/2020/03/01/3g2gd1.png" alt="hexo github 配置"></p><p>这里我们把静态文件的分支设置成 master，因此我们可以专注于在 develop 分支上写博文，然后用 <code>hexo d -g</code> 进行推送，不需要进行分支切换，十分方便！</p><p>把博客代码上传到远程仓库，即使你在另一台电脑上面也可以把项目克隆下来，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure><p>切换到 develop 分支上去写博文。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>借助 hexo 可以快速搭建属于自己的博客，平时学习到新东西的时候就可以记录下来，养成良好的习惯有助于学习成果的积累。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
