<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>火兔博客</title>
  
  <subtitle>火兔兔的小窝</subtitle>
  <link href="http://huotublog.com/atom.xml" rel="self"/>
  
  <link href="http://huotublog.com/"/>
  <updated>2023-02-16T06:50:23.259Z</updated>
  <id>http://huotublog.com/</id>
  
  <author>
    <name>火烧兔子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录一下最新学到的东西</title>
    <link href="http://huotublog.com/2023/02/15/2023-news-1/"/>
    <id>http://huotublog.com/2023/02/15/2023-news-1/</id>
    <published>2023-02-15T08:59:06.000Z</published>
    <updated>2023-02-16T06:50:23.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原本只打算用一年去做游戏，结果硬是拖了三年，现在总算做出来了，最后还是变成自己一个人在做，真是世事无常大肠包小肠，感兴趣的可以看看实际演示：<a href="https://www.bilibili.com/video/BV1XT411f7Pw/">https://www.bilibili.com/video/BV1XT411f7Pw/</a></p><p>最近重拾了这个博客，又新购了一个域名 huotutu.com，准备搭起来做一个小窝，研究前沿技术的同时顺便可以加入付费功能嘿嘿嘿~</p><p>好了，直接进入正题。</p><h2 id="PHP-是最好的语言吗？"><a href="#PHP-是最好的语言吗？" class="headerlink" title="PHP 是最好的语言吗？"></a>PHP 是最好的语言吗？</h2><p>因为使用 Unity 开发游戏，因此接触了 C#，结果现在重新撸 PHP，发现很不习惯了，比如 PHP 是弱类型语言，这样在编写代码的时候经常会很不规范，传来的值是什么，返回的值是什么都不清楚，就跟开盲盒一样……现在最新的 PHP 已经开始重视这点了，为了更加规范，PHP 也必须要注重变量类型和返回值的声明了。</p><p>第二点，PHP 的变量类型比较少，没有 Dictionary（字典），这个类型在开发游戏的时候非常好用，虽然 PHP 可以用关联数值实现相同的效果，但因为上面的第一点，会出现很复杂的情况，比如在 C# 可以用字典这么保存变量，声明一个敌人的模型数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 敌人模型数据</span><br><span class="line">public class Format_Enemy</span><br><span class="line">&#123;</span><br><span class="line">    public string id;</span><br><span class="line"></span><br><span class="line">    // 敌人的等级</span><br><span class="line">    public int level;</span><br><span class="line"></span><br><span class="line">    // 敌人的模型</span><br><span class="line">    public string prefab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，当游戏载入时，读取本地 json 文件，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;&quot;id&quot;: &quot;goblin&quot;, &quot;level&quot;: 1, &quot;prefab&quot;: &quot;Goblin&quot;&#125;,</span><br><span class="line">    &#123;&quot;id&quot;: &quot;monkey&quot;, &quot;level&quot;: 3, &quot;prefab&quot;: &quot;Monkey&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>enemy.json 文件以数组形式保存 model 类型的变量，接着将敌人数据载入字典：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个字典用来存储敌人模型数据</span><br><span class="line">Dictionary&lt;string, Format_Enemy&gt; models = new Dictionary&lt;string, Format_Enemy&gt;();</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">public void InitLoad()</span><br><span class="line">&#123;</span><br><span class="line">    // 这里是读取json文件的方法</span><br><span class="line">    var items = ModelUtil.GetInstance().Load&lt;List&lt;Format_Enemy&gt;&gt;(&quot;enemy&quot;);</span><br><span class="line"></span><br><span class="line">    // 循环将敌人id作为键名保存到字典</span><br><span class="line">    foreach (var item in items)</span><br><span class="line">    &#123;</span><br><span class="line">        models.Add(item.id, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Debug.Log(&quot;敌人模板数据载入完成&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的时候就非常简单了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var monkey = $models[&quot;monkey&quot;];</span><br><span class="line"></span><br><span class="line">// 输出monkey敌人的等级</span><br><span class="line">Debug.Log(monkey.level);</span><br></pre></td></tr></table></figure><p>因为字典是以 <code>key-object</code> 的形式保存数据，通过 model[id] 的形式获得的是一个 object 对象，因而可以直接调用对象的属性，可是 PHP 就不能这么做了，如下为 PHP 的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$enemies = [</span><br><span class="line">    &#x27;goblin&#x27; =&gt; [&#x27;id&#x27; =&gt; &#x27;goblin&#x27;, &#x27;level&#x27; =&gt; 1, &#x27;prefab&#x27; =&gt; &#x27;goblin&#x27;],</span><br><span class="line">    &#x27;monkey&#x27; =&gt; [&#x27;id&#x27; =&gt; &#x27;money&#x27;, &#x27;level&#x27; =&gt; 1, &#x27;prefab&#x27; =&gt; &#x27;money&#x27;],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$monkey = $enemies[&#x27;monkey&#x27;];</span><br><span class="line">var_dump($monkey[&#x27;level&#x27;]);</span><br></pre></td></tr></table></figure><p>调用方法如出一辙，可是区别在于，PHP 是弱类型的语言，这里的所有数据都是“凭空”输入的，因此在编译器上面无法判断是否出错，而在 C# 有类的约束，可以直接用 <code>.</code> 调出属性，如果有写错的地方，编译器第一时间就会报错。</p><p>PHP 的数组没有任何约数，甚至可以直接凭空捏造一个 <code>key</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr[&#x27;abc&#x27;] = 123;</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure><p>上面是一段没有任何问题的 PHP 代码，输出结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [&quot;abc&quot;]=&gt;</span><br><span class="line">  int(123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要任何声明可以凭空调用，这既是优点也是缺点，优点是写起来很方便，缺点是撸代码很不规范，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function updateGoods(array $goods)</span><br><span class="line">&#123;</span><br><span class="line">    if ($goods[&#x27;status&#x27;] == true) &#123;</span><br><span class="line">        // ... 处理逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $price = $goods[&#x27;price&#x27;];</span><br><span class="line">    var_dump($price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的数组调用，通过传入商品数据，在方法内更新商品状态，因为传入的是一个数组（关联数值），数组的键名完全就是凭空写进去的，没有任何约数，不知道的人根本不懂得应该传入什么键名，这样的代码后期无法维护，而当一个方法所需要的参数较多时，应该封装成类作为参数传入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class  GoodsData</span><br><span class="line">&#123;</span><br><span class="line">    public bool $status;</span><br><span class="line">    public int $price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function updateGoods(GoodsData $goods)</span><br><span class="line">&#123;</span><br><span class="line">    if ($goods-&gt;status == true) &#123;</span><br><span class="line">        // ... 处理逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $price = $goods-&gt;price;</span><br><span class="line">    var_dump($price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才能起到约束作用，没有约束就没有规范，没有规范就难以维护。</p><p>要我说的话，PHP 依然是最好的语言，虽然还有许多不方便的地方，但 PHP 8 版本的出现也在逐渐与 JAVA 靠拢，并且极低的学习成本以及快速搭建网站的能力，至少目前是最适合入门的预言，虽然现在张口就来“高并发”，但是对于大部分网站根本就做不起来，谈何高并发呢？swoole 的出现也让 PHP 性能得到极大的提高，对于一般中小型企业绰绰有余，当你的网站出现高并发的问题时，那么你应该高兴呀！这表明你做起来了，有钱了，加两台服务器负载均衡一下就完事！如果不是加钱就能解决的问题，那也完全有能力慢慢转型，从 PHP 转到 go 或者 JAVA 即可，有钱了什么事都好说，还没成功就开始谈高并发显然属于瞎操心了，大部分产品都活不过一年……用 PHP 可以快速构建你的产品，让你的产品在几个月内就上线，试错成本很低。</p><p>最关键的是……PHP 的工资也不高，便宜好用，可能招几个刚毕业的大学生第二天就能开始干活了。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解是新时代编程的主流，PHP 8 也很快就跟上了，所谓的注解，其实就是通过「反射」获取到注释的内容，再通过一系列解析获得想要的结果。先来说一下什么是反射，反射就是程序获取到自身的一个行为，这么说很难理解，但是看下面的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 这是一个类</span><br><span class="line"> */</span><br><span class="line">class  TestClass</span><br><span class="line">&#123;</span><br><span class="line">    private string $name;</span><br><span class="line"></span><br><span class="line">    public function test(string $a, int $b): void</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($a, $b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 PHP 里面的一个类，有一个 string 类型的私有属性 <code>name</code>，还有一个简单的方法，那么问题来了，我们怎么获取到注释信息？你没看错，我们现在要获取这个类的<strong>注释</strong>……正常来说，哪有这么奇怪的需求啊？注释不是写个码农看的吗？我们要拿注释做什么呢？关于这个问题，下文会说明，但是先解决眼前的问题——我们到底该如何通过代码拿到注释信息呢？</p><p>我们顶多也就知道如何拿到类的名称，比如 PHP 8 里面最新加入了一个获取类名称的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$obj = new TestClass();</span><br><span class="line">var_dump(get_debug_type($obj));</span><br><span class="line"></span><br><span class="line">// 输出结果</span><br><span class="line">string(9) &quot;TestClass&quot;</span><br></pre></td></tr></table></figure><p>可是老师从来没教过我们怎么获取注释……正确答案是：通过<strong>反射机制（Reflection）</strong>。反射就是程序获取自身属性的一种行为，不仅是注释，甚至是方法是公开的（public）还是私有的（private），类有哪些属性，哪些方法等等都能给你查的明明白白。</p><p>首先是类的注释，也就是在类声明上方的注释部分，为了通过反射获取类的注释，需要实例化反射类 <code>ReflectionClass</code>（PHP 自带）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$reflection = new ReflectionClass ( TestClass::class );</span><br><span class="line">$ref = $reflection-&gt;getDocComment();</span><br><span class="line"></span><br><span class="line">var_dump($ref);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(26) &quot;/**</span><br><span class="line"> * 这是一个类</span><br><span class="line"> */&quot;</span><br></pre></td></tr></table></figure><p>接下来，我们可以来点更“变态”的，我想要拿到类的方法，想知道它的参数名称！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$reflection = new ReflectionClass (TestClass::class);</span><br><span class="line">$res = $reflection-&gt;getMethod(&#x27;test&#x27;);</span><br><span class="line">$params = $res-&gt;getParameters();</span><br><span class="line">foreach ($params as $param) &#123;</span><br><span class="line">    var_dump($param-&gt;getType()-&gt;getName() . &#x27;_&#x27; . $param-&gt;getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(8) &quot;string_a&quot;</span><br><span class="line">string(5) &quot;int_b&quot;</span><br></pre></td></tr></table></figure><p>不仅是变量类型，形参的名字都拿到了，这就是反射的神奇之处，它可以获取到自身的属性，同时还可以改变属性的值，例如上面的 <code>name</code> 属性是私有变量，按照我们的常规思想是无法通过调用属性来改变值的，但是通过反射却可以，为了方便演示，增加了一个 <code>show</code> 方法用来输出 <code>name</code> 的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TestClass</span><br><span class="line">&#123;</span><br><span class="line">    private string $name;</span><br><span class="line"></span><br><span class="line">    public function show(): void</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，通过反射来修改 <code>name</code> 的值并调用 <code>show</code> 方法查看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$obj = new TestClass();</span><br><span class="line"></span><br><span class="line">$reflection = new ReflectionClass ($obj);</span><br><span class="line">$res = $reflection-&gt;getProperty(&#x27;name&#x27;);</span><br><span class="line">$res-&gt;setAccessible(true);</span><br><span class="line">$res-&gt;setValue($obj, &#x27;abc&#x27;);</span><br><span class="line">$obj-&gt;show();</span><br><span class="line"></span><br><span class="line">// 输出结果</span><br><span class="line">string(3) &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>神奇吧！！！在无法访问私有变量的情况下，竟然可以通过反射修改私有变量的值。<br>emmm……可是仔细一想，虽然反射很 NB，可是这在开发中有什么用呢？<br>完全就是多此一举嘛~<br>如果想要修改变量的值，为什么不能直接写个 <code>get-set</code> 方法呢？<br>确实如此，反射在我们日常工作的用途并不大，也不会有多少人接触。<br>反射机制可以获取变量类型、方法名称、参数、注释信息等等，这些在日常处理业务几乎没有作用。<br>但是它在设计框架、构筑开发流程中非常重要！<br>就好比我们日常基本接触不到设计模式，可设计模式却是框架的核心。<br>而现代的主流框架已经开始利用反射机制实现独特的开发方式，比如现在很热门的“依赖注入”就是通过反射实现的，比如下面这段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    private TestService $service;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service = new TestService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestService</span><br><span class="line">&#123;</span><br><span class="line">    public function show(): void</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#x27;hell world&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在有一个 <code>TestService</code> 类，我们想在 <code>TestController</code> 调用，需要手动 <code>new</code> 的方式在构造方法进行赋值，但是在 Laravel 框架里，却可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    private TestService $service;</span><br><span class="line"></span><br><span class="line">    public function __construct(TestService $service)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service = $service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吗？现在不需要手动 <code>new</code> 创建对象了，因为当你在构造方法里设置了一个参数，在 Laravel 框架的作用下就会自动实例化这个对象进行赋值，这就叫做依赖注入，正如其名，你需要的“依赖”会被框架“注入”。</p><p>你可能会说，这不就是少写了一段代码吗？<br>实际上，别看着小小的变化，却涉及到整个编程流程方式的改变。</p><p>一个基本控制器如下，内有一个 <code>index</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    private TestService $service;</span><br><span class="line"></span><br><span class="line">    public function __construct(TestService $service)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service = $service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function index(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $params = $request-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法通过依赖注入获取到了 <code>Request</code> 对象，而在 Laravel 中，这个对象保存了请求的信息，我们可以直接从这个对象获取到所有请求参数，是不是很方便？这样做既让编程更加“优雅”，同时也减少了系统之间的耦合度。</p><p>依赖注入是框架帮你实现的，上面我介绍了反射的原理，你完全可以自己写一个依赖注入来试试~</p><blockquote><p>框架并不是简单的函数封装，而是提供一个编程的环境。</p></blockquote><p>依赖注入和控制反转，还有反射……一大堆新的名词，老实说我十分反感，如果不能把复杂的问题简单的讲述，那说明理解不到位，或者故意把简单的说成复杂的，搞得好像很高大上一样，说的就是金融行业……如果你是初次看到这些名词，不用担心，因为你现在已经学 <del>废</del> 会了。</p><blockquote><p>我不推荐你去搜这些专有名词啥意思，因为看完你会更懵逼——by 傻瓜式编程指南（兔兔著）</p></blockquote><p>现在你已经知道了，依赖注入就是框架帮你注♂入一些东西，比如你想要的类的对象，只要写在方法的形参上，框架就会帮你实例化，你直接调用就完事。请参考 N 年之前我写的火兔引擎（开发框架），我在设计框架的时候就已经明确了目标：编程的最高境界是“无码”。</p><p>换句话说，除非你是非常喜欢写代码的人（高情商），否则，框架会自动帮你处理很多琐碎的事情，因此你不需要写太多的代码。市面上的 PHP 框架多如牛毛，什么阿猫阿狗阿兔都想“自创框架”，比如<strong>大名鼎鼎的 Fire Rabbit Engine</strong>，就是阿兔本兔原创的框架。</p><p>学习一门新的框架要不少时间成本，要我说的话，对大部分人来说，框架只要选择开发起来“舒服”的就行了，大部分情况下都不需要注意性能问题，小公司注重的是开发效率，指不定过完年公司就倒闭了 233，我以前上班的时候就是一个“项目杀手”，做一个项目死一个，入职一年，弄死的项目少则三个，多则五个！</p><p>哈哈哈，其实不是因为项目写的垃圾才死了，而是老板三心二意，今天想做旅游项目，明天就想做游艇租赁……我踏马，每个项目还都是我负责的，带着整个部门加班到一两点，终于搞定！第二天，老板不要了，项目上线第一天就寄了。</p><p>最后，我离职了，原因是给的钱不多吗？不是，那个时候我才刚刚毕业，并不看重钱，而是每个项目都是我在负责，就好像辛辛苦苦养大的孩子突然夭折了……说多了都是泪。</p><p>所以，当一个项目立项的时候，如果负责人非得选用性能最好，开发舒适度最烂的时候，应该想想，这是不是一种傲慢，自信的认为这个项目一定能成功呢？小公司根本不在乎性能，只要快速构建项目，快速上线才是王道！尤其是老板催你进度的时候，那跟催命似的，到时候后悔就来不及了。</p><p>回归主题，接下来开始介绍什么是“注解”。注解其实就是注释的一种，原本注释是给人看的。现在，一些走在时尚前端的码农研究出了新的花活——让程序也能看注释。</p><p>例如 Java 里面有这种代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Deprecated</span><br><span class="line">@SuppressWarnings</span><br></pre></td></tr></table></figure><p>下面是我网上 copy 来的冒泡排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class BubbleSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        // 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            // 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span><br><span class="line">            boolean flag = true;</span><br><span class="line"></span><br><span class="line">            for (int j = 0; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    int tmp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + 1];</span><br><span class="line">                    arr[j + 1] = tmp;</span><br><span class="line"></span><br><span class="line">                    flag = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在方法上方加了一个 <code>@Override</code>，这个就是注解，它的作用是检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</p><p>这股时尚的潮流也 <del>内</del> 卷到 PHP 那边去了，于是，一款主打注解开发为亮点的框架出现了，那就是 Hyperf：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Hyperf\HttpServer\Contract\RequestInterface;</span><br><span class="line">use Hyperf\HttpServer\Annotation\AutoController;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @AutoController()</span><br><span class="line"> */</span><br><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line">    // Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求</span><br><span class="line">    public function index(RequestInterface $request)</span><br><span class="line">    &#123;</span><br><span class="line">        // 从请求中获得 id 参数</span><br><span class="line">        $id = $request-&gt;input(&#x27;id&#x27;, 1);</span><br><span class="line">        return (string)$id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过写注释的方式来定义路由，是不是很新鲜？除此之外，注解也可以实现上面提到的依赖注入，比如我们需要一个类的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @AutoController()</span><br><span class="line"> */</span><br><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @Inject()</span><br><span class="line">     * @var UserService</span><br><span class="line">     */</span><br><span class="line">    private $userService;</span><br><span class="line">    </span><br><span class="line">    // /index/info</span><br><span class="line">    public function info(RequestInterface $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $id = $request-&gt;input(&#x27;id&#x27;, 1);</span><br><span class="line">        return $this-&gt;userService-&gt;getInfoById((int)$id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在只要加入一个 <code>Inject</code> 注解，并且用 <code>var</code> 来声明变量的类型，框架就会自动为你注♂入这个类的实例，在 PHP 8 以前，注解都是非官方的，只是民间通过反射机制实现了 JAVA 类似的注解，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param Foo $argument</span><br><span class="line"> * @see https:/xxxxxxxx/xxxx/xxx.html</span><br><span class="line"> */    </span><br><span class="line"> function dummy($Foo) &#123;&#125;</span><br></pre></td></tr></table></figure><p>而且这种注解一般没有什么实际的意义，就是一种人为的规定，比如 <code>@param</code> 我们视为一个参数，当然你也可以写成 <code>@canshu</code>，这都是可以的，因为这就是一个注释而已，注释在程序中不会被认为是代码，你怎么写都可以。</p><p>然后自己再写一个解析注释的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ref = new ReflectionFunction(&quot;dummy&quot;);</span><br><span class="line">$doc = $ref-&gt;getDocComment();</span><br><span class="line">$see = substr($doc, strpos($doc, &quot;@see&quot;) + strlen(&quot;@see &quot;));</span><br></pre></td></tr></table></figure><p>上面是 PHP 最早的民间注解实现原理，而第一次尝试用注解作为开发的 Hyperf 框架很快就流行起来，习惯了这种开发方式会变得很愉♂悦，直到 PHP 8 开始，官方实现了 PHP 的注解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#[Params(&quot;Foo&quot;, &quot;argument&quot;)]</span><br><span class="line">#[See(&quot;https://xxxxxxxx/xxxx/xxx.html&quot;)]</span><br><span class="line">function dummy($argument) &#123;&#125;</span><br></pre></td></tr></table></figure><p>简单地说，注解就是程序读得懂的注释，我们可以通过注解实现依赖注入等等许多功能，人有多大胆，地有多大产，Hyperf 的做法属实是一种大胆的尝试了，无论是路由、控制器、中间件等等，都可以用注解的方式书写。</p><p>以前我最喜欢的是 Laravel 框架，而现在 Hyperf 是基于 swoole 的框架，而且框架的设计者应该也是 Laravel 的重度爱好者，从 Laravel 转 Hyperf 几乎没有任何学习成本，最新的火兔小窝（huotutu.com）将使用 v3.0 版本开发~</p><p>但其实也就是个博客一样的项目，杀鸡用牛刀~swoole 是 PHP 高并发的解决方案，我的博客估计也没几个人看，不过既然能提升性能，而且能学到新的前沿技术，何乐不为呢？</p><p>好了，以上就是关于注解的说明，注解（Annotation）并不属于程序的代码，而是一种开发方式，就是通过特殊的格式定义注释，好让系统看得懂，因为注解的存在，注释也变成了一种开发方式，经典例子就是 Hyperf 框架。</p><p>框架并不是简单的函数封装，选择什么框架开发项目就决定了你的开发方式，开发方式是由框架设计者决定的，Hyperf 框架也不过是 swoole 框架的一个可选方案，只是因为我喜欢 Laravel 的开发方式，所以选择它。</p><p>再次摘抄火兔经典语录：</p><blockquote><p>码农的最高境界是无码。</p></blockquote><p>可以缩减写代码工作量的框架都是好框架，现在 ChatGPT 火爆，甚至还能帮你写代码，以后说不定会被 AI 取代 233。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>双叒叕是一个令人头痛的新名词！<br>先让我们来看摊煎饼的数学问题，假设一个锅每次只能摊两个煎饼，煎饼要求两面摊到金黄，单面摊到金黄需要 1 分钟，现在有三张饼要摊，请问把三张饼摊到两面金黄需要多久？</p><p>正常人的思维：先弄 A 和 B 两张饼，两面都金黄一共需要 2 分钟，接着再下 C，两面金黄又需要 2 分钟，总计需要 4 分钟。</p><p>机智的人可能发现问题了，A 和 B 在锅里的时候，C 是空闲的，当 A 和 B 摊熟了，C 一个饼占了整个锅（一个锅是可以放两张饼的），那是不是有点浪费资源了？于是，聪明的人就有了新的方法：</p><p>第一分钟，A 和 B 下锅，把一面摊到金黄，接着把 B 拿出来放到一旁，把 C 下锅；<br>第二分钟，A 两面全熟拿起来放到盘子，再把 B 翻过来继续摊，接着把刚才摊了一面的 B 下锅；<br>第三分钟，BC 两面全熟，收锅关火！</p><p>同样的锅，同样是三张饼，用这种方法竟然节约了 1 分钟！这是因为锅一直都是保持两张饼，而第一种方法，锅会出现空闲状态，原本能同时摊两张饼，却只摊了一张，这就是浪费时间的因素。</p><p>所谓的协程就是这种原理，最大化的利用程序的效率，锅就是服务器，为了把服务器的性能榨干就不能让它闲着，要永远让它“干活”。要知道，程序的执行速度是不同的，有的程序执行起来很慢（如读取 Excel），有的很快（给变量赋值），我们都知道程序是从上至下执行的，前面的代码没执行完毕，后面的代码就会一直处于等待状态，这就是浪费“资源”，就像上面的锅一样，原本可以同时摊两张饼，可一张饼占了整个锅，效率自然就低了。</p><p>例如 PHP 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;hello&#x27;;</span><br><span class="line">echo &#x27;world&#x27;;</span><br></pre></td></tr></table></figure><p>这段代码为什么永远都是按顺序输出 <code>hello</code> 和 <code>world</code> 呢？正是因为程序是自上而下执行的，而且这两段代码执行速度很快，所以瞬间就输出完毕了，接着我们再模拟一下，代码执行慢的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function loadFile()</span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;hello&#x27;;</span><br><span class="line">    sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayWorld()</span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;world&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadFile();</span><br><span class="line">sayWorld();</span><br></pre></td></tr></table></figure><p>这段代码同样是输出两个单词，但是会发现因为 <code>sleep</code> 的存在，第一个 <code>hello</code> 输出完毕之后等了一秒才输出 <code>world</code>，两个单词的输出顺序依然没变，这是因为程序无论如何都是从上往下执行的，而这种「等待」完全就是不必要的，两个函数没有任何关联，为什么不能先让下面的代码进行输出呢？</p><p>就好比医院挂号，按照 1、2、3、4、5 顺序排列，1 号第一个进入窗口办理，很快就办完了，接下来轮到 2 号，可他身份证忘记带了，就打电话叫家人送过来，那么此时问题来了……现在确实是轮到 2 号办理手续，但是等他家人送身份证过来要半小时，后面的 3~5 号以及办理挂号的工作人员就这么干等着吗？那是不是可以通融一下，在 2 号的身份证送来之前，先让后面的人办理？等身份证到了，再让 2 号继续办理也不迟呀！</p><p>正常的程序可不会这么“通情达理”，程序是一定严格按照从上至下的顺序执行的，也就是说，现在 2 号就是蛮横的说：现在轮到我挂号，我没办完，凭什么让你们先办啊？所以此时必须等到 2 号身份证送来，后面的 3~5 号才能继续办理。</p><p>听起来是不是很无语，可程序只能这么干，不然就乱了套！<br>程序可不知道你下面的代码是不是跟上面的有关，万一执行顺序乱了就报错啦~</p><p>协程就是这个问题的解决方案：让你决定程序的控制权。<br>程序不知道该不该先让后面的代码执行，可是你知道呀！那交给你来控制不就完事了吗？</p><p>先来说一个 PHP 的关键词 <code>yield</code>，这个关键词并不是协程，而是用来控制迭代器的，迭代器就是一个能够被循环的对象，如果理解不了就直接认为是一个数组就好，例如下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$items = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能不曾想过，为什么 <code>foreach</code> 可以循环一个数组呢？这是因为数组就是一个迭代器（Iterator）不只是数组，只要实现了这个接口的都可以被 <code>foreach</code> 循环，我们尝试来自定义一个迭代器（注意，PHP 8.1 不支持）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Rabbit implements Iterator</span><br><span class="line">&#123;</span><br><span class="line">    private int $pos;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pos = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public function current()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function next()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pos++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function key()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function valid()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;pos &lt;= 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function rewind()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pos = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rabbit = new Rabbit();</span><br><span class="line">foreach ($rabbit as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我定义了一个迭代器 <code>Rabbit</code>，通过 <code>foreach</code> 循环依次输出 0~10。任何类只要实现了 <code>Iterator</code> 迭代器接口就可以被 <code>foreach</code> 循环输出，接着我们的主角 <code>yield</code> 关键词要出现了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function rabbit()</span><br><span class="line">&#123;</span><br><span class="line">    for ($i = 0; $i &lt;= 10; $i++) &#123;</span><br><span class="line">        yield $i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$items = rabbit();</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的结果也是依次输出 0~10，这就是 <code>yield</code> 关键词的作用，它看起来像是 <code>return</code>，但又不全是，因为 <code>return</code> 一旦返回函数就会结束，而 <code>yield</code> 返回了数字，但却没有退出函数，不仅如此，<code>yield</code> 的返回值是一个可以被循环体调用的迭代器。</p><p>接着再看有意思的一组数据，我们稍加修改代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function rabbit()</span><br><span class="line">&#123;</span><br><span class="line">    for ($i = 0; $i &lt;= 10; $i++) &#123;</span><br><span class="line">        var_dump(&#x27;a&#x27; . $i);</span><br><span class="line">        yield $i;</span><br><span class="line">        var_dump(&#x27;b&#x27; . $i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$items = rabbit();</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>yield</code> 关键词上面和下面分别进行输出，我们再运行一次查看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string(2) &quot;a0&quot;</span><br><span class="line">int(0)</span><br><span class="line">string(2) &quot;b0&quot;</span><br><span class="line">string(2) &quot;a1&quot;</span><br><span class="line">int(1)</span><br><span class="line">string(2) &quot;b1&quot;</span><br><span class="line">string(2) &quot;a2&quot;</span><br><span class="line">int(2)</span><br><span class="line">string(2) &quot;b2&quot;</span><br><span class="line">string(2) &quot;a3&quot;</span><br><span class="line">int(3)</span><br><span class="line">string(2) &quot;b3&quot;</span><br><span class="line">string(2) &quot;a4&quot;</span><br><span class="line">int(4)</span><br><span class="line">string(2) &quot;b4&quot;</span><br><span class="line">string(2) &quot;a5&quot;</span><br><span class="line">int(5)</span><br><span class="line">string(2) &quot;b5&quot;</span><br><span class="line">string(2) &quot;a6&quot;</span><br><span class="line">int(6)</span><br><span class="line">string(2) &quot;b6&quot;</span><br><span class="line">string(2) &quot;a7&quot;</span><br><span class="line">int(7)</span><br><span class="line">string(2) &quot;b7&quot;</span><br><span class="line">string(2) &quot;a8&quot;</span><br><span class="line">int(8)</span><br><span class="line">string(2) &quot;b8&quot;</span><br><span class="line">string(2) &quot;a9&quot;</span><br><span class="line">int(9)</span><br><span class="line">string(2) &quot;b9&quot;</span><br><span class="line">string(3) &quot;a10&quot;</span><br><span class="line">int(10)</span><br><span class="line">string(3) &quot;b10&quot;</span><br></pre></td></tr></table></figure><p>这里发现了奇怪的地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(2) &quot;a0&quot;</span><br><span class="line">int(0)</span><br><span class="line">string(2) &quot;b0&quot;</span><br></pre></td></tr></table></figure><p>我们的循环体是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ($i = 0; $i &lt;= 10; $i++) &#123;</span><br><span class="line">    var_dump(&#x27;a&#x27; . $i);</span><br><span class="line">    yield $i;</span><br><span class="line">    var_dump(&#x27;b&#x27; . $i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照程序从上往下执行的观点，难道不是应该输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(2) &quot;a0&quot;</span><br><span class="line">string(2) &quot;b0&quot;</span><br><span class="line">int(0)</span><br></pre></td></tr></table></figure><p>这样才对吗？可为什么却先跳到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$items = rabbit();</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item); // 这个地方输出 int(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，程序是先返回了 0 这个数，接着再执行下面的 <code>var_dump</code> 输出 b，因为 <code>yield</code> 的存在导致程序的执行顺序发生了变化，接着继续演示 <code>yield</code> 是如何手动控制执行顺序的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function action_1()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;action_1_1&#x27;);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#x27;action_1_2&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function action_2()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;action_2_1&#x27;);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#x27;action_2_2&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$action_1 = action_1();</span><br><span class="line">$action_2 = action_1();</span><br><span class="line"></span><br><span class="line">$action_1-&gt;current();</span><br><span class="line">$action_2-&gt;current();</span><br><span class="line"></span><br><span class="line">var_dump(&#x27;ok&#x27;);</span><br><span class="line"></span><br><span class="line">$action_1-&gt;next();</span><br><span class="line">$action_2-&gt;next();</span><br></pre></td></tr></table></figure><p>上面有两个函数 <code>action_1</code> 和 <code>action_2</code>，通常情况下，如果没有 <code>yield</code> 关键词：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(&#x27;action_1_1&#x27;);</span><br><span class="line">var_dump(&#x27;action_1_2&#x27;);</span><br></pre></td></tr></table></figure><p>这段代码会一股脑的全部输出，但是因为有了 <code>yield</code> 关键词，我们就可以手动调用 <code>next</code> 方法让它往下执行，如果你不调用 <code>next</code>，那它就会在 <code>yield</code> 处返回，不再往下执行。</p><p>结果输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string(10) &quot;action_1_1&quot;</span><br><span class="line">string(10) &quot;action_1_1&quot;</span><br><span class="line">string(2) &quot;ok&quot;</span><br><span class="line">string(10) &quot;action_1_2&quot;</span><br><span class="line">string(10) &quot;action_1_2&quot;</span><br></pre></td></tr></table></figure><p>可以发现，因为 <code>yield</code> 返回的是一个生成器，倘若我们执行了 <code>next</code> 方法，它才会继续向下执行，否则，它就会“卡”在 <code>yield</code> 的地方，这就是我们可以手动调控程序执行顺序的原因了。</p><p>换句话说，<code>yield</code> 就跟断点一样，我们想让程序在哪停下，就在哪用 <code>yield</code> 返回就行了，但是与 <code>return</code> 不同的是 <code>yield</code> 返回的是控制权，并不是让程序中断，这是利用了 <code>yield</code> 返回的是一个迭代器的原理实现的。</p><p>协程与多线程很容易混淆，我们会误以为是不是用 <code>yield</code> 改变了控制权，程序就可以不会再阻塞执行了呢？如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;1&#x27;);</span><br><span class="line">    sleep(3);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#x27;2&#x27;);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#x27;3&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = test();</span><br><span class="line">$test-&gt;current();</span><br><span class="line">$test-&gt;next();</span><br><span class="line">$test-&gt;next();</span><br></pre></td></tr></table></figure><p>结果我们发现，在输出第一个“1”的时候，程序还是卡了 3 秒才继续输出，换句话说，这个代码依然是同步执行的，上面的代码如果不执行完毕，还是会卡在执行过程，那这个 <code>yield</code> 到底有什么用呢？它还不是卡住了吗？</p><p>回到摊煎饼的问题，现在只有一口锅，一口锅最多每次只能摊两个煎饼，那么为了提高效率，可以按照上面三分钟的摊法，还有一种方法——再多加一口锅，两口锅就可以同时摊 4 个煎饼了！</p><p>再加一口锅即代表多线程，「协程」不是多线程，这两者很容易混淆，多线程是再切出一条线程处理程序，而「协程」还是在那个线程，只是我们通过任务调度的方式提高执行效率，还是那条线程，还是原来的味道！</p><p>那么这个 <code>yield</code> 到底哪里神奇了啊？它神奇的地方并非可以异步处理程序！<br>因为它本身就是在一个线程里面执行的，它的作用只是对程序进行“调度”而已。</p><p>正如上面的例子，多线程是加了一口锅，而协程是合理的利用这口锅，使它保持着最高效率——同时摊两个饼！<br>用多线程当然可以解决效率低下的问题，那为什么还要协程呢？</p><p>因为线程本身就是一种资源，协程就是最大化利用这条线程的性能，一口锅明明可以同时摊两个煎饼，为什么非要再开一个新锅呢？所以协程的作用就是让锅一直都在摊饼，这就需要一个名为“调度器”的东西，调度器的作用就是依次执行所有协程任务，直到所有协程任务结束了，调度器才结束：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function create_task($max)</span><br><span class="line">&#123;</span><br><span class="line">    for ($i = 0; $i &lt; $max; $i++) &#123;</span><br><span class="line">        yield $i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$task1 = create_task(3);</span><br><span class="line">$task2 = create_task(5);</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    var_dump($task1-&gt;current());</span><br><span class="line">    var_dump($task2-&gt;current());</span><br><span class="line"></span><br><span class="line">    $task1-&gt;next();</span><br><span class="line">    $task2-&gt;next();</span><br><span class="line">&#125; while ($task1-&gt;valid() || $task2-&gt;valid());</span><br></pre></td></tr></table></figure><p>上面的例子中，<code>create_task</code> 创建了两个数值不等的任务，所谓调度器其实就是 <code>do-while</code> 循环体，<code>valid</code> 方法判断这个任务是否结束，如果两个任务全部结束才跳出这个循环（调度器），但是因为我们给这两个任务不同的最大值，导致两个任务执行的次数不一样，第一个任务只返回 3 个值，第二个任务却返回了 5 个值，最后输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int(0)</span><br><span class="line">int(0)</span><br><span class="line">int(1)</span><br><span class="line">int(1)</span><br><span class="line">int(2)</span><br><span class="line">int(2)</span><br><span class="line">NULL</span><br><span class="line">int(3)</span><br><span class="line">NULL</span><br><span class="line">int(4)</span><br></pre></td></tr></table></figure><p>前面三个数字，两个任务输出一模一样的结果，但是第一个任务从第四个数字开始就返回 <code>Null</code> 了，这是因为这个任务已经结束了，所以不再有新的返回值。同理，如果再添加任务三、任务四……那么这个调度器依然是同时执行所有任务，直到任务全部结束才跳出循环。</p><p>这就是协程的全部概念了……也就是说，协程是通过调度器同时执行全部的任务，这些任务绝对是不能阻塞进程的！否则任务阻塞了，后面的也得等在那边，所以如果使用协程，一定不能使用阻塞的代码，否则跟没用一样，协程的作用就是：把所有的煎饼都摊在锅里，这个锅能同时摊多少个煎饼，它就往里面塞多少个煎饼，而且雨露均沾，每个煎饼都只摊 1 秒，然后以迅雷不及掩耳之势换下一个煎饼，就这样，每个煎饼每次只摊 1 秒，直到全部的煎饼两面金黄为止。</p><blockquote><p>上面的 1 秒只是一个比喻，实际上程序的运行速度比这个快多了。</p></blockquote><p>协程并不是异步执行任务，它不是多线程，它的作用是控制程序的执行权限，通过权限转移的方式结合死循环，让每个任务每次循环都运行一点点，直到所有的任务全部完成才结束死循环，因此协程能够最大化利用程序的运算能力。</p><blockquote><p>上面的调度器也是举个栗子罢了，实际的调度器会优化性能，比方说上面 3 次循环结束了，后面全部都是 NULL，实际上应该把已经完成的任务从循环体去掉，避免重复执行节约性能，这里就不对调度器详细展开了。</p></blockquote><p>关于协程，我也是搞得很懵逼，最开始以为它跟多线程异步处理一样，就是把一些费时的任务切出去，然后执行下一段代码，其实并不是，如果两者混淆就理解不了协程了，协程……并不是异步处理，它也不是什么程序代码，它只是一种控制权转移。</p><p>协程的调度器其实是利用协程的控制权转移让所有的代码可以同时执行，直到全部的代码执行完成。它本身就是一段阻塞程序（用死循环来实现调度器，任务不全部结束就跳不出这个死循环），它只是在循环执行这些异步任务罢了，而退出循环的条件是所有任务全部执行完毕。</p><p>当然，如果看完上面写的还是一脸懵逼……那也难怪：道可道，非常道，名可名，非常名。<br>只能意会，不可言传了。</p><h2 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h2><p>关于协程就抛到一边吧，因为理解起来很不容易，写完协程现在都一点半了，是凌晨一点半！接下来看轻松一点的 AOP 编程，这也是现在很热门的编程思想，它就跟 OOP（面向对象编程）一样，是现在广大码农喜欢的新理念。</p><p>切面（Aspect）是一个新的名词，理解起来非常简单，火腿肠吃过吧？现在我们有一根很♂粗的火腿肠，用刀从中间切开，然后塞一粒玉米进去，现在它就变成玉米热狗肠了！</p><blockquote><p>真特喵的黑心，一粒玉米也敢叫玉米肠？</p></blockquote><p>好了，结束，这就是面向切面编程。<br>这还不够清楚吗？用刀切开火腿肠，不是切出了一个完美的切面？这就是 Aspect（切面）。<br>面向切面编程，就是向这个切开的面塞入一粒玉米。</p><p>我们可以从任何地方切开火腿肠，在任何切面塞入玉米，甚至辣椒等等。<br>面向切面编程可以理解成「嵌入式」代码，你写一段代码，然后嵌入到任何其他代码里面。</p><p>其实你早就用过 AOP 编程了，举个栗子就是 Laravel 的中间件，中间件会「拦截」请求，满足条件才进入下一步操作，如果不满足条件，那就 403 Forbidden，或者其他什么，总之，你通过中间件拦截请求，判断是否满足条件的这种行为就已经是面向切面编程了。</p><p>第二个栗子，如果你是前端开发，那么应该用过 Vue 框架，生命周期函数应该知道，就是那个什么 <code>beforeCreate</code>、<code>created</code> 之类的东西，如果你是 Unity 开发，那么也知道 <code>Monobehaviour</code> 也有生命周期函数，如 <code>Awake</code>、<code>Start</code> 等等，生命周期函数就是 AOP 的理念。</p><p>AOP 编程的核心理念就是「拦截请求」，通俗的说就是 “当 xxx 时，做 xxx”，这就是 AOP 编程的核心思想了，如下面一个更新用户积分的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class  UserController</span><br><span class="line">&#123;</span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        $params = request()-&gt;all();</span><br><span class="line">        $model = User::find($params[&#x27;id&#x27;]);</span><br><span class="line">        $model-&gt;update([&#x27;score&#x27; =&gt; $params[&#x27;score&#x27;]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该控制器提供了一个更新用户积分的方法，只要传来 <code>id</code> 和 <code>score</code> 分数参数就能找到对应的用户并且更新积分，但这样有不少问题，首先没有任何权限验证，岂不是人人都可以利用这个接口来改自己的分数？第二个，积分流水没有任何记录，万一以后跟用户产生纠纷怎么办？为了解决这个问题（先别想中间件的事情），我们需要进行如下两项改动：</p><p>1、对权限进行验证，只有管理员才能更新用户数据<br>2、对积分流水进行记录</p><p>首先假设有一个 <code>checkAdmin</code> 方法，用来判断是否是管理员，该方法只需要传入一个 <code>jwt-token</code> 参数，如果是管理员就返回 true，否则返回 false，还有一个方法 <code>saveLog</code> 用来保存积分流水：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class  UserController</span><br><span class="line">&#123;</span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        $params = request()-&gt;all();</span><br><span class="line"></span><br><span class="line">        if (!$this-&gt;checkAdmin($params[&#x27;token&#x27;])) &#123;</span><br><span class="line">            return response()-&gt;json([&#x27;message&#x27; =&gt; &#x27;没有修改权限&#x27;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $model = User::find($params[&#x27;id&#x27;]);</span><br><span class="line">        $model-&gt;update([&#x27;score&#x27; =&gt; $params[&#x27;score&#x27;]]);</span><br><span class="line"></span><br><span class="line">        saveLog($params[&#x27;id&#x27;], $model-&gt;score);</span><br><span class="line"></span><br><span class="line">        return response()-&gt;json([&#x27;message&#x27; =&gt; &#x27;修改成功&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function saveLog($userID, $score)</span><br><span class="line">    &#123;</span><br><span class="line">        ScoreLog::create([&#x27;user_id&#x27; =&gt; $userID, &#x27;score&#x27; =&gt; $score]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function checkAdmin($jwtToken)</span><br><span class="line">    &#123;</span><br><span class="line">        // ... 此处省略逻辑</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在看起来安全多了，接下来，如果有一个修改用户所属用户组的接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function changeGroup()</span><br><span class="line">&#123;</span><br><span class="line">    $params = request()-&gt;all();</span><br><span class="line"></span><br><span class="line">    if (!$this-&gt;checkAdmin($params[&#x27;token&#x27;])) &#123;</span><br><span class="line">        return response()-&gt;json([&#x27;message&#x27; =&gt; &#x27;没有修改权限&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...逻辑代码省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又得判断一次权限……很是繁琐，现在毫无疑问你会说出用中间件消灭这些重复的代码。没错，中间件处理权限验证是非常方便的，所有需要验证权限的请求先经过中间件，通过中间件过滤不符合条件的请求。</p><p>中间件就是一个嵌入式的代码，当请求进来的时候，为什么不会直接进入到控制器呢？因为 Laravel 框架对请求进行了拦截，只有通过你设定的中间件请求才会进入 Controller，否则就过滤掉，如果用生命周期来形容，就是 <code>before</code> 阶段就进行了处理，请求还没进入 Controller 就先被过滤掉了！</p><p>中间件拦截不符合要求的请求，这就是通过切面“嵌入”一段代码，只要封装一个拦截器就可以实现这个功能了，但实际上拦截请求有很多种方式，接下来以 Hyperf 为例，演示如何通过切面的方式执行设计好的代码，假设有一个控制器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#[AutoController(prefix: &#x27;/test&#x27;)]</span><br><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;test&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们要在这个控制器中嵌入其他代码，只需要声明一个切面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#[Aspect]</span><br><span class="line">class TestAspect extends AbstractAspect</span><br><span class="line">&#123;</span><br><span class="line">    public array $classes = [</span><br><span class="line">        &#x27;App\Controller\Front\TestController::test&#x27;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function process(ProceedingJoinPoint $proceedingJoinPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#x27;insert&#x27;);</span><br><span class="line">        return $proceedingJoinPoint-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>classes</code> 数组内加入想要插入的控制器方法，在 <code>process</code> 方法里面写入想要插入的代码，这段代码会在访问 <code>/test</code> 路由的时候一并被执行，注意，这里一定要返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $proceedingJoinPoint-&gt;process();</span><br></pre></td></tr></table></figure><p>这段代码是返回原控制器的处理结果，它跟 Laravel 的中间件几乎一模一样，如果你嵌入了多个切面，那么必须要全部返回，只要有一个没有返回程序就不会继续执行。</p><p>Hyperf 是以注解的方式开发的，我们还可以用注解的方式插入切面，声明一个注解，该注解还带有一个参数，参数在后面可以获取到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">namespace App\Annotation;</span><br><span class="line"></span><br><span class="line">use Hyperf\Di\Annotation\AbstractAnnotation;</span><br><span class="line"></span><br><span class="line">#[\Attribute] class TestAnnotation extends AbstractAnnotation</span><br><span class="line">&#123;</span><br><span class="line">    public string $val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改切面，把 classes 注释掉，改用注解的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class TestAspect extends AbstractAspect</span><br><span class="line">&#123;</span><br><span class="line">    public array $classes = [</span><br><span class="line">//        &#x27;App\Controller\Front\TestController::test&#x27;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public array $annotations = [</span><br><span class="line">        TestAnnotation::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function process(ProceedingJoinPoint $proceedingJoinPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        // 这里拿到注解传来的参数</span><br><span class="line">        $val = $proceedingJoinPoint-&gt;getAnnotationMetadata()-&gt;method[TestAnnotation::class];</span><br><span class="line">        var_dump($val-&gt;val);</span><br><span class="line"></span><br><span class="line">        return $proceedingJoinPoint-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着返回控制器，在想要嵌入的地方插入注解即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#[TestAnnotation(val: &#x27;kkk&#x27;)]</span><br><span class="line">public function test()</span><br><span class="line">&#123;</span><br><span class="line">    $res = &#x27;test-value&#x27;;</span><br><span class="line">    var_dump(&#x27;controller&#x27;);</span><br><span class="line"></span><br><span class="line">    return $res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了，在切面里也可以拿到 <code>val</code> 的值。</p><p>关于切面有几个注意的地方，<code>process</code> 方法只会执行一次，所以不用担心如果有多个切面会重复执行的问题，放心大胆的 <code>return</code> 即可，第二点，classes 和注解的方式只要写一个即可，我个人比较偏向于用注解的方法，第三，被切入的地方，可以通过 <code>ProceedingJoinPoint $proceedingJoinPoint</code> 变量获取其他数据，比如方法的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$params = $proceedingJoinPoint-&gt;getArguments();</span><br><span class="line">var_dump($params);</span><br></pre></td></tr></table></figure><p>那么 AOP 到底有什么用呢？它就是一种编程理念而已，正如最开始说的那样，这只是决定了你开发方式，AOP 可以帮你节省很多重复的劳动，节约时间就是节约生命~中间件就是最好的例子，除此之外，一些数据库的更新操作，记录日志操作也可以用面向切面编程实现，因为这些都是重复性的劳动，全部交给框架去办才是正解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;原本只打算用一年去做游戏，结果硬是拖了三年，现在总算做出来了，最后还是变成自己一个人在做，真是世事无常大肠包小肠，感兴趣的可以看看实际演示：</summary>
      
    
    
    
    <category term="日常学习" scheme="http://huotublog.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="开发技术" scheme="http://huotublog.com/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网站性能优化之静态资源加速</title>
    <link href="http://huotublog.com/2021/03/24/web-optimize-1/"/>
    <id>http://huotublog.com/2021/03/24/web-optimize-1/</id>
    <published>2021-03-24T14:04:35.000Z</published>
    <updated>2023-02-16T06:50:23.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片、css、js 等等不会在用户访问时改变的资源统称静态资源。</p><p>网站的打开速度除了跟代码有关，静态资源也会拖后腿，优化静态资源加载速度比起优化代码更能显著提高访问速度。</p><h2 id="WEB-服务器"><a href="#WEB-服务器" class="headerlink" title="WEB 服务器"></a>WEB 服务器</h2><p>Apache 和 Nginx 是常用的 WEB 服务器。</p><p>Nginx 处理静态资源的速度比 Apache 更快，所以选择 Nginx 可以提高静态资源访问速度。</p><p>Nginx 可以配置静态资源缓存，参考资料：<a href="https://www.w3cschool.cn/nginxsysc/nginxsysc-cache.html">Nginx 静态资源缓存设置</a></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>两台电脑的远近距离会影响到访问速度，例如在大陆地区访问国外的服务器就会延迟。</p><p>CDN 即内容分发网络，它会根据就近原则为你分配访问的节点。</p><p>比如在广州有一台服务器，上面保存着图片 A，在美国也有一台服务器，也保存着相同的图片 A，假设你的网站客户群体是全球范围，那么让国内用户访问广州的服务器上面的图片 A，美国用户访问美国服务器的图片 A，这样访问速度就是最快的。</p><p>更细分一点，在广州、上海、福州、香港……等等很多个地区都有一台服务器，这些服务器都保存着图片 A，这样广州的人访问广州的服务器，上海的人访问上海的服务器……这就是内容分发，就近原则访问资源。</p><p>我们个人是没办法做到那么多节点的，只有依靠服务商。</p><p>CDN 的原理就是负载均衡，根据 IP 来分配节点。</p><p>有很多免费的 CDN 服务商，推荐使用 jsdelivr + Github 来作为个人的 CDN。</p><p>Github：<a href="http://github.com/">http://github.com/</a></p><p>首先到 Github 创建一个账号，然后新建一个仓库，上传一张图片，比如图片名字为：avatar.png。</p><p>然后就可以直接用 jsdelivr 加载这张图片了。</p><p>格式：<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></p><p>版本号不是必须的，但是加上去可以防止用户本地缓存了资源导致没有更新，你可以随意编写自己的版本号，如：@1.0，不过如果你要加上版本号的话，需要用 git 命令打一个版本的标签。</p><p>示例：<a href="https://github.com/laravel/laravel">https://github.com/laravel/laravel</a></p><p>这是 Laravel 框架的仓库地址，仓库根目录下有一个 <code>webpack.mix.js</code> 文件。</p><p>那么可以访问下面的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/laravel/laravel/webpack.mix.js</span><br><span class="line">https://cdn.jsdelivr.net/gh/laravel/laravel@8.5.15/webpack.mix.js</span><br></pre></td></tr></table></figure><p>这样就 OK 了！</p><p>上面的 @8.5.15 是 Laravel 框架已经打好的版本标签。</p><p>在仓库的 tags 页面可以查看所有标签 ：<a href="https://github.com/laravel/laravel/tags">https://github.com/laravel/laravel/tags</a></p><p>默认不写标签就是引用最新版。</p><p>前端用的最多的 js 即 JQeury 了，仓库地址：<a href="https://github.com/jquery/jquery">https://github.com/jquery/jquery</a></p><p>可以试着拿这个仓库练习一下，首先是确定自己要用的 JQuery 版本：<a href="https://github.com/jquery/jquery/tags">https://github.com/jquery/jquery/tags</a></p><p>例如我要引用最新的 v3.6.0，然后发现 dist 里有不同类型的文件：<a href="https://github.com/jquery/jquery/tree/3.6.0/dist">https://github.com/jquery/jquery/tree/3.6.0/dist</a></p><p>带有 min 即压缩过的，一般我们都是引用这个。 </p><p>可以用下面的链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/jquery/jquery@3.6.0/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>CDN 不止可以用 js、css 等，还可以把图片也上传到自己的 github 仓库，用相同的办法引入即可。</p><blockquote><p>需要注意的是 jsdelivr 可能不太稳定，一旦它挂了你的网站资源就加载不出来了，这也是用 cdn 的风险</p></blockquote><h2 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h2><p>推荐两个免费图床：</p><p>SM.MS：<a href="http://sm.ms/">http://sm.ms/</a></p><p>牛图网：<a href="http://niupic.com/">http://niupic.com/</a></p><p>把图片上传到这两个网站，它们自带 CDN。</p><p>上传图片之前，可以到 TinyPng：<a href="https://tinypng.com/">https://tinypng.com/</a> 将图片压缩一下，体积减小之后访问的速度也就 更快了。</p><blockquote><p>需要注意的是压缩画质会受损，请根据实际需求选择是否压缩</p></blockquote><p>除此之外，图片的 jpg 格式比起 png 更小，因为 jpg 是压缩的格式，而 png 可以保留透明背景，如果不需要透明背景可以将图片压缩为 jpg 格式。</p>]]></content>
    
    
    <summary type="html">让静态资源起飞。</summary>
    
    
    
    <category term="前端技术" scheme="http://huotublog.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端" scheme="http://huotublog.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>FireRabbit-Engine 实战 从零搭建个人博客（四）完结篇</title>
    <link href="http://huotublog.com/2021/03/24/firerabbit-engin-4/"/>
    <id>http://huotublog.com/2021/03/24/firerabbit-engin-4/</id>
    <published>2021-03-24T13:55:27.000Z</published>
    <updated>2023-02-16T06:50:23.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个多月没更新了，大致总结一下。</p><p>博客已经做完而且上线了，框架也在边写博客业务的时候边更新，具体过程略。</p><p>静态资源使用 CDN 可以实现秒开，AB 测试的结果差强人意，原本一个单纯的框架测试 hello world 时 RPS 可以达到 200-300，而博客上线后，测试 5000 篇文章使用 Redis 缓存的情况下，RPS 只剩下 20-30，太丢 swoole 的脸了……</p><p>总的来说，通过自己写框架的过程还是学到蛮多知识的，尤其是在做自己的游戏的时候，思维方式发生了很大的改变。</p><p>平时写网站几乎用不到的「设计模式」，对写框架和游戏开发来说却是最根本的基础，现在我已经决定好好学一下各种设计模式了。不然以后做游戏开发的时候，代码肯定是乱糟糟的一团。</p>]]></content>
    
    
    <summary type="html">博客项目就此结束。</summary>
    
    
    
    <category term="项目实战" scheme="http://huotublog.com/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
  </entry>
  
  <entry>
    <title>FireRabbit-Engine 实战 从零搭建个人博客（三）登录与注册</title>
    <link href="http://huotublog.com/2021/02/19/firerabbit-engin-3/"/>
    <id>http://huotublog.com/2021/02/19/firerabbit-engin-3/</id>
    <published>2021-02-19T15:16:35.000Z</published>
    <updated>2023-02-16T06:50:23.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h2><p>在 app 下新建一个文件夹 view 用来保存视图模板，</p><p>再创建一个 storage，并继续在 storage 下创建 view_cache 用来保存编译后的视图文件。</p><p>然后修改 app.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constant::VIEW_CONFIG =&gt; [</span><br><span class="line">    &#x27;path&#x27; =&gt; __DIR__ . &#x27;/../view&#x27;,</span><br><span class="line">    &#x27;cache_path&#x27; =&gt; __DIR__ . &#x27;/../storage/view_cache&#x27;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>此处的文件路径即上述创建的文件夹。</p><h2 id="视图母版"><a href="#视图母版" class="headerlink" title="视图母版"></a>视图母版</h2><p>母版即所有页面共用的代码，比如每个页面都有顶部导航栏跟底部栏，</p><p>只是中间的部分不同，因此只要把内容单独提取出来，顶部和底部的结构可以复用。</p><p>在 view 下新建 layout 用来保存母版，同时创建 app.blade.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;火兔博客&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;#&quot;&gt;导航栏&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;#&quot;&gt;导航栏&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;#&quot;&gt;导航栏&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;#&quot;&gt;导航栏&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    </span><br><span class="line">    @yield(&#x27;content&#x27;)</span><br><span class="line"></span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p align=&quot;center&quot;&gt;火兔博客©2021&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>中间的 <code>yield(&#39;content&#39;)</code> 即抽取出来的内容页。</p><h2 id="登录-x2F-注册页面"><a href="#登录-x2F-注册页面" class="headerlink" title="登录&#x2F;注册页面"></a>登录&#x2F;注册页面</h2><p>添加登录注册的路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbit\Engine\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Http\\Controller\\&#x27;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#x27;/login&#x27;, &#x27;IndexController@login&#x27;)-&gt;name(&#x27;login&#x27;);</span><br><span class="line">    $router-&gt;get(&#x27;/register&#x27;, &#x27;IndexController@register&#x27;)-&gt;name(&#x27;register&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>接着修改控制器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/19</span><br><span class="line"> * Time：12:39</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller;</span><br><span class="line"></span><br><span class="line">use FireRabbit\Engine\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function login()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;show(&#x27;login&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function register()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;show(&#x27;register&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建对应的 blade 模板，login.blade.php：</p><p>……</p>]]></content>
    
    
    <summary type="html">实现登录与注册功能。</summary>
    
    
    
    <category term="项目实战" scheme="http://huotublog.com/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
  </entry>
  
  <entry>
    <title>FireRabbit-Engine 实战 从零搭建个人博客（二）创建博客所需的表</title>
    <link href="http://huotublog.com/2021/02/19/firerabbit-engin-2/"/>
    <id>http://huotublog.com/2021/02/19/firerabbit-engin-2/</id>
    <published>2021-02-19T10:30:46.000Z</published>
    <updated>2023-02-16T06:50:23.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Phinx"><a href="#Phinx" class="headerlink" title="Phinx"></a>Phinx</h2><p>官方网站：<a href="https://book.cakephp.org/phinx/0/en/index.html">Phinx - 官方文档</a></p><p>phinx 是一个数据库迁移插件，它可以帮你实现不使用 sql 文件来创建表。</p><p>框架还没集成数据库迁移系统，因此就需要自己手动安装了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>执行命令：<code>composer require robmorgan/phinx</code>。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>第一次安装还需要进行初始化：<code>vendor/bin/phinx init</code>，不然 phinx 不知道你的数据库账号密码就无法连接了。</p><p>初始化完成后，在项目根目录会出现一个配置文件 phinx.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">[</span><br><span class="line">    &#x27;paths&#x27; =&gt; [</span><br><span class="line">        &#x27;migrations&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/migrations&#x27;,</span><br><span class="line">        &#x27;seeds&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/seeds&#x27;</span><br><span class="line">    ],</span><br><span class="line">    &#x27;environments&#x27; =&gt; [</span><br><span class="line">        &#x27;default_migration_table&#x27; =&gt; &#x27;phinxlog&#x27;,</span><br><span class="line">        &#x27;default_environment&#x27; =&gt; &#x27;development&#x27;,</span><br><span class="line">        &#x27;production&#x27; =&gt; [</span><br><span class="line">            &#x27;adapter&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;production_db&#x27;,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;pass&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">        ],</span><br><span class="line">        &#x27;development&#x27; =&gt; [</span><br><span class="line">            &#x27;adapter&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;development_db&#x27;,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;pass&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">        ],</span><br><span class="line">        &#x27;testing&#x27; =&gt; [</span><br><span class="line">            &#x27;adapter&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;testing_db&#x27;,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;pass&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &#x27;version_order&#x27; =&gt; &#x27;creation&#x27;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>默认是 development 环境，在这里修改自己的数据库配置。</p><p>虽然 phinx 是数据库迁移，但它本身创建不了数据库，需要手动创建。</p><p>修改完成后，再创建一个名词叫做 blog 的数据库即可。</p><h3 id="迁移目录"><a href="#迁移目录" class="headerlink" title="迁移目录"></a>迁移目录</h3><p>根据配置文件最上方的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;paths&#x27; =&gt; [</span><br><span class="line">    &#x27;migrations&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/migrations&#x27;,</span><br><span class="line">    &#x27;seeds&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/seeds&#x27;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>创建对应的文件夹。</p><h3 id="创建表迁移"><a href="#创建表迁移" class="headerlink" title="创建表迁移"></a>创建表迁移</h3><p>命令：<code>vendor/bin/phinx create xxxx</code>。</p><p>xxx 是表名，使用大驼峰方式。</p><h3 id="执行迁移"><a href="#执行迁移" class="headerlink" title="执行迁移"></a>执行迁移</h3><p>命令：<code>vendor/bin/phinx migrate</code>。</p><h2 id="项目所需表"><a href="#项目所需表" class="headerlink" title="项目所需表"></a>项目所需表</h2><p>博客项目需要的表及对应的字段，表名默认为复数形式（即加一个 s）。</p><p>所有的表都有一个自增主键。</p><h3 id="用户表：users"><a href="#用户表：users" class="headerlink" title="用户表：users"></a>用户表：users</h3><ul><li>name：昵称</li><li>email：注册邮箱</li><li>password：密码，采用明文方式存储（本项目只是测试而已~~~好孩子不要学）</li><li>created：注册时间</li></ul><p>执行命令：<code>vendor/bin/phinx create User</code></p><p>在迁移目录 migrations 即可看到迁移文件，修改迁移文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class User extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https://book.cakephp.org/phinx/0/en/migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     */</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table = $this-&gt;table(&#x27;users&#x27;, [&#x27;signed&#x27; =&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#x27;name&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 16])</span><br><span class="line">            -&gt;addColumn(&#x27;email&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 64])</span><br><span class="line">            -&gt;addColumn(&#x27;password&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 64])</span><br><span class="line">            -&gt;addColumn(&#x27;created&#x27;, &#x27;timestamp&#x27;, [&#x27;default&#x27; =&gt; &#x27;CURRENT_TIMESTAMP&#x27;])</span><br><span class="line">            -&gt;addIndex([&#x27;email&#x27;, &#x27;password&#x27;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邮箱和密码设置为关联索引，这样用户在登录的时候可以直接从索引返回查询结果，查询速度非常快。</p><p>created 是时间戳，直接使用当前时间作为值。</p><h3 id="文章表：articles"><a href="#文章表：articles" class="headerlink" title="文章表：articles"></a>文章表：articles</h3><ul><li>user_id：作者 ID</li><li>title：标题</li><li>classify：分类</li><li>cover：封面图</li><li>view_count：浏览次数</li><li>created：发布日期</li></ul><p>执行命令：<code>vendor/bin/phinx create ArticleContent</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class Article extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https://book.cakephp.org/phinx/0/en/migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     */</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table = $this-&gt;table(&#x27;articles&#x27;, [&#x27;signed&#x27; =&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#x27;title&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 32])</span><br><span class="line">            -&gt;addColumn(&#x27;classify&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 32])</span><br><span class="line">            -&gt;addColumn(&#x27;cover&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 255])</span><br><span class="line">            -&gt;addColumn(&#x27;user_id&#x27;, &#x27;integer&#x27;, [&#x27;signed&#x27; =&gt; false])</span><br><span class="line">            -&gt;addColumn(&#x27;view_count&#x27;, &#x27;integer&#x27;, [&#x27;signed&#x27; =&gt; false])</span><br><span class="line">            -&gt;addColumn(&#x27;created&#x27;, &#x27;timestamp&#x27;, [&#x27;default&#x27; =&gt; &#x27;CURRENT_TIMESTAMP&#x27;])</span><br><span class="line">            -&gt;addIndex([&#x27;user_id&#x27;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文章内容表：article-contents"><a href="#文章内容表：article-contents" class="headerlink" title="文章内容表：article_contents"></a>文章内容表：article_contents</h3><ul><li>article_id：文章 ID</li><li>content：内容</li></ul><p>执行命令：<code>vendor/bin/phinx create ArticleContent</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class ArticleContent extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https://book.cakephp.org/phinx/0/en/migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     */</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table = $this-&gt;table(&#x27;article_contents&#x27;, [&#x27;signed&#x27; =&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#x27;article_id&#x27;, &#x27;integer&#x27;, [&#x27;signed&#x27; =&gt; false])</span><br><span class="line">            -&gt;addColumn(&#x27;content&#x27;, &#x27;text&#x27;)</span><br><span class="line">            -&gt;addIndex([&#x27;article_id&#x27;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="email-codes：邮件验证码"><a href="#email-codes：邮件验证码" class="headerlink" title="email_codes：邮件验证码"></a>email_codes：邮件验证码</h3><ul><li>email：邮箱</li><li>code：验证码</li><li>created：创建日期</li></ul><p>执行命令：<code>vendor/bin/phinx create EmailCode</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class EmailCode extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https://book.cakephp.org/phinx/0/en/migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     */</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table = $this-&gt;table(&#x27;email_codes&#x27;, [&#x27;signed&#x27; =&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#x27;email&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 64])</span><br><span class="line">            -&gt;addColumn(&#x27;code&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 8])</span><br><span class="line">            -&gt;addColumn(&#x27;created&#x27;, &#x27;timestamp&#x27;, [&#x27;default&#x27; =&gt; &#x27;CURRENT_TIMESTAMP&#x27;])</span><br><span class="line">            -&gt;addIndex([&#x27;email&#x27;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成表"><a href="#生成表" class="headerlink" title="生成表"></a>生成表</h2><p>执行命令：<code>vendor/bin/phinx migrate</code></p><p>然后打开数据库，可以看到：</p><p><img src="https://i.loli.net/2021/02/19/BR72FLbv4SoQ1tU.jpg" alt="QQ20210219-193050.jpg"></p><p>生成了这些表之后，就可以直接用框架集成的 ORM 调用了。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>ORM 默认使用的表名即复数形式，也可以指定一个表名，只需要修改 $table 变量即可。</p><p>创建一个用来保存模型文件的目录 app&#x2F;Http&#x2F;Model。</p><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/19</span><br><span class="line"> * Time：14:00</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded = [];</span><br><span class="line">    public $timestamps = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/19</span><br><span class="line"> * Time：19:43</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Article extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded = [];</span><br><span class="line">    public $timestamps = false;</span><br><span class="line"></span><br><span class="line">    public function content()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;hasOne(ArticleContent::class)-&gt;withDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArticleContent"><a href="#ArticleContent" class="headerlink" title="ArticleContent"></a>ArticleContent</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/19</span><br><span class="line"> * Time：19:43</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class ArticleContent extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded = [];</span><br><span class="line">    public $timestamps = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EmailCode"><a href="#EmailCode" class="headerlink" title="EmailCode"></a>EmailCode</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/19</span><br><span class="line"> * Time：19:44</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class EmailCode extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded = [];</span><br><span class="line">    public $timestamps = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>现在数据库和模型已经设定好了，接下来就可以直接开始业务处理了！</p>]]></content>
    
    
    <summary type="html">使用 phinx 创建博客所需表的数据库迁移。</summary>
    
    
    
    <category term="项目实战" scheme="http://huotublog.com/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
  </entry>
  
  <entry>
    <title>FireRabbit-Engine 实战 从零搭建个人博客（一）项目规划</title>
    <link href="http://huotublog.com/2021/02/19/firerabbit-engin-1/"/>
    <id>http://huotublog.com/2021/02/19/firerabbit-engin-1/</id>
    <published>2021-02-19T08:56:21.000Z</published>
    <updated>2023-02-16T06:50:23.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>居然非常不要脸的在标题写上自己引擎的名字了！</p><p>FireRabbit-Engine（火兔引擎）是基于 swoole 的 Laravel 劣质山寨版！</p><p>但是就性能而言，相比 Laravel 的提升非常巨大！</p><p>（这是 swoole 的功劳啊、喂！）</p><p>我要高呼框架的口号：有手就行，火兔引擎！</p><h2 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a>项目规划</h2><p>为了测试框架的性能和发现框架的不足之处，因此我打算用一个博客系统来测试。</p><p>这个博客系统会包含博客应该具备的基本功能，但绝不是手把手每一步都写得清清楚楚。</p><p>而且我的前端技术也不咋样，于是这个博客系统干脆就不需要 css 代码……</p><h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><p>博客包含以下几个简单模块：</p><ul><li>登录&#x2F;注册（注册需要验证邮箱，顺便测试异步任务）</li><li>文章的增删改查</li><li>数据库迁移</li><li>权限认证（中间件来实现）</li><li>缓存</li></ul><h2 id="制作周期"><a href="#制作周期" class="headerlink" title="制作周期"></a>制作周期</h2><p>这几个模块只要一晚上就能完成，但是昨天晚上睡眠不足，</p><p>现在头有点昏昏沉沉，如果今天晚上没做完，就留到明天继续。</p>]]></content>
    
    
    <summary type="html">使用 FireRabbit-Engine 框架从零开始搭建个人博客系统。</summary>
    
    
    
    <category term="项目实战" scheme="http://huotublog.com/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十九）封包，发到composer仓库！</title>
    <link href="http://huotublog.com/2021/02/19/my-swoole-framework-19/"/>
    <id>http://huotublog.com/2021/02/19/my-swoole-framework-19/</id>
    <published>2021-02-19T03:13:19.000Z</published>
    <updated>2023-02-16T06:50:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过年的假期也结束了，大家都陆续上班了。</p><p>2020 年我辞职回家一年也没有实现游戏梦，2021 年还有最后一次为梦想拼搏的机会。</p><p>再加上今年还有买房的梦想，所以今年开始没有太多任性的时间了，</p><p>如果家里有矿的话，我也想要归隐山林，专心钻研技术，无奈。</p><p>今年是毕业第五年的开始，五年……足以让一个人发生巨大的改变，</p><p>而我却连毕业时当架构师的梦想都没有实现，于是退而求其次才想要自己写一个框架。</p><p>即使是现在雏形完成了，但是技术方面还是没有很大的提升。</p><p>原因我很清楚，因为急于求成，因为想要证明自己给某个人看……</p><p>后悔的是大学没有好好学习，然悔之无用。</p><p>看过一部电视剧，里面有一句台词深深的触动了我：“当你觉得一切都晚了的时候，恰恰是最早的时机。”</p><p>在 30 岁之前幡然醒悟，也许是一种值得庆幸的事，如果再晚几年，恐怕翻身的机会只会愈加渺茫。</p><p>所以今年，2021 年，我要把握最后一年的机会，尽全力实现自己的游戏梦。</p><p>一边实现梦想，一边学好技术，打铁还需自身硬，只有自己变强了，才能掌控自己的生活。</p><h2 id="封装扩展包"><a href="#封装扩展包" class="headerlink" title="封装扩展包"></a>封装扩展包</h2><p>关于 composer 如何发布自己的扩展包，我在去年的时候写过一篇比较详细的文章了。</p><p>传送链接：<a href="https://huotublog.com/composer-package/">https://huotublog.com/composer-package/</a></p><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><p>因为用到了变量类型声明和返回值声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function test(int num) : int &#123;</span><br><span class="line">    return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 PHP7.4 新增的功能，所以要对 PHP 的版本进行限制。</p><p>修改框架下的 composer.json 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;firerabbit/engine&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;基于swoole的个人框架。&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;火烧兔子&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;huoshaotuzi@icloud.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;^7.4&quot;,</span><br><span class="line">    &quot;illuminate/database&quot;: &quot;^7.30&quot;,</span><br><span class="line">    &quot;xiaoler/blade&quot;: &quot;^5.4&quot;,</span><br><span class="line">    &quot;monolog/monolog&quot;: &quot;^2.2&quot;,</span><br><span class="line">    &quot;firebase/php-jwt&quot;: &quot;^5.2&quot;,</span><br><span class="line">    &quot;phpmailer/phpmailer&quot;: &quot;^6.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;FireRabbit\\Engine\\&quot;: &quot;src/&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;files&quot;: [</span><br><span class="line">      &quot;src/function.php&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了限制 PHP 版本之外，添加了作者和描述信息。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>将框架的目录进行一番修改，大致如下：</p><p><img src="https://i.loli.net/2021/02/19/zMH3gN2DjJWoaAU.jpg" alt="QQ20210219-134228.jpg"></p><h2 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h2><p>Github 上创建一个公开的仓库。</p><p>然后将框架的代码上传至仓库。</p><p><img src="https://i.loli.net/2021/02/19/JpyXLvh6kqHV9AK.jpg" alt="QQ20210219-115347.jpg"></p><h2 id="Packagist-仓库"><a href="#Packagist-仓库" class="headerlink" title="Packagist 仓库"></a>Packagist 仓库</h2><p>接着发布到 composer 仓库。</p><p>地址：<a href="https://packagist.org/">https://packagist.org/</a></p><p>点击上面的 Submit 按钮，然后把 Github 的仓库地址复制过来，然后提交，检测包名字，没问题就继续点下一步。</p><p>等待 composer 抓取 github 的信息，完成之后显示如下界面：</p><p><img src="https://i.loli.net/2021/02/19/j6VymxTihnfwUJ8.jpg" alt="QQ20210219-120712.jpg"></p><p>说明已经成功传到 composer 的仓库了，现在这个包可供所有人拉取，但包还未指定版本号，因此仍然无法安装成功。</p><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>任何包都需要有一个版本号，第一个版本可以计作：v1.0.0</p><p>版本号是个人自定义的，我定义的版本号规则如下：</p><ul><li>第一个 1，代表大版本，除非框架有翻天覆地的更新，否则这个版本不会改变，一旦大版本号改变就说明原来的代码已经无法保证正常使用了，不应该直接从旧版本升级到新版本，无法保证向下兼容</li><li>第二个 0，代表中版本号，此版本更新说明添加了一些新功能，但是兼容旧版，可以直接升级</li><li>第三个 0，代表小版本号，此版本更新说明一些微不足道的改变，例如优化代码或者结构，不影响正常使用，可以直接升级</li></ul><p>composer 包的版本是通过 git 标签实现的。</p><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0.0 -m &quot;初始版本&quot;</span><br><span class="line">git push origin v1.0.0</span><br></pre></td></tr></table></figure><p>发布一个标签之后，回到 Packagist 页面，看看右下角是否有更新，</p><p>如果没有更新，手动点击 Update 按钮，同步完成之后就可以看到右下角多出了一个 v1.0.0。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>现在就可以从远程仓库直接安装框架包了。</p><p>在任意位置创建一个空文件夹，然后进入文件夹，执行命令：<code>composer require firerabbit/engine</code></p><p>具体的使用方法可以参照框架的 readme 文件。</p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>框架部分大致就到这结束了，后续我还会不断更新框架功能。</p><p>接下来就要开始使用这个框架雏形来开发一个博客系统了。</p>]]></content>
    
    
    <summary type="html">最后一步，将框架封包发布到 composer 提供的仓库。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十八）异步任务</title>
    <link href="http://huotublog.com/2021/02/18/my-swoole-framework-18/"/>
    <id>http://huotublog.com/2021/02/18/my-swoole-framework-18/</id>
    <published>2021-02-18T11:42:11.000Z</published>
    <updated>2023-02-16T06:50:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>框架现在拥有发送邮件的能力了，但是发送邮件是非常耗时的一件事，</p><p>因此需要用异步任务来解决这个问题。</p><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>swoole 内置了异步任务处理，参照文档：<a href="https://wiki.swoole.com/#/start/start_task">https://wiki.swoole.com/#/start/start_task</a></p><p>一个简单的异步任务示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$http = new Swoole\Http\Server(&#x27;0.0.0.0&#x27;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;set([</span><br><span class="line">    &#x27;task_worker_num&#x27; =&gt; 1,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#x27;Request&#x27;, function ($request, $response) use ($http) &#123;</span><br><span class="line"></span><br><span class="line">    // 投递任务</span><br><span class="line">    $params = [&#x27;name&#x27; =&gt; &#x27;花花&#x27;];</span><br><span class="line">    $taskID = $http-&gt;task($params);</span><br><span class="line">    var_dump(&#x27;投递了一个任务，ID：&#x27; . $taskID . &#x27;，参数：&#x27; . json_encode($params, JSON_UNESCAPED_UNICODE));</span><br><span class="line"></span><br><span class="line">    $response-&gt;header(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span><br><span class="line">    $response-&gt;end(&#x27;&lt;h1&gt;Hello Swoole. #&#x27; . rand(1000, 9999) . &#x27;&lt;/h1&gt;&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//处理异步任务(此回调函数在task进程中执行)</span><br><span class="line">$http-&gt;on(&#x27;Task&#x27;, function ($serv, $task_id, $reactor_id, $data) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;收到任务，开始处理，任务ID：&#x27; . $task_id . &#x27;，参数：&#x27; . json_encode($data, JSON_UNESCAPED_UNICODE));</span><br><span class="line"></span><br><span class="line">    // 业务逻辑</span><br><span class="line">    $result = &#x27;那只猫的名字叫做&#x27; . $data[&#x27;name&#x27;];</span><br><span class="line"></span><br><span class="line">    //返回任务执行的结果</span><br><span class="line">    $serv-&gt;finish($result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//处理异步任务的结果(此回调函数在worker进程中执行)</span><br><span class="line">$http-&gt;on(&#x27;Finish&#x27;, function ($serv, $task_id, $data) &#123;</span><br><span class="line">    // 任务执行完成后的回调</span><br><span class="line">    var_dump(&#x27;【处理结果】任务ID：&#x27; . $task_id . &#x27;，返回结果：&#x27; . $data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>要开启任务，必须设置 <code>task_worker_num</code>，此参数是处理任务的进程数。</p><p>要投递一个任务，只要调用 server 的 task 方法即可，task 方法接收一个参数，执行完成后返回任务 ID。</p><p>投递的任务会在 task 事件中执行，要监听事件只需要调用 on 方法。</p><p>task 事件处理完成后的结果可以通知给 finish 事件，也可以不通知。</p><p>上述代码输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(59) &quot;投递了一个任务，ID：0，参数：&#123;&quot;name&quot;:&quot;花花&quot;&#125;&quot;</span><br><span class="line">string(71) &quot;收到任务，开始处理，任务ID：0，参数：&#123;&quot;name&quot;:&quot;花花&quot;&#125;&quot;</span><br><span class="line">string(78) &quot;【处理结果】任务ID：0，返回结果：那只猫的名字叫做花花&quot;</span><br></pre></td></tr></table></figure><p>如果多次执行，任务 ID 会从 0 开始不断加 1，第二个任务的 ID 为 1，第三个任务的 ID 为 2，以此类推。</p><p>如果关闭程序再重新启动，任务 ID 又会从 0 开始。</p><p>即使将 <code>task_worker_num</code> 改为 2 或者更大，ID 也是保持相同规则自增，因此可以判定 ID 是多个工作进程共享的，不会出现 ID 重复的情况。</p><h2 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h2><p>swoole 的异步任务必须接受一个数组作为参数，而不能直接将对象作为参数传给任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 错误的方法</span><br><span class="line">$server-&gt;task(new MyTask());</span><br><span class="line"></span><br><span class="line"># 正确的方法</span><br><span class="line">$server-&gt;task([&#x27;name&#x27; =&gt; &#x27;花花&#x27;]);</span><br></pre></td></tr></table></figure><p>只要想起之前路由是怎么设计的，任务系统就很简单了。</p><p>既然只能传递数组作为参数，那只要传一个任务名称，再实际调用的时候实例化就可以了。</p><h2 id="实现任务"><a href="#实现任务" class="headerlink" title="实现任务"></a>实现任务</h2><p>分发任务必须要在 <code>Swoole\Http\Server</code>，因此原来的代码就需要修改一遍了。</p><h3 id="传参：server"><a href="#传参：server" class="headerlink" title="传参：server"></a>传参：server</h3><p>要调用任务的地方，目前只有 controller，因此 server 必须传给 controller。</p><p>只要修改路由模块传递参数即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 处理路由</span><br><span class="line"> * @param Server $server</span><br><span class="line"> * @param $request</span><br><span class="line"> * @param $response</span><br><span class="line"> */</span><br><span class="line">public function handle(Server $server, $request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    $route = $this-&gt;findRoute($request);</span><br><span class="line"></span><br><span class="line">    if ($route == null) &#123;</span><br><span class="line">        (new NotFoundResponse)-&gt;response($request, $response, $route);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $route-&gt;createResponse($server, $request, $response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handle 多接收一个 server 参数，</p><p>然后再在实例化路由配置的时候把 server 传给路由，</p><p>路由实例化控制器的时候，再把 server 传给控制器就行了，详细的代码就不贴出来了。</p><p>控制器现在已经可以拿到 server 了，但这是 swoole 的方法，</p><h3 id="TaskInterface：标准任务接口"><a href="#TaskInterface：标准任务接口" class="headerlink" title="TaskInterface：标准任务接口"></a>TaskInterface：标准任务接口</h3><p>基于面向对象的思想，此处应该有封装。</p><p>在框架目录下新建 Task 目录，再创建 TaskInterface 接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：20:23</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Task;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface TaskInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 处理逻辑</span><br><span class="line">     * @param $params</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function handle($params);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理完成回调</span><br><span class="line">     * @param $params</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function finish($result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口就是一个统一标准的 Task 类，以后用户想要创建一个任务，就实现这个接口。</p><p>handle 方法即 swoole 监听的 task 事件中处理任务逻辑的地方；</p><p>finish 方法即 swoole 监听的 finish 事件处理完任务执行回调的地方。</p><h3 id="Task：分发任务"><a href="#Task：分发任务" class="headerlink" title="Task：分发任务"></a>Task：分发任务</h3><p>统一的标准任务类已经有了，但还需要一个任务处理类，在 Task 文件夹下创建 Task 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：20:29</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Task;</span><br><span class="line"></span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">class Task</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 分发一个任务</span><br><span class="line">     * @param Server $server</span><br><span class="line">     * @param TaskInterface $task</span><br><span class="line">     * @param array $data</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public static function dispatch(Server $server, string $task, array $data = []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;task&#x27; =&gt; $task,</span><br><span class="line">            &#x27;data&#x27; =&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        var_dump($task);</span><br><span class="line"></span><br><span class="line">        return $server-&gt;task($params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类只需要一个 dispatch 方法，接收任务类的名称以及附加参数。</p><p>然后再修改框架的 controller：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:16 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Controller;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Task\Task;</span><br><span class="line">use FireRabbitEngine\Module\Http\Kernel as HttpKernel;</span><br><span class="line"></span><br><span class="line">class Controller</span><br><span class="line">&#123;</span><br><span class="line">    protected $httpKernel;</span><br><span class="line"></span><br><span class="line">    public function __construct(HttpKernel $httpKernel)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;httpKernel = $httpKernel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分发任务</span><br><span class="line">     * @param $task</span><br><span class="line">     * @param $data</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public function dispatch($task, $data)</span><br><span class="line">    &#123;</span><br><span class="line">        $server = $this-&gt;httpKernel-&gt;getServer();</span><br><span class="line">        return Task::dispatch($server, $task, $data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showMessage($message)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;httpKernel-&gt;getResponse()-&gt;header(&quot;Content-Type&quot;, &quot;text/html; charset=utf-8&quot;);</span><br><span class="line">        $this-&gt;httpKernel-&gt;getResponse()-&gt;end($message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;httpKernel-&gt;getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;httpKernel-&gt;getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server 是通过 httpKernel 在路由时传参得到的，</p><p>如果没有 server 就无法调用 swoole 的 task 方法。</p><p>controller 也声明了一个 dispatch 方法供用户直接调用。</p><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>执行任务是在 HttpServer 处通过监听 task 和 finish 两个事件。</p><p>修改 HttpServer：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/15</span><br><span class="line"> * Time：16:26</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Auth\Auth;</span><br><span class="line">use FireRabbitEngine\Module\Cache\Cache;</span><br><span class="line">use FireRabbitEngine\Module\Constant;</span><br><span class="line">use FireRabbitEngine\Module\Database\Manager as DatabaseManager;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log as Logger;</span><br><span class="line">use FireRabbitEngine\Module\Mail\Mailer;</span><br><span class="line">use FireRabbitEngine\Module\Route\Router;</span><br><span class="line">use FireRabbitEngine\Module\Task\TaskInterface;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">class HttpServer</span><br><span class="line">&#123;</span><br><span class="line">    public $server;</span><br><span class="line">    public $router;</span><br><span class="line"></span><br><span class="line">    public function __construct($host, $port, $config = [])</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server = new Server($host, $port);</span><br><span class="line">        $this-&gt;server-&gt;set($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadRouter(Router $router)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;router = $router;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadMiddleware($middleware)</span><br><span class="line">    &#123;</span><br><span class="line">        \FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig($middleware);</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function bootstrap($config)</span><br><span class="line">    &#123;</span><br><span class="line">        // 视图</span><br><span class="line">        Blade::setConfig($config[Constant::VIEW_CONFIG]);</span><br><span class="line">        // 数据库ORM</span><br><span class="line">        DatabaseManager::setConfig($config[Constant::DATABASE_CONFIG]);</span><br><span class="line">        // 日志</span><br><span class="line">        Logger::setConfig($config[Constant::LOGGER_CONFIG]);</span><br><span class="line">        // 缓存</span><br><span class="line">        $cache = $config[Constant::CACHE_CONFIG];</span><br><span class="line">        Cache::setConfig($cache[&#x27;driver&#x27;], $cache[$cache[&#x27;driver&#x27;]]);</span><br><span class="line">        // JWT</span><br><span class="line">        Auth::setConfig($config[Constant::JWT_CONFIG]);</span><br><span class="line">        // 邮件</span><br><span class="line">        Mailer::setConfig($config[Constant::MAIL_CONFIG]);</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function request($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerError($response);</span><br><span class="line">        $this-&gt;router-&gt;handle($this-&gt;server, $request, $response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function registerError($response)</span><br><span class="line">    &#123;</span><br><span class="line">        register_shutdown_function(function () use ($response) &#123;</span><br><span class="line">            $error = error_get_last();</span><br><span class="line">            var_dump($error);</span><br><span class="line">            switch ($error[&#x27;type&#x27;] ?? null) &#123;</span><br><span class="line">                case E_ERROR :</span><br><span class="line">                case E_PARSE :</span><br><span class="line">                case E_CORE_ERROR :</span><br><span class="line">                case E_COMPILE_ERROR :</span><br><span class="line">                    $response-&gt;status(500);</span><br><span class="line">                    $response-&gt;end($error[&#x27;message&#x27;]);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function task()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#x27;task&#x27;, function ($server, $taskID, $reactorID, $data) &#123;</span><br><span class="line">            var_dump(&#x27;收到任务，开始处理，任务ID：&#x27; . $taskID . &#x27;，参数：&#x27; . json_encode($data));</span><br><span class="line"></span><br><span class="line">            if (isset($data[&#x27;task&#x27;]) &amp;&amp; class_exists($data[&#x27;task&#x27;])) &#123;</span><br><span class="line"></span><br><span class="line">                $task = new $data[&#x27;task&#x27;];</span><br><span class="line"></span><br><span class="line">                if ($task instanceof TaskInterface) &#123;</span><br><span class="line">                    $resultData = $task-&gt;handle($data[&#x27;data&#x27;]);</span><br><span class="line">                    $result = [</span><br><span class="line">                        &#x27;task&#x27; =&gt; $data[&#x27;task&#x27;],</span><br><span class="line">                        &#x27;result&#x27; =&gt; $resultData ?? null,</span><br><span class="line">                    ];</span><br><span class="line">                    $server-&gt;finish($result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function finish()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#x27;finish&#x27;, function ($server, $taskID, $data) &#123;</span><br><span class="line">            var_dump(&#x27;任务处理完了，任务ID：&#x27; . $taskID);</span><br><span class="line"></span><br><span class="line">            if (isset($data[&#x27;task&#x27;]) &amp;&amp; class_exists($data[&#x27;task&#x27;])) &#123;</span><br><span class="line"></span><br><span class="line">                $task = new $data[&#x27;task&#x27;];</span><br><span class="line"></span><br><span class="line">                if ($task instanceof TaskInterface) &#123;</span><br><span class="line">                    $task-&gt;finish($data[&#x27;result&#x27;]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function start()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#x27;request&#x27;, [$this, &#x27;request&#x27;]);</span><br><span class="line">        $this-&gt;server-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增了两个方法：task 和 finish，只要调用此方法即可实现监听事件。</p><h3 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h3><p>在启动程序 http_server.php 处新增监听事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Http\HttpServer;</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia/Shanghai&quot;);</span><br><span class="line">define(&#x27;ROOT_PATH&#x27;, __DIR__);</span><br><span class="line"></span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require &#x27;./firerabbit-engine/vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">$config = require &#x27;./app/config/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">$server = new HttpServer(&#x27;0.0.0.0&#x27;, 9527, [</span><br><span class="line">    &#x27;worker_num&#x27; =&gt; 4,</span><br><span class="line">    &#x27;task_worker_num&#x27; =&gt; 1,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$router = require &#x27;./app/route/web.php&#x27;;</span><br><span class="line">$middleware = require &#x27;./app/config/middleware.php&#x27;;</span><br><span class="line"></span><br><span class="line">$server-&gt;task();</span><br><span class="line">$server-&gt;finish();</span><br><span class="line"></span><br><span class="line">$server-&gt;bootstrap($config[&#x27;framework&#x27;])</span><br><span class="line">    -&gt;loadMiddleware($middleware)</span><br><span class="line">    -&gt;loadRouter($router)</span><br><span class="line">    -&gt;start();</span><br></pre></td></tr></table></figure><p>task 和 finish 必须在 start 之前，</p><p>而且 swoole 的参数必须加上 <code>task_worker_num</code>，该值是处理事件的进程数量。</p><blockquote><p>通俗的讲 task_worker_num 就是工具人的数量，工具人越多，堆积的任务处理速度越快，swoole 会轮询分发给工具人任务，工具人至少也要有 1 个，如果没有工具人谁来干活呢？</p></blockquote><p>由于我的博客系统只需要发送邮件这个简单的任务，并不会堆积很多，所以只需要 1 个进程用来处理任务就够了。</p><h2 id="项目任务"><a href="#项目任务" class="headerlink" title="项目任务"></a>项目任务</h2><p>前面已经完成了邮件系统，现在可以把发送邮件当做异步任务来执行了。</p><p>在博客项目新建存放任务类的文件夹 app&#x2F;Http&#x2F;Task，再创建一个用来发送邮件的任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：21:46</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Task;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Mail\Mailer;</span><br><span class="line">use FireRabbitEngine\Module\Task\TaskInterface;</span><br><span class="line"></span><br><span class="line">class MailTask implements TaskInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function handle($params)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#x27;调用handle处理任务&#x27;);</span><br><span class="line"></span><br><span class="line">        $mailer = new Mailer();</span><br><span class="line">        $mailer-&gt;subject(&#x27;测试异步任务发送邮件&#x27;)</span><br><span class="line">            -&gt;body(&#x27;这是邮件内容&#x27;)</span><br><span class="line">            -&gt;address($params[&#x27;email&#x27;])</span><br><span class="line">            -&gt;send();</span><br><span class="line"></span><br><span class="line">        return &#x27;发送成功&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function finish($result)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 controller 添加测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Task\MailTask;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;dispatch(MailTask::class, [&#x27;email&#x27; =&gt; &#x27;874811226@qq.com&#x27;]);</span><br><span class="line">        $this-&gt;showMessage(&#x27;ok&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string(17) &quot;请求URI：/test&quot;</span><br><span class="line">string(126) &quot;收到任务，开始处理，任务ID：0，参数：&#123;&quot;task&quot;:&quot;App\\Http\\Task\\MailTask&quot;,&quot;data&quot;:&#123;&quot;email&quot;:&quot;874811226@qq.com&quot;&#125;&#125;&quot;</span><br><span class="line">string(24) &quot;调用handle处理任务&quot;</span><br><span class="line">string(33) &quot;任务处理完了，任务ID：0&quot;</span><br><span class="line">string(12) &quot;发送成功&quot;</span><br></pre></td></tr></table></figure><p>并且邮箱也能正常收到测试邮件。</p><p>如此一来，框架的异步任务也算完成了。</p><h2 id="延迟任务"><a href="#延迟任务" class="headerlink" title="延迟任务"></a>延迟任务</h2><p>swoole 提供了毫秒定时器，可以用来延迟分发任务。</p><p>而定时器又分为 after（一次性）与 tick（重复）两种类型。</p><p>一次性定时器执行完就会销毁，而重复定时器则会间隔执行，直到手动销毁为止。</p><p>Swoole 官方文档：<a href="https://wiki.swoole.com/#/timer">swoole - 定时器</a></p><h3 id="一次性任务"><a href="#一次性任务" class="headerlink" title="一次性任务"></a>一次性任务</h3><p>调用 delay 即可实现延迟发布任务。</p><h3 id="重复性任务"><a href="#重复性任务" class="headerlink" title="重复性任务"></a>重复性任务</h3><p>例如每隔半小时就将缓存中的数据写入到数据库，或者是爬虫任务每小时执行一次，诸如此类。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>修改 Task 类，添加对应的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：20:29</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Task;</span><br><span class="line"></span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line">use Swoole\Timer;</span><br><span class="line"></span><br><span class="line">class Task</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 分发一个任务</span><br><span class="line">     * @param Server $server</span><br><span class="line">     * @param TaskInterface $task</span><br><span class="line">     * @param array $data</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public static function dispatch(Server $server, string $task, array $data = []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;task&#x27; =&gt; $task,</span><br><span class="line">            &#x27;data&#x27; =&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return $server-&gt;task($params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 延迟分发任务</span><br><span class="line">     * @param Server $server</span><br><span class="line">     * @param int $ms</span><br><span class="line">     * @param string $task</span><br><span class="line">     * @param array $data</span><br><span class="line">     */</span><br><span class="line">    public static function delay(Server $server, int $ms, string $task, array $data = []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;task&#x27; =&gt; $task,</span><br><span class="line">            &#x27;data&#x27; =&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return Timer::after($ms, function () use ($server, $params) &#123;</span><br><span class="line">            $server-&gt;task($params);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function tick(Server $server, int $ms, string $task, array $data = []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;task&#x27; =&gt; $task,</span><br><span class="line">            &#x27;data&#x27; =&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return Timer::tick(1000, function () use ($server, $params) &#123;</span><br><span class="line">            $server-&gt;task($params);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function clear(int $timerID): bool</span><br><span class="line">    &#123;</span><br><span class="line">        return Timer::clear($timerID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行延迟任务时，可以返回一个 int 类型的时钟 ID，调用 clear 可以将定时器清除。</p>]]></content>
    
    
    <summary type="html">为框架添加执行异步任务的能力。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十七）发送邮件</title>
    <link href="http://huotublog.com/2021/02/18/my-swoole-framework-17/"/>
    <id>http://huotublog.com/2021/02/18/my-swoole-framework-17/</id>
    <published>2021-02-18T08:09:29.000Z</published>
    <updated>2023-02-16T06:50:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人站长一般很难支付起短信的费用，因此邮件认证比较适合个人站长。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>发送邮件是完全免费的，只要搭建一台用于发送邮件的服务器即可，</p><p>但是搭建邮件服务器的成本太昂贵了，因此我选择使用第三方提供的邮箱服务。</p><p>市面上的各大邮箱基本都是免费注册的，比如 QQ 邮箱，163 邮箱等等。</p><p>每种邮箱配置大同小异，我选择网易的 163 邮箱作为演示。</p><p>网易邮箱：<a href="https://www.163.com/">https://www.163.com/</a></p><p>右上角即可免费注册，注册成功后，进入个人中心，点击上方的“设置”，然后可以看到 <strong>POP3&#x2F;SMTP&#x2F;IMAP</strong>。</p><p>下方有两个可以选择的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IMAP/SMTP服务已关闭 | 开启</span><br><span class="line">POP3/SMTP服务已关闭 | 开启</span><br></pre></td></tr></table></figure><p>选择 <code>POP3/SMTP</code> 右边的“开启”按钮，网易会要求你发送短信进行认证，认证后就可以开通了。</p><p>然后会获得一段用于验证的“神秘代码”，要把这个代码存下来，一旦关闭页面就无法再次查看了（但是可以重新创建）。</p><p>这样就申请好一个可以发送邮件的邮箱了。</p><h2 id="安装插件包"><a href="#安装插件包" class="headerlink" title="安装插件包"></a>安装插件包</h2><p>PHP 内置的方法也可以发送邮件，但是我选择使用一个比较成熟的插件包：<code>phpmailer/phpmailer</code>。</p><p>在框架目录下执行：<code>composer require phpmailer/phpmailer</code></p><p>即可完成安装。</p><h2 id="Mailer"><a href="#Mailer" class="headerlink" title="Mailer"></a>Mailer</h2><p>插件安装完成后，需要封装成方便调用的形式。</p><p>在框架目录新建一个 Mail 文件夹用来保存邮件发送相关代码，并且创建 Mailer 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：14:29</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Mail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use PHPMailer\PHPMailer\PHPMailer;</span><br><span class="line"></span><br><span class="line">class Mailer</span><br><span class="line">&#123;</span><br><span class="line">    protected static $mail;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 轮询计数器</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    protected static $sort = 0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 邮件节点</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected static $pool = [];</span><br><span class="line"></span><br><span class="line">    protected $subject, $body, $altBody, $reciverMail;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$config = $config;</span><br><span class="line">        self::$pool = $config[&#x27;pool&#x27;];</span><br><span class="line"></span><br><span class="line">        self::$mail = new PHPMailer();</span><br><span class="line">        self::$mail-&gt;isSMTP();</span><br><span class="line">        self::$mail-&gt;SMTPAuth = true;</span><br><span class="line">        self::$mail-&gt;SMTPDebug = $config[&#x27;debug&#x27;];</span><br><span class="line">        self::$mail-&gt;isHTML($config[&#x27;html&#x27;]);</span><br><span class="line">        self::$mail-&gt;SMTPSecure = $config[&#x27;secure&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function subject($title)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;subject = $title;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function body($html)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;body = $html;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function altBody($text)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;altBody = $text;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function address($mail)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;reciverMail = $mail;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function send()</span><br><span class="line">    &#123;</span><br><span class="line">        $node = self::$pool[self::$sort];</span><br><span class="line"></span><br><span class="line">        self::$sort++;</span><br><span class="line"></span><br><span class="line">        if (self::$sort &gt;= count(self::$pool)) &#123;</span><br><span class="line">            self::$sort = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 载入节点配置</span><br><span class="line">        self::$mail-&gt;Host = $node[&#x27;host&#x27;];</span><br><span class="line">        self::$mail-&gt;Port = $node[&#x27;port&#x27;];</span><br><span class="line">        self::$mail-&gt;Username = $node[&#x27;user&#x27;];</span><br><span class="line">        self::$mail-&gt;Password = $node[&#x27;password&#x27;];</span><br><span class="line">        self::$mail-&gt;setFrom($node[&#x27;user&#x27;], $node[&#x27;name&#x27;]);</span><br><span class="line">        self::$mail-&gt;addReplyTo($node[&#x27;user&#x27;], $node[&#x27;name&#x27;]);</span><br><span class="line"></span><br><span class="line">        // 生成邮件信息</span><br><span class="line">        self::$mail-&gt;addAddress($this-&gt;reciverMail);</span><br><span class="line">        self::$mail-&gt;Subject = $this-&gt;subject;</span><br><span class="line">        self::$mail-&gt;Body = $this-&gt;body;</span><br><span class="line">        self::$mail-&gt;AltBody = $this-&gt;altBody ?? &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">        self::$mail-&gt;send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mailer 类重新封装了插件包发送邮件的代码，外部调用起来方便多了。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>一个 163 邮箱大约每天只能发送 500-1500 封邮件，</p><p>一旦超过这个数，网易就会限制该账户继续发送邮件。</p><p>为了避免被限制导致业务无法正常执行，通常我们需要申请很多个邮箱（毕竟注册免费）。</p><p>然后类似负载均衡一样轮询多个邮箱，所以在 Mailer 类有一个用来控制轮询的变量 <code>$sort</code>，</p><p>并且在 <code>send</code> 方法动态获取节点配置。</p><p>因此需要配置足够多的邮箱以供邮件系统调用，编辑 app.php，添加邮件相关配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Constant::MAIL_CONFIG =&gt; [</span><br><span class="line">    &#x27;debug&#x27; =&gt; 1,</span><br><span class="line">    &#x27;html&#x27; =&gt; true,</span><br><span class="line">    &#x27;secure&#x27; =&gt; &#x27;ssl&#x27;,</span><br><span class="line">    &#x27;pool&#x27; =&gt; [</span><br><span class="line">        [</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;smtp.163.com&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; 465,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;huotu_001@163.com&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;火兔博客1号&#x27;,</span><br><span class="line">            &#x27;password&#x27; =&gt; &#x27;xxxx&#x27;,</span><br><span class="line">        ],[</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;smtp.163.com&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; 465,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;huotu_002@163.com&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;火兔博客2号&#x27;,</span><br><span class="line">            &#x27;password&#x27; =&gt; &#x27;xxxx&#x27;,</span><br><span class="line">        ],[</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;smtp.163.com&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; 465,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;huotu_003@163.com&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;火兔博客3号&#x27;,</span><br><span class="line">            &#x27;password&#x27; =&gt; &#x27;xxxx&#x27;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>通过增加 <code>pool</code> 内邮箱的数量，即可实现一天发送成千上万封邮件。</p><p>而且邮箱的配置完全是独立的，不仅可以在这里配置 163 邮箱，QQ 邮箱同样可以。</p><p>只要注册多个平台的多个邮箱，这个邮件系统的稳定性就越强，一般而言，个人博客配置 2-5 个邮箱就差不多了。</p><p>具体数量根据博客的功能决定，如果发送邮件的场景只有注册和找回密码，那配置 2 个就差不多了；</p><p>如果你想要在发布新文章的时候，同时发送一封邮件通知博客的订阅者，那就要多准备一些了（反正申请邮箱不要钱）。</p><h2 id="实战调用"><a href="#实战调用" class="headerlink" title="实战调用"></a>实战调用</h2><p>在需要发送邮件的场景，调用 Mailer 提供的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\Mail\Mailer;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $mail = new Mailer();</span><br><span class="line">        $mail-&gt;subject(&#x27;测测&#x27;)</span><br><span class="line">            -&gt;body(&#x27;bbb&#x27;)</span><br><span class="line">            -&gt;altBody(&#x27;xxxx&#x27;)</span><br><span class="line">            -&gt;address(&#x27;874811226@qq.com&#x27;)</span><br><span class="line">            -&gt;send();</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(&#x27;ok&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，邮件确实可以正常发送。</p><p>值得一提的是，这里的 <code>body</code> 方法可以接收 HTMl 代码，</p><p>因此可以结合 blade 模板发出十分美观的邮件。</p>]]></content>
    
    
    <summary type="html">邮件发送系统。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十六）JWT用户认证</title>
    <link href="http://huotublog.com/2021/02/18/my-swoole-framework-16/"/>
    <id>http://huotublog.com/2021/02/18/my-swoole-framework-16/</id>
    <published>2021-02-18T04:52:13.000Z</published>
    <updated>2023-02-16T06:50:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用户认证模块也是网页中非常重要的一个环节，</p><p>比如接口无法使用 session，因此只能传一个特殊的参数 “token”，</p><p>token 是一个加密的字符串，在服务端进行解密，如果没问题就代表认证成功。</p><p>由于自己写的加密系统不安全，所以直接使用比较成熟的加密系统——JWT。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>jwt 模块集成在框架里，因此要进入框架目录进行安装，而不是直接安装在博客系统里面。</p><p>执行命令：<code>composer requiire firebase/php-jwt</code>。</p><h2 id="Auth"><a href="#Auth" class="headerlink" title="Auth"></a>Auth</h2><p>上一个步骤已经安装了 jwt 插件包，用户只需要关注加密和解密，</p><p>对 jwt 具体是怎么实现的，则不需要了解。</p><p>因此我封装了一个 Auth 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：12:19</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Auth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Firebase\JWT\JWT;</span><br><span class="line"></span><br><span class="line">class Auth</span><br><span class="line">&#123;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$config = $config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function decode($token)</span><br><span class="line">    &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JWT::$leeway = self::$config[&#x27;leeway&#x27;];</span><br><span class="line">            $decoded = JWT::decode($token, self::$config[&#x27;key&#x27;], [self::$config[&#x27;alg&#x27;]]);</span><br><span class="line">            $data = (array)$decoded;</span><br><span class="line"></span><br><span class="line">            return $data[&#x27;data&#x27;] ?? null;</span><br><span class="line">        &#125; catch (\Exception $e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function encode($data, $expired)</span><br><span class="line">    &#123;</span><br><span class="line">        $currentTimestamp = time();</span><br><span class="line">        $key = self::$config[&#x27;key&#x27;];</span><br><span class="line"></span><br><span class="line">        $token = [</span><br><span class="line">            &#x27;iat&#x27; =&gt; $currentTimestamp,</span><br><span class="line">            &#x27;nbf&#x27; =&gt; $currentTimestamp,</span><br><span class="line">            &#x27;exp&#x27; =&gt; $currentTimestamp + $expired,</span><br><span class="line">            &#x27;data&#x27; =&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return JWT::encode($token, $key, self::$config[&#x27;alg&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户只需要调用 Auth 暴露的加密和解密方法即可。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>在 app.php 添加新的配置参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constant::JWT_CONFIG =&gt; [</span><br><span class="line">    &#x27;key&#x27; =&gt; &#x27;password&#x27;,</span><br><span class="line">    &#x27;alg&#x27; =&gt; &#x27;HS256&#x27;,</span><br><span class="line">    &#x27;leeway&#x27; =&gt; 60,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>其中 <code>key</code> 是加密字符串，<code>alg</code> 是加密方法，</p><p><code>leeway</code> 是时间偏差值，意思是说这个 token 在这个偏差的时间内都可以算作认证成功(防止服务器时钟偏差)。</p><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>在 test 方法添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Auth\Auth;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $token = Auth::encode([</span><br><span class="line">            &#x27;test&#x27; =&gt; 123,</span><br><span class="line">        ], 60);</span><br><span class="line"></span><br><span class="line">        var_dump($token, base64_decode($token));</span><br><span class="line"></span><br><span class="line">        $value = Auth::decode($token);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(json_encode($value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 <code>encode</code> 的参数是一个数组，即用户的信息，可以是用户的 ID，</p><p>但绝对不能是密码或者其他敏感信息，因为 jwt 最终生成的 token 使用的是 base64，可以轻松解密。</p><p>上述代码打印的结果为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string(17) &quot;请求URI：/test&quot;</span><br><span class="line">string(177) &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MTM2MjUwMTIsIm5iZiI6MTYxMzYyNTAxMiwiZXhwIjoxNjEzNjI1MDcyLCJkYXRhIjp7InRlc3QiOjEyM319.ygfIeSOkifgPqWyUyIb5rJFLnHlaYMvGTue0WEsTvP4&quot;</span><br><span class="line">string(131) &quot;&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;&#123;&quot;iat&quot;:1613625012,&quot;nbf&quot;:1613625012,&quot;exp&quot;:1613625072,&quot;data&quot;:&#123;&quot;test&quot;:123&#125;&#125;��y#����l�Ȇ���K�yZ`��N�XK��&quot;</span><br><span class="line">object(stdClass)#30 (1) &#123;</span><br><span class="line">  [&quot;test&quot;]=&gt;</span><br><span class="line">  int(123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，JWT 加密模块就完成了。</p>]]></content>
    
    
    <summary type="html">JSON Web Token（JWT）——为框架添加用于验证用户身份的 token。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十五）缓存模块</title>
    <link href="http://huotublog.com/2021/02/18/my-swoole-framework-15/"/>
    <id>http://huotublog.com/2021/02/18/my-swoole-framework-15/</id>
    <published>2021-02-18T03:30:22.000Z</published>
    <updated>2023-02-16T06:50:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>缓存可以大幅提高程序的性能以及减轻数据库压力。</p><p>今天就来设计框架的缓存模块。</p><p>缓存可以用很多种方法实现，例如：redis、数据库或者文件。</p><p>从性能来看，redis 是最优的，因此本框架将会使用 redis 作为缓存系统。</p><h2 id="驱动接口"><a href="#驱动接口" class="headerlink" title="驱动接口"></a>驱动接口</h2><p>虽然现在使用 redis 作为缓存驱动，但是未来可能会添加其他的。</p><p>因此将缓存驱动声明为一个接口，以后就不需要修改业务代码了。</p><p>在框架目录下新建一个 Cache 文件夹用来存放缓存相关的代码。</p><p>接着声明一个接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：10:54</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Cache;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">interface DriverInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 载入参数</span><br><span class="line">     * @param $config</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function load($config);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 含有过期时间的键值对</span><br><span class="line">     * @param string $key</span><br><span class="line">     * @param int $ttl</span><br><span class="line">     * @param Closure $initFun</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function remember(string $key, int $ttl, Closure $initFun): string;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 没有过期时间的键值对</span><br><span class="line">     * @param string $key</span><br><span class="line">     * @param Closure $initFun</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function rememberForever(string $key, Closure $initFun): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里暂且实现两个键值对缓存的方法，</p><p><code>remember</code> 记住一个键值对 ttl 秒；</p><p><code>rememberForever</code> 记住一个键值对，且不过期。</p><p>上述两个方法如果没有默认值，则从 <code>$initFun</code> 闭包函数中获取，同时将数据写入缓存。</p><p>除此之外，还有一个 <code>load</code> 方法用于获取缓存的配置信息。</p><h2 id="RedisDriver"><a href="#RedisDriver" class="headerlink" title="RedisDriver"></a>RedisDriver</h2><p>接着在 Cache 下新建一个 Driver 文件夹，用来保存对应的驱动。</p><p>创建 RedisDriver，让它实现 DriverInterface：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：10:53</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Cache\Driver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use FireRabbitEngine\Module\Cache\DriverInterface;</span><br><span class="line"></span><br><span class="line">class RedisDriver implements DriverInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $instance;</span><br><span class="line"></span><br><span class="line">    public function load($config)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;instance = new \Redis();</span><br><span class="line">        $this-&gt;instance-&gt;connect($config[&#x27;host&#x27;], $config[&#x27;port&#x27;]);</span><br><span class="line">        $this-&gt;instance-&gt;auth($config[&#x27;password&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function remember($key, int $ttl, Closure $initFun): string</span><br><span class="line">    &#123;</span><br><span class="line">        $value = $this-&gt;instance-&gt;get($key);</span><br><span class="line"></span><br><span class="line">        if ($value !== false) &#123;</span><br><span class="line">            var_dump(&#x27;从缓存获取&#x27;);</span><br><span class="line"></span><br><span class="line">            return $value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var_dump(&#x27;从闭包获取&#x27;);</span><br><span class="line"></span><br><span class="line">        $value = $initFun();</span><br><span class="line">        $this-&gt;instance-&gt;setEx($key, $ttl, $value);</span><br><span class="line"></span><br><span class="line">        return $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function rememberForever($key, Closure $initFun): string</span><br><span class="line">    &#123;</span><br><span class="line">        $value = $this-&gt;instance-&gt;get($key);</span><br><span class="line"></span><br><span class="line">        if ($value !== false) &#123;</span><br><span class="line">            return $value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $value = $initFun();</span><br><span class="line">        $this-&gt;instance-&gt;set($key, $value);</span><br><span class="line"></span><br><span class="line">        return $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis 驱动直接调用 PHP 的 redis 扩展提供的方法。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>现在有了缓存驱动，但是并不是直接在控制器或者其他地方实例化这个缓存驱动来调用。</p><p>而是创建一个通用的 Cache 类来让用户调用，</p><p>如果不这样做，项目的缓存系统就相当于写死了，以后如果要把 redis 换成数据库缓存就很麻烦。</p><p>因此我们提供一个 Cache 类，用户只要调用 Cache 暴露出来的方法即可。</p><p>在框架的 Cache 目录下新建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/18</span><br><span class="line"> * Time：10:53</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Cache;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Cache\Driver\RedisDriver;</span><br><span class="line"></span><br><span class="line">class Cache</span><br><span class="line">&#123;</span><br><span class="line">    protected static DriverInterface $driver;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($cache, $config)</span><br><span class="line">    &#123;</span><br><span class="line">        switch ($cache) &#123;</span><br><span class="line">            case &#x27;redis&#x27;:</span><br><span class="line">                self::redisDriver($config);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected static function redisDriver($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$driver = new RedisDriver();</span><br><span class="line">        self::$driver-&gt;load($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function driver(): DriverInterface</span><br><span class="line">    &#123;</span><br><span class="line">        return self::$driver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cache 类对外提供了 <code>driver</code> 方法用于获取缓存驱动，</p><p>用户调用框架的缓存系统时，只需要从 driver 方法获得缓存驱动的实例，</p><p>然后再调用 DriverInterface 声明的标准方法即可。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>缓存系统需要在启动程序的时候连接到 redis，</p><p>因此声明一个新的常量，然后在 app.php 添加框架配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Constant::CACHE_CONFIG =&gt; [</span><br><span class="line">    &#x27;driver&#x27; =&gt; &#x27;redis&#x27;,</span><br><span class="line">    &#x27;redis&#x27; =&gt; [</span><br><span class="line">        &#x27;host&#x27; =&gt; &#x27;redis&#x27;,</span><br><span class="line">        &#x27;port&#x27; =&gt; &#x27;6379&#x27;,</span><br><span class="line">        &#x27;password&#x27; =&gt; &#x27;123123&#x27;,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>接着，在封装好的启动程序 HttpServer 初始化时加入缓存系统的初始化代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public function bootstrap($config)</span><br><span class="line">&#123;</span><br><span class="line">    Blade::setConfig($config[Constant::VIEW_CONFIG]);</span><br><span class="line">    DatabaseManager::setConfig($config[Constant::DATABASE_CONFIG]);</span><br><span class="line">    Logger::setConfig($config[Constant::LOGGER_CONFIG]);</span><br><span class="line"></span><br><span class="line">    // 新增代码</span><br><span class="line">    $cache = $config[Constant::CACHE_CONFIG];</span><br><span class="line">    Cache::setConfig($cache[&#x27;driver&#x27;], $cache[$cache[&#x27;driver&#x27;]]);</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，缓存系统就算完成了。</p><h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><p>创建一个 test 路由，控制器的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Cache\Cache;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $value = Cache::driver()-&gt;remember(&#x27;test&#x27;, 5, function () &#123;</span><br><span class="line">            return &#x27;aaa&#x27;;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(json_encode($value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从缓存驱动中获取名称为 “test” 的键，如果不存在则执行闭包，</p><p>闭包里面是用户的业务逻辑，例如从数据库查询数据等等，最终将结果以字符串的形式返回，</p><p>缓存系统将闭包返回的值写入到缓存，最后再把该值返回。</p><p>通俗的讲，就是 <strong>从缓存获取该键的值，如果没有就执行闭包的函数进行初始化。</strong></p><p>测试结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@0a71c06b420b:/www/blog# php http_server.php </span><br><span class="line">string(17) &quot;请求URI：/test&quot;</span><br><span class="line">string(15) &quot;从闭包获取&quot;</span><br><span class="line">string(17) &quot;请求URI：/test&quot;</span><br><span class="line">string(15) &quot;从缓存获取&quot;</span><br><span class="line"></span><br><span class="line"># 间隔5秒后再访问</span><br><span class="line">string(17) &quot;请求URI：/test&quot;</span><br><span class="line">string(15) &quot;从闭包获取&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现，第一次因为缓存没有数据，因此执行了闭包的函数，</p><p>第二次缓存已经有数据了，所以直接返回缓存中的数据，证明了闭包成功将数据写入到缓存了。</p><p>然后 5 秒之后再访问，可以发现又调用了闭包，证明缓存在 5 秒的时候过期了。</p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>键值对只是 redis 的基本类型，后续还会加入更多的操作方法。</p>]]></content>
    
    
    <summary type="html">为框架添加缓存模块。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十四）启动程序优化</title>
    <link href="http://huotublog.com/2021/02/17/my-swoole-framework-14/"/>
    <id>http://huotublog.com/2021/02/17/my-swoole-framework-14/</id>
    <published>2021-02-17T10:42:19.000Z</published>
    <updated>2023-02-16T06:50:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几篇文章临时修改程序的启动文件，结果变成如下这般惨不忍睹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia/Shanghai&quot;);</span><br><span class="line"></span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require &#x27;./firerabbit-engine/vendor/autoload.php&#x27;;</span><br><span class="line">require_once &#x27;./app/route/web.php&#x27;;</span><br><span class="line">require_once &#x27;./app/config/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#x27;./app/config/middleware.php&#x27;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#x27;view&#x27;][&#x27;view_path&#x27;], $config[&#x27;view&#x27;][&#x27;view_cache_path&#x27;]);</span><br><span class="line">\FireRabbitEngine\Module\Database\Manager::setConfig($config[&#x27;database&#x27;][&#x27;mysql&#x27;]);</span><br><span class="line"></span><br><span class="line">// 新增行</span><br><span class="line">\FireRabbitEngine\Module\Logger\Log::setConfig($config[&#x27;logger&#x27;]);</span><br><span class="line"></span><br><span class="line">$http = new Swoole\Http\Server(&#x27;0.0.0.0&#x27;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#x27;request&#x27;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数的加载方式也需要优化一下，接下来就开始整改。</p><h2 id="参数文件统一"><a href="#参数文件统一" class="headerlink" title="参数文件统一"></a>参数文件统一</h2><p>除了路由配置和中间件映射关系配置，其他的都可以移动到 app.pho 统一管理。</p><p>比如数据库的配置、redis 的配置、模板文件的存放位置等，都属于项目的配置。</p><p>因此将原来几个单独的配置文件删掉，统一放到 app.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Constant;</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &#x27;framework&#x27; =&gt; [</span><br><span class="line">        Constant::DATABASE_CONFIG =&gt; [</span><br><span class="line">            &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;database&#x27; =&gt; &#x27;blog&#x27;,</span><br><span class="line">            &#x27;username&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;password&#x27; =&gt; &#x27;123123&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">            &#x27;collation&#x27; =&gt; &#x27;utf8_unicode_ci&#x27;,</span><br><span class="line">            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        ],</span><br><span class="line">        Constant::LOGGER_CONFIG =&gt; [</span><br><span class="line">            &#x27;path&#x27; =&gt; __DIR__ . &#x27;/../storage/logs/log.log&#x27;,</span><br><span class="line">            &#x27;level&#x27; =&gt; &#x27;info&#x27;,</span><br><span class="line">            &#x27;channel&#x27; =&gt; &#x27;channel-name&#x27;,</span><br><span class="line">        ],</span><br><span class="line">        Constant::VIEW_CONFIG =&gt; [</span><br><span class="line">            &#x27;path&#x27; =&gt; __DIR__ . &#x27;/../view&#x27;,</span><br><span class="line">            &#x27;cache_path&#x27; =&gt; __DIR__ . &#x27;/../storage/cache/view_cache&#x27;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个 Constant 类是框架配置的常量，定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/16</span><br><span class="line"> * Time：10:08</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module;</span><br><span class="line"></span><br><span class="line">class Constant</span><br><span class="line">&#123;</span><br><span class="line">    const DATABASE_CONFIG = &#x27;firerabbiit_database&#x27;;</span><br><span class="line">    const LOGGER_CONFIG = &#x27;firerabbit_logger&#x27;;</span><br><span class="line">    const VIEW_CONFIG = &#x27;firerabbit_view&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是统一配置的键名。</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>框架现在是直接使用 swoole 的函数来启动程序，</p><p>基于面向对象的思想，现在把 server 也封装为一个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/15</span><br><span class="line"> * Time：16:26</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Constant;</span><br><span class="line">use FireRabbitEngine\Module\Database\Manager as DatabaseManager;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log as Logger;</span><br><span class="line">use FireRabbitEngine\Module\Route\Router;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">class HttpServer</span><br><span class="line">&#123;</span><br><span class="line">    public $server;</span><br><span class="line">    public $router;</span><br><span class="line"></span><br><span class="line">    public function __construct($host, $port, $config = [])</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server = new Server($host, $port);</span><br><span class="line">        $this-&gt;server-&gt;set($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadRouter(Router $router)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;router = $router;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadMiddleware($middleware)</span><br><span class="line">    &#123;</span><br><span class="line">        \FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig($middleware);</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function bootstrap($config)</span><br><span class="line">    &#123;</span><br><span class="line">        Blade::setConfig($config[Constant::VIEW_CONFIG]);</span><br><span class="line">        DatabaseManager::setConfig($config[Constant::DATABASE_CONFIG]);</span><br><span class="line">        Logger::setConfig($config[Constant::LOGGER_CONFIG]);</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function request($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerError($response);</span><br><span class="line">        $this-&gt;router-&gt;handle($request, $response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function registerError($response)</span><br><span class="line">    &#123;</span><br><span class="line">        register_shutdown_function(function () use ($response) &#123;</span><br><span class="line">            $error = error_get_last();</span><br><span class="line">            var_dump($error);</span><br><span class="line">            switch ($error[&#x27;type&#x27;] ?? null) &#123;</span><br><span class="line">                case E_ERROR :</span><br><span class="line">                case E_PARSE :</span><br><span class="line">                case E_CORE_ERROR :</span><br><span class="line">                case E_COMPILE_ERROR :</span><br><span class="line">                    $response-&gt;status(500);</span><br><span class="line">                    $response-&gt;end($error[&#x27;message&#x27;]);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function start()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#x27;request&#x27;, [$this, &#x27;request&#x27;]);</span><br><span class="line">        $this-&gt;server-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改启动程序"><a href="#修改启动程序" class="headerlink" title="修改启动程序"></a>修改启动程序</h2><p>现在就可以用 server 类来启动程序了，修改 http_server.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Http\HttpServer;</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia/Shanghai&quot;);</span><br><span class="line">define(&#x27;ROOT_PATH&#x27;, __DIR__);</span><br><span class="line"></span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require &#x27;./firerabbit-engine/vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">$config = require &#x27;./app/config/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">$server = new HttpServer(&#x27;0.0.0.0&#x27;, 9527, [</span><br><span class="line">    &#x27;worker_num&#x27; =&gt; 4,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$router = require &#x27;./app/route/web.php&#x27;;</span><br><span class="line">$middleware = require &#x27;./app/config/middleware.php&#x27;;</span><br><span class="line"></span><br><span class="line">$server-&gt;bootstrap($config[&#x27;framework&#x27;])</span><br><span class="line">    -&gt;loadMiddleware($middleware)</span><br><span class="line">    -&gt;loadRouter($router)</span><br><span class="line">    -&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就实现了用类来控制启动程序，启动程序的代码也变得整洁了。</p>]]></content>
    
    
    <summary type="html">优化启动程序及加载配置部分的代码。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十三）框架性能小测</title>
    <link href="http://huotublog.com/2021/02/14/my-swoole-framework-13/"/>
    <id>http://huotublog.com/2021/02/14/my-swoole-framework-13/</id>
    <published>2021-02-14T12:42:02.000Z</published>
    <updated>2023-02-16T06:50:23.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从写完路由模块之后就各种偷懒了……</p><p>如果所有功能都要自己写的话，工作量实在太大了。</p><p>而且我对于 swoole 也没有花时间来学习，现在写的框架也只不过是简单的封装而已。</p><p>swoole 的优势很难体现出来，但是相比于用 Laravel 这种重型框架来说，</p><p>自己写的框架虽然是“山寨”版 Laravel，但是性能应该比 Laravel 强不少。</p><p>于是忍不住就想用 ab 工具来测一下了。</p><h2 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h2><p>如果是访问域名的话，其实是先经过 nginx，然后再通过反向代理转发给 swoole，</p><p>这种方法与直接访问 swoole 端口有区别，于是就分作两租测试。</p><p>Nginx 反向代理：<code>ab -c 100 -n 10000 http://firerabbit-engine.ht/</code></p><p>直接访问 Swoole 端口：<code>ab -c 100 -n 10000 http://127.0.0.1：9527/</code></p><p>两种情况分别测试三组数据，取平均值。</p><p>测试的路由配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Http\\Controller\\Home\\&#x27;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#x27;/&#x27;, &#x27;IndexController@index&#x27;)-&gt;middleware([&#x27;a&#x27;, &#x27;b&#x27;]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>路由加入了两个中间件，中间件处理过程也是比较消耗性能的地方。</p><p>然后是测试的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Model\User;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $user = User::find(1);</span><br><span class="line">        $html = Blade::view(&#x27;index&#x27;, [&#x27;name&#x27; =&gt; $user-&gt;name]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法通过 ORM 查询 users 表的数据，然后传给视图，最后输出视图页面。</p><p>这样可以模拟普通的业务逻辑，看看这个框架写的 WEB 程序到底能跑多少分吧！</p><h3 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h3><p>第一组数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx/1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   51.355 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    194.72 [#/sec] (mean)</span><br><span class="line">Time per request:       513.548 [ms] (mean)</span><br><span class="line">Time per request:       5.135 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          105.92 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.8      0      51</span><br><span class="line">Processing:    42  511  35.3    512     629</span><br><span class="line">Waiting:       30  506  35.2    508     629</span><br><span class="line">Total:         42  511  35.0    512     629</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    512</span><br><span class="line">  66%    523</span><br><span class="line">  75%    529</span><br><span class="line">  80%    533</span><br><span class="line">  90%    546</span><br><span class="line">  95%    557</span><br><span class="line">  98%    572</span><br><span class="line">  99%    581</span><br><span class="line"> 100%    629 (longest request)</span><br></pre></td></tr></table></figure><p>第二组数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx/1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   54.842 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    182.34 [#/sec] (mean)</span><br><span class="line">Time per request:       548.422 [ms] (mean)</span><br><span class="line">Time per request:       5.484 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          99.18 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.5      0      40</span><br><span class="line">Processing:    56  544  49.7    543    1046</span><br><span class="line">Waiting:       50  539  49.6    538    1043</span><br><span class="line">Total:         61  544  49.8    543    1050</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    543</span><br><span class="line">  66%    557</span><br><span class="line">  75%    567</span><br><span class="line">  80%    573</span><br><span class="line">  90%    588</span><br><span class="line">  95%    602</span><br><span class="line">  98%    619</span><br><span class="line">  99%    633</span><br><span class="line"> 100%   1050 (longest request)</span><br></pre></td></tr></table></figure><p>第三组数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx/1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   54.510 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    183.45 [#/sec] (mean)</span><br><span class="line">Time per request:       545.097 [ms] (mean)</span><br><span class="line">Time per request:       5.451 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          99.79 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   3.1      0     196</span><br><span class="line">Processing:    28  542 112.1    527    1561</span><br><span class="line">Waiting:        9  538 111.6    522    1557</span><br><span class="line">Total:         28  543 111.9    527    1561</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    527</span><br><span class="line">  66%    542</span><br><span class="line">  75%    554</span><br><span class="line">  80%    562</span><br><span class="line">  90%    589</span><br><span class="line">  95%    614</span><br><span class="line">  98%    745</span><br><span class="line">  99%   1471</span><br><span class="line"> 100%   1561 (longest request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="直接访问-swoole-程序"><a href="#直接访问-swoole-程序" class="headerlink" title="直接访问 swoole 程序"></a>直接访问 swoole 程序</h3><p>第一组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   41.408 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    241.50 [#/sec] (mean)</span><br><span class="line">Time per request:       414.077 [ms] (mean)</span><br><span class="line">Time per request:       4.141 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          132.54 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   1.4      0      15</span><br><span class="line">Processing:    41  412  34.8    410     580</span><br><span class="line">Waiting:       26  411  34.8    410     580</span><br><span class="line">Total:         41  412  34.4    410     591</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    410</span><br><span class="line">  66%    421</span><br><span class="line">  75%    428</span><br><span class="line">  80%    435</span><br><span class="line">  90%    454</span><br><span class="line">  95%    469</span><br><span class="line">  98%    489</span><br><span class="line">  99%    507</span><br><span class="line"> 100%    591 (longest request)</span><br></pre></td></tr></table></figure><p>第二组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   40.637 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    246.08 [#/sec] (mean)</span><br><span class="line">Time per request:       406.368 [ms] (mean)</span><br><span class="line">Time per request:       4.064 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          135.06 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   1.4      0      20</span><br><span class="line">Processing:    38  404  38.0    404     594</span><br><span class="line">Waiting:       19  404  38.0    403     594</span><br><span class="line">Total:         39  404  37.3    404     594</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    404</span><br><span class="line">  66%    415</span><br><span class="line">  75%    423</span><br><span class="line">  80%    428</span><br><span class="line">  90%    443</span><br><span class="line">  95%    461</span><br><span class="line">  98%    484</span><br><span class="line">  99%    497</span><br><span class="line"> 100%    594 (longest request)</span><br></pre></td></tr></table></figure><p>第三组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   41.103 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    243.29 [#/sec] (mean)</span><br><span class="line">Time per request:       411.031 [ms] (mean)</span><br><span class="line">Time per request:       4.110 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          133.52 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       5</span><br><span class="line">Processing:    39  408  49.5    402    1022</span><br><span class="line">Waiting:       38  407  49.4    402    1022</span><br><span class="line">Total:         43  408  49.5    402    1024</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    402</span><br><span class="line">  66%    413</span><br><span class="line">  75%    420</span><br><span class="line">  80%    426</span><br><span class="line">  90%    441</span><br><span class="line">  95%    463</span><br><span class="line">  98%    521</span><br><span class="line">  99%    628</span><br><span class="line"> 100%   1024 (longest request)</span><br></pre></td></tr></table></figure><h3 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h3><p>主要对比 <code>Requests per second</code> 参数，</p><p>RPS（也叫 QPS）即平均每秒完成的请求数，这个值越大代币能承受的并发量越高。</p><p>nginx 转发的三组分别为：194.72、182.34、182.45</p><p>直接访问 swoole 的三组分别为：241.50、246.08、243.29</p><p>取平均值即：nginx&#x3D;186.50，swoole&#x3D;243.62</p><p>也就是说，通过 nginx 反向代理会损失一部分的性能。</p><p>而且距离最开始想要实现在几十毫秒内返回也差了很多，即使是直接访问 swoole 最快的也需要 600ms。</p><p>而且通过 nginx 转发之后，QPS 只有不到 200，相比其他 swoole 框架，自己写的框架性能已经大幅下降了。</p><p>这中间应该是有一些非异步的请求，比如 MySQL 查询，只有完成查询后才会继续往下执行，导致程序阻塞了。</p><p>不过总体而言，使用了 swoole 自己写的框架性能比起普通的 php-fpm 框架要高得多，</p><p>如果再加上一些逻辑业务处理，QPS 应该也能维持在 100-200 之间，这样的结果还是比较满意的。</p><p>关于 swoole 的特性还是需要仔细学习一番，框架方面的代码也还有很大的优化空间。</p><p>如果后续不断更新的话，可支持的并发量应该也会不断变大吧！</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>为了提高性能，我把 PHP 升级到 7.4，同时 swoole 扩展也升级到 4.6.3，</p><p>然后重新测试了一遍。</p><h3 id="Nginx-反向代理-1"><a href="#Nginx-反向代理-1" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h3><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx/1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   55.727 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    179.45 [#/sec] (mean)</span><br><span class="line">Time per request:       557.265 [ms] (mean)</span><br><span class="line">Time per request:       5.573 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          97.61 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.6      0      26</span><br><span class="line">Processing:    37  555  58.0    550     938</span><br><span class="line">Waiting:       24  550  57.8    545     938</span><br><span class="line">Total:         37  555  57.8    550     938</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    550</span><br><span class="line">  66%    565</span><br><span class="line">  75%    576</span><br><span class="line">  80%    583</span><br><span class="line">  90%    604</span><br><span class="line">  95%    628</span><br><span class="line">  98%    676</span><br><span class="line">  99%    797</span><br><span class="line"> 100%    938 (longest request)</span><br></pre></td></tr></table></figure><h3 id="直接访问-swoole-程序-1"><a href="#直接访问-swoole-程序-1" class="headerlink" title="直接访问 swoole 程序"></a>直接访问 swoole 程序</h3><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   41.988 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    238.16 [#/sec] (mean)</span><br><span class="line">Time per request:       419.885 [ms] (mean)</span><br><span class="line">Time per request:       4.199 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          130.71 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       5</span><br><span class="line">Processing:    44  416  50.0    411    1090</span><br><span class="line">Waiting:       44  416  50.0    410    1090</span><br><span class="line">Total:         47  416  50.1    411    1092</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    411</span><br><span class="line">  66%    421</span><br><span class="line">  75%    428</span><br><span class="line">  80%    434</span><br><span class="line">  90%    448</span><br><span class="line">  95%    464</span><br><span class="line">  98%    520</span><br><span class="line">  99%    559</span><br><span class="line"> 100%   1092 (longest request)</span><br></pre></td></tr></table></figure><h3 id="对比结果-1"><a href="#对比结果-1" class="headerlink" title="对比结果"></a>对比结果</h3><p>升级了 PHP 和 swoole 扩展的版本后，</p><p>nginx&#x3D;179.45，swoole&#x3D;238.16</p><blockquote><p>原本为：nginx&#x3D;186.50，swoole&#x3D;243.62</p></blockquote><p>好像也没有肉眼可见的提升……</p><p>然后又尝试优化 composer 生成的自动加载：<code>composer dump-autoload -o</code></p><p>测试的结果也没有太大的变化。</p><p>看来，如果想进一步提升 QPS 的话，重点应该是解决阻塞的地方了。</p><h3 id="工作进程数"><a href="#工作进程数" class="headerlink" title="工作进程数"></a>工作进程数</h3><p>忽然想到提高工作进程数，按道理应该可以提高一定的性能，</p><p>编辑 http_server.php 为 swoole 的 http 设置参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$http-&gt;set([</span><br><span class="line">    &#x27;worker_num&#x27; =&gt; 8,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>我的电脑是 4 核 i5，把工作进程设置为核心数的两倍，然后继续测试 swoole 程序和 nginx 转发的结果。</p><p>nginx 转发的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx/1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   59.781 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    167.28 [#/sec] (mean)</span><br><span class="line">Time per request:       597.808 [ms] (mean)</span><br><span class="line">Time per request:       5.978 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          90.99 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.8      0      38</span><br><span class="line">Processing:    46  595  84.2    591    1436</span><br><span class="line">Waiting:       39  590  84.2    585    1435</span><br><span class="line">Total:         46  595  84.7    591    1445</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    591</span><br><span class="line">  66%    607</span><br><span class="line">  75%    618</span><br><span class="line">  80%    624</span><br><span class="line">  90%    647</span><br><span class="line">  95%    668</span><br><span class="line">  98%    697</span><br><span class="line">  99%    742</span><br><span class="line"> 100%   1445 (longest request)</span><br></pre></td></tr></table></figure><p>直接访问 swoole：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   39.114 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    255.66 [#/sec] (mean)</span><br><span class="line">Time per request:       391.139 [ms] (mean)</span><br><span class="line">Time per request:       3.911 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          140.32 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.4      0       6</span><br><span class="line">Processing:    61  387  77.4    380    1409</span><br><span class="line">Waiting:       61  387  77.4    380    1409</span><br><span class="line">Total:         67  388  77.6    381    1413</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    381</span><br><span class="line">  66%    395</span><br><span class="line">  75%    405</span><br><span class="line">  80%    413</span><br><span class="line">  90%    433</span><br><span class="line">  95%    452</span><br><span class="line">  98%    494</span><br><span class="line">  99%    543</span><br><span class="line"> 100%   1413 (longest request)</span><br></pre></td></tr></table></figure><p>nginx&#x3D;167.28，swoole&#x3D;255.66</p><blockquote><p>PHP 和 swoole 未升级前：nginx&#x3D;186.50，swoole&#x3D;243.62<br>PHP 和 swoole 升级后：nginx&#x3D;179.45，swoole&#x3D;238.16</p></blockquote><p>嗯？？？nginx 的反而下降了？swoole 的倒是有一定的提升。</p><p>也许是因为没有足够的业务，导致测试的结果准确性不高。</p><p>测试就到这里吧，博客系统也还没开始制作，框架也属于半成品，等到完成度比较高的时候再测测看。</p>]]></content>
    
    
    <summary type="html">用 ab 压测工具测测看性能如何。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十二）日志系统</title>
    <link href="http://huotublog.com/2021/02/14/my-swoole-framework-12/"/>
    <id>http://huotublog.com/2021/02/14/my-swoole-framework-12/</id>
    <published>2021-02-14T06:27:25.000Z</published>
    <updated>2023-02-16T06:50:23.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装日志系统"><a href="#安装日志系统" class="headerlink" title="安装日志系统"></a>安装日志系统</h2><p>日志习题属于框架的一部分，因此在框架目录下执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require monolog/monolog</span><br></pre></td></tr></table></figure><h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><p>在框架 module 下新建 Logger 文件夹用来保存日志相关功能代码，</p><p>在 Logger 创建 Log 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/14</span><br><span class="line"> * Time：13:38</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Monolog\Handler\StreamHandler;</span><br><span class="line">use Monolog\Logger;</span><br><span class="line">use Monolog\Formatter\JsonFormatter;</span><br><span class="line"></span><br><span class="line">class Log</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 日志配置</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日志对象实例</span><br><span class="line">     * @var Logger</span><br><span class="line">     */</span><br><span class="line">    protected static $instance = null;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$config = $config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getLogger()</span><br><span class="line">    &#123;</span><br><span class="line">        if (self::$instance == null) &#123;</span><br><span class="line">            self::$instance = new Logger(self::$config[&#x27;channel&#x27;]);</span><br><span class="line"></span><br><span class="line">            if (!file_exists(self::$config[&#x27;path&#x27;])) &#123;</span><br><span class="line">                $file = fopen(self::$config[&#x27;path&#x27;], &#x27;w&#x27;);</span><br><span class="line">                fwrite($file, &#x27;&#x27;);</span><br><span class="line">                fclose($file);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $streamHandler = new StreamHandler(self::$config[&#x27;path&#x27;], self::$config[&#x27;level&#x27;]);</span><br><span class="line">//            $streamHandler-&gt;setFormatter(new JsonFormatter());</span><br><span class="line"></span><br><span class="line">            self::$instance-&gt;pushHandler($streamHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>setConfig</code> 加载配置参数，<code>getLogger</code> 判断是否存在日志文件，如果没有则创建，同时返回插件包的 Logger。</p><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>打开 app&#x2F;config&#x2F;app.php，添加日志配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config = [</span><br><span class="line"></span><br><span class="line">    &#x27;view&#x27; =&gt; [</span><br><span class="line">        &#x27;view_path&#x27; =&gt; __DIR__ . &#x27;/../view&#x27;,</span><br><span class="line">        &#x27;view_cache_path&#x27; =&gt; __DIR__ . &#x27;/../storage/cache/view_cache&#x27;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &#x27;logger&#x27; =&gt; [</span><br><span class="line">        &#x27;path&#x27; =&gt; __DIR__ . &#x27;/../storage/logs/log.log&#x27;,</span><br><span class="line">        &#x27;level&#x27; =&gt; \Monolog\Logger::INFO,</span><br><span class="line">        &#x27;channel&#x27; =&gt; &#x27;channel-name&#x27;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &#x27;database&#x27; =&gt; [</span><br><span class="line">        &#x27;mysql&#x27; =&gt; [</span><br><span class="line">            &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;database&#x27; =&gt; &#x27;blog&#x27;,</span><br><span class="line">            &#x27;username&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;password&#x27; =&gt; &#x27;123123&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">            &#x27;collation&#x27; =&gt; &#x27;utf8_unicode_ci&#x27;,</span><br><span class="line">            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">return $config;</span><br></pre></td></tr></table></figure><p>这里的 view 也被我修改了下，这样看起来更整齐。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>编辑 http_server.php 加载日志配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia/Shanghai&quot;);</span><br><span class="line"></span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require &#x27;./firerabbit-engine/vendor/autoload.php&#x27;;</span><br><span class="line">require_once &#x27;./app/route/web.php&#x27;;</span><br><span class="line">require_once &#x27;./app/config/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#x27;./app/config/middleware.php&#x27;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#x27;view&#x27;][&#x27;view_path&#x27;], $config[&#x27;view&#x27;][&#x27;view_cache_path&#x27;]);</span><br><span class="line">\FireRabbitEngine\Module\Database\Manager::setConfig($config[&#x27;database&#x27;][&#x27;mysql&#x27;]);</span><br><span class="line"></span><br><span class="line">// 新增行</span><br><span class="line">\FireRabbitEngine\Module\Logger\Log::setConfig($config[&#x27;logger&#x27;]);</span><br><span class="line"></span><br><span class="line">$http = new Swoole\Http\Server(&#x27;0.0.0.0&#x27;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#x27;request&#x27;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调用日志"><a href="#调用日志" class="headerlink" title="调用日志"></a>调用日志</h2><p>在 IndexController 测试日志是否能正常写入，添加测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Model\User;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $user = User::find(1);</span><br><span class="line">        $html = Blade::view(&#x27;index&#x27;, [&#x27;name&#x27; =&gt; $user-&gt;name]);</span><br><span class="line"></span><br><span class="line">        Log::getLogger()-&gt;error(&#x27;日志&#x27;);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问首页，可以看到配置日志路径的文件夹下多了一个 log.log：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2021-02-14T14:26:29.828157+08:00] channel-name.ERROR: 日志 [] []</span><br></pre></td></tr></table></figure><p>这样日志系统也完成了。</p>]]></content>
    
    
    <summary type="html">引入日志系统。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十一）数据库模型</title>
    <link href="http://huotublog.com/2021/02/14/my-swoole-framework-11/"/>
    <id>http://huotublog.com/2021/02/14/my-swoole-framework-11/</id>
    <published>2021-02-14T04:41:11.000Z</published>
    <updated>2023-02-16T06:50:23.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据库操作类自己写不安全，而且也有比较成熟的插件包了，</p><p>因此我打算直接引入 Laravel 相同的 ORM。</p><h2 id="插件包安装"><a href="#插件包安装" class="headerlink" title="插件包安装"></a>插件包安装</h2><p>数据库操作属于框架层面的，因此在框架的目录下执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require illuminate/database</span><br></pre></td></tr></table></figure><p>框架目录下也会自动创建一个 composer.json 文件，同时安装完成后会生成 vendor 文件夹。</p><p>在框架目录添加 .gitignore 忽略上传 vendor 文件夹。</p><h2 id="Blade-包错误修正"><a href="#Blade-包错误修正" class="headerlink" title="Blade 包错误修正"></a>Blade 包错误修正</h2><p>在前面完成 blade 模板时，blade 模板的包是在 app 目录下的，</p><p>这样就不是在框架里了，因此回到博客目录用 <code>composer remove xiaoler/blade</code> 命令移除 blade 包。</p><p>然后再进入框架目录重新安装 blade 即可，这样 blade 模块就属于框架内部了。</p><p>框架现在还不是一个 composer 包，因此框架的自动加载文件需要手动添加，</p><p>编辑 swoole 启动文件，http_server.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">// 新增行</span><br><span class="line">require &#x27;./firerabbit-engine/vendor/autoload.php&#x27;;</span><br></pre></td></tr></table></figure><p>在引入自动加载文件的下一行添加框架的自动加载，这样就完成了。</p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>编辑 app&#x2F;config&#x2F;app.php，添加数据库配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config = [</span><br><span class="line">    &#x27;view_path&#x27; =&gt; __DIR__ . &#x27;/../view&#x27;,</span><br><span class="line">    &#x27;view_cache_path&#x27; =&gt; __DIR__ . &#x27;/../storage/cache/view_cache&#x27;,</span><br><span class="line"></span><br><span class="line">    &#x27;database&#x27; =&gt; [</span><br><span class="line">        &#x27;mysql&#x27; =&gt; [</span><br><span class="line">            &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;127.0.0.1&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;database&#x27; =&gt; &#x27;blog&#x27;,</span><br><span class="line">            &#x27;username&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;password&#x27; =&gt; &#x27;123456&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">            &#x27;collation&#x27; =&gt; &#x27;utf8_unicode_ci&#x27;,</span><br><span class="line">            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">return $config;</span><br></pre></td></tr></table></figure><h2 id="ORM-模块加载"><a href="#ORM-模块加载" class="headerlink" title="ORM 模块加载"></a>ORM 模块加载</h2><p>在框架 module 新建文件夹 Database 用来存储数据库相关功能模块代码，</p><p>在 Database 文件夹下新建 Manager.php 用于加载数据库配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/14</span><br><span class="line"> * Time：13:02</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Database;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Manager</span><br><span class="line">&#123;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        $db = new \Illuminate\Database\Capsule\Manager();</span><br><span class="line">        $db-&gt;addConnection($config);</span><br><span class="line">        $db-&gt;setAsGlobal();</span><br><span class="line">        $db-&gt;bootEloquent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        return self::$config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setConfig</code> 方法加载一个数组参数的配置。</p><p>编辑 http_server.php 加入一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require &#x27;./firerabbit-engine/vendor/autoload.php&#x27;;</span><br><span class="line">require_once &#x27;./app/route/web.php&#x27;;</span><br><span class="line">require_once &#x27;./app/config/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#x27;./app/config/middleware.php&#x27;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#x27;view_path&#x27;], $config[&#x27;view_cache_path&#x27;]);</span><br><span class="line"></span><br><span class="line">// 新增行</span><br><span class="line">\FireRabbitEngine\Module\Database\Manager::setConfig($config[&#x27;database&#x27;][&#x27;mysql&#x27;]);</span><br><span class="line"></span><br><span class="line">$http = new Swoole\Http\Server(&#x27;0.0.0.0&#x27;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#x27;request&#x27;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 on 之前加载数据库配置。</p><blockquote><p>现在这个启动文件已经不堪入目了，等以后再优化</p></blockquote><h2 id="创建-Model"><a href="#创建-Model" class="headerlink" title="创建 Model"></a>创建 Model</h2><p>在 app&#x2F;Http 下新建 Model 文件夹用来保存模型文件。</p><p>在 Model 新建第一个模型文件 User：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/14</span><br><span class="line"> * Time：13:05</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded = [];</span><br><span class="line">    public $timestamps = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要让它继承 <code>Illuminate\Database\Eloquent\Model</code> 即可。</p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>打开数据库，在 users 表加入一行数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name：花花 - 001</span><br><span class="line">password：123123</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>打开 IndexController，修改  index 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/9/21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Model\User;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $user = User::find(1);</span><br><span class="line">        $html = Blade::view(&#x27;index&#x27;, [&#x27;name&#x27; =&gt; $user-&gt;name]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来的代码是直接传入 name 字符串，现在改成从数据库查询数据然后传给模板。</p><p>然后测试，发现页面输出了名字：花花 - 001</p><p>如此一来，ORM 模块也完成了。</p>]]></content>
    
    
    <summary type="html">引入数据库处理包。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（十）数据库迁移</title>
    <link href="http://huotublog.com/2021/02/14/my-swoole-framework-10/"/>
    <id>http://huotublog.com/2021/02/14/my-swoole-framework-10/</id>
    <published>2021-02-13T16:34:09.000Z</published>
    <updated>2023-02-16T06:50:23.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常情况下我们要创建 MySQL 数据库的表需要手动创建 SQL 语句。</p><p>然而这样一方面是很不方便，另一方面也不安全，如果修改表结构的时候不小心改错了，就会造成无法挽回的后果，而且最关键的是还不知道是谁干的！</p><p>之前上班的时候同事就遇到这种情况，有一个同事不小心删了另一个同事要用的表，结果不言而喻……</p><h2 id="Phinx"><a href="#Phinx" class="headerlink" title="Phinx"></a>Phinx</h2><p>官方网站：<a href="https://book.cakephp.org/phinx/0/en/install.html">https://book.cakephp.org/phinx/0/en/install.html</a></p><p>Phinx 是一个数据库迁移插件，使用它可以通过 PHP 代码来创建表或者修改表结构。</p><p>如此一来就不需要手动使用 SQL 语句去修改数据库了。</p><h2 id="安装-Phinx"><a href="#安装-Phinx" class="headerlink" title="安装 Phinx"></a>安装 Phinx</h2><p>使用命令：<code>require robmorgan/phinx</code></p><p>完成安装后，再执行 <code>vendor/bin/phinx init</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/www/blog# vendor/bin/phinx init</span><br><span class="line">Phinx by CakePHP - https://phinx.org.</span><br><span class="line"></span><br><span class="line">created /www/blog/phinx.php</span><br></pre></td></tr></table></figure><p>可以发现它在项目根目录自动创建了一个文件。</p><h2 id="配置-Phinx"><a href="#配置-Phinx" class="headerlink" title="配置 Phinx"></a>配置 Phinx</h2><p>打开上一步得到的 phinx.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">[</span><br><span class="line">    &#x27;paths&#x27; =&gt; [</span><br><span class="line">        &#x27;migrations&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/migrations&#x27;,</span><br><span class="line">        &#x27;seeds&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/seeds&#x27;</span><br><span class="line">    ],</span><br><span class="line">    &#x27;environments&#x27; =&gt; [</span><br><span class="line">        &#x27;default_migration_table&#x27; =&gt; &#x27;phinxlog&#x27;,</span><br><span class="line">        &#x27;default_environment&#x27; =&gt; &#x27;development&#x27;,</span><br><span class="line">        &#x27;production&#x27; =&gt; [</span><br><span class="line">            &#x27;adapter&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;production_db&#x27;,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;pass&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">        ],</span><br><span class="line">        &#x27;development&#x27; =&gt; [</span><br><span class="line">            &#x27;adapter&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;development_db&#x27;,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;pass&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">        ],</span><br><span class="line">        &#x27;testing&#x27; =&gt; [</span><br><span class="line">            &#x27;adapter&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">            &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;testing_db&#x27;,</span><br><span class="line">            &#x27;user&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="line">            &#x27;pass&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span><br><span class="line">            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &#x27;version_order&#x27; =&gt; &#x27;creation&#x27;</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个就是数据库的配置表，在这里填上自己的数据库账户和密码。</p><p>这里有不同的开发环境配置：production（线上环境）、development（开发环境）、testing（测试环境）。</p><p>我们暂且只要配置：development 即可。</p><p>paths 字段是数据库迁移文件的存放位置，默认是在项目根目录下的 db 文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;paths&#x27; =&gt; [</span><br><span class="line">    &#x27;migrations&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/migrations&#x27;,</span><br><span class="line">    &#x27;seeds&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/db/seeds&#x27;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>数据库迁移文件属于项目的一部分，因此我把它修改成了在 app 目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;paths&#x27; =&gt; [</span><br><span class="line">    &#x27;migrations&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/app/database/migrations&#x27;,</span><br><span class="line">    &#x27;seeds&#x27; =&gt; &#x27;%%PHINX_CONFIG_DIR%%/app/database/seeds&#x27;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>然后创建对应的文件夹即可。</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>配置好之后就可以使用命令来创建表了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor/bin/phinx create User</span><br></pre></td></tr></table></figure><p>上述命令生成了 User 表的数据库迁移文件，</p><p>可以发现在 app&#x2F;database&#x2F;migrations 目录下多出了一个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class User extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https://book.cakephp.org/phinx/0/en/migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     */</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 change 方法里添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function change()</span><br><span class="line">&#123;</span><br><span class="line">    // create the table</span><br><span class="line">    $table = $this-&gt;table(&#x27;users&#x27;);</span><br><span class="line">    $table-&gt;addColumn(&#x27;name&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 32])</span><br><span class="line">        -&gt;addColumn(&#x27;password&#x27;, &#x27;string&#x27;, [&#x27;limit&#x27; =&gt; 64])</span><br><span class="line">        -&gt;addColumn(&#x27;created&#x27;, &#x27;timestamp&#x27;, [&#x27;default&#x27; =&gt; &#x27;CURRENT_TIMESTAMP&#x27;])</span><br><span class="line">        -&gt;create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码创建了一张 users 表，包括名称、密码和注册日期。</p><p>然后打开 MySQL 数据库，创建一个名字叫做 blog 的数据库。</p><blockquote><p>注意！这里的数据库名字要与 phinx.php 配置文件对应</p></blockquote><h2 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h2><p>数据库迁移文件写好之后，就可以用命令执行数据库迁移了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor/bin/phinx migrate</span><br></pre></td></tr></table></figure><p>执行完成之后再返回查看 blog 数据库，可以发现 users 表已经创建好了。</p><p>除了 users 表之外，还有一张 phinxlog 表，这是用来保存迁移记录的。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>数据库迁移属于项目单独引用的，以后再考虑封装到框架里面。</p>]]></content>
    
    
    <summary type="html">利用 phinx 生成数据库迁移。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（九）视图blade模板</title>
    <link href="http://huotublog.com/2021/02/13/my-swoole-framework-9/"/>
    <id>http://huotublog.com/2021/02/13/my-swoole-framework-9/</id>
    <published>2021-02-13T13:50:05.000Z</published>
    <updated>2023-02-16T06:50:23.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>路由模块终于告一段落了，虽然完成了但还没有经过严格测试，</p><p>因此可能会存在一些问题，具体问题就等接下来的开发过程发现就好了。</p><h2 id="视图模块"><a href="#视图模块" class="headerlink" title="视图模块"></a>视图模块</h2><p>由于我的框架不是专门做 API 的，也不是微服务架构，而是单体应用，</p><p>也就是说会出现 HTML 代码跟 PHP 代码混合在一块的视图文件，</p><p>直接用原生的 PHP 来写 HTML 页面肯定不是好方法，而模板引擎比较好用的就是 blade 模板了。</p><h2 id="安装-blade-模板"><a href="#安装-blade-模板" class="headerlink" title="安装 blade 模板"></a>安装 blade 模板</h2><p>模板引擎的开发成本太高了，因此我打算直接用别人写好的。</p><p>使用 composer 命令 <code>composer require xiaoler/blade</code>，</p><p>安装完成后 composer.json 的 require 字段即可看到刚才的安装包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;xiaoler/blade&quot;: &quot;^5.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\&quot;: &quot;app/&quot;,</span><br><span class="line">      &quot;FireRabbitEngine\\Module\\&quot;: &quot;firerabbit-engine/module/&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;files&quot;: [</span><br><span class="line">      &quot;firerabbit-engine/common/function.php&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https://mirrors.aliyun.com/composer/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板引擎的配置"><a href="#模板引擎的配置" class="headerlink" title="模板引擎的配置"></a>模板引擎的配置</h2><p>模板引擎在第一次运行时，会根据模板创建出编译后的 php 文件，</p><p>也就是说，它需要将模板语言转化成 PHP 语言，生成对应解析后的文件。</p><p>在 app 下创建 view 文件夹，用来存放视图模板文件。</p><p>在 app 下创建 storage 文件夹，用来保存上传的文件或者缓存文件。</p><p>在 storage 目录下继续创建 cache，在 cache 目录下创建 view_cache 用来保存视图缓存文件。</p><blockquote><p>view_cache 要加入到 .gitignore 忽略的目录，缓存文件不需要同步上传</p></blockquote><p>视图缓存文件即经过模板引擎编译后生成的 PHP 文件。</p><p>为了方便管理全局配置，在博客目录下创建 app&#x2F;config&#x2F;app.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config = [</span><br><span class="line">    &#x27;view_path&#x27; =&gt; __DIR__ . &#x27;/../view&#x27;,</span><br><span class="line">    &#x27;view_cache_path&#x27; =&gt; __DIR__ . &#x27;/../storage/cache/view_cache&#x27;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">return $config;</span><br></pre></td></tr></table></figure><p>app.php 是博客系统全局的配置文件。</p><h2 id="视图模块-1"><a href="#视图模块-1" class="headerlink" title="视图模块"></a>视图模块</h2><p>接下来在框架的 module 目录创建文件夹 View 用来保存视图相关的功能类。</p><p>创建 Blade 调用 composer 引入的 blade 模板引擎插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021/2/13</span><br><span class="line"> * Time：22:06</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\View;</span><br><span class="line"></span><br><span class="line">use Xiaoler\Blade\Compilers\BladeCompiler;</span><br><span class="line">use Xiaoler\Blade\Engines\CompilerEngine;</span><br><span class="line">use Xiaoler\Blade\Engines\EngineResolver;</span><br><span class="line">use Xiaoler\Blade\Factory;</span><br><span class="line">use Xiaoler\Blade\Filesystem;</span><br><span class="line">use Xiaoler\Blade\FileViewFinder;</span><br><span class="line"></span><br><span class="line">class Blade</span><br><span class="line">&#123;</span><br><span class="line">    protected static $viewPath, $cachePath;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置模板文件目录</span><br><span class="line">     * @param $viewPath</span><br><span class="line">     * @param $cachePath</span><br><span class="line">     */</span><br><span class="line">    public static function setConfig($viewPath, $cachePath)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$viewPath = $viewPath;</span><br><span class="line">        self::$cachePath = $cachePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取模板引擎返回的html代码</span><br><span class="line">     * @param $blade</span><br><span class="line">     * @param $params</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static function view($blade, $params)</span><br><span class="line">    &#123;</span><br><span class="line">        $file = new Filesystem;</span><br><span class="line">        $compiler = new BladeCompiler($file, self::$cachePath);</span><br><span class="line"></span><br><span class="line">        $resolver = new EngineResolver;</span><br><span class="line">        $resolver-&gt;register(&#x27;blade&#x27;, function () use ($compiler) &#123;</span><br><span class="line">            return new CompilerEngine($compiler);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $factory = new Factory($resolver, new FileViewFinder($file, [self::$viewPath]));</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            return $factory-&gt;make($blade, $params)-&gt;render();</span><br><span class="line">        &#125; catch (\Throwable $e) &#123;</span><br><span class="line">            return $e-&gt;getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setConfig</code> 方法可以用来设置视图和缓存文件的目录。</p><p>修改 http_server.php，引入上面创建的 app.php 全局配置文件，同时视图模板加载对应的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require_once &#x27;./app/route/web.php&#x27;;</span><br><span class="line">require_once &#x27;./app/config/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#x27;./app/config/middleware.php&#x27;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#x27;view_path&#x27;], $config[&#x27;view_cache_path&#x27;]);</span><br><span class="line"></span><br><span class="line">$http = new Swoole\Http\Server(&#x27;0.0.0.0&#x27;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#x27;request&#x27;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>现在这个启动文件看起来乱七八糟的，后面再慢慢优化吧。</p><p>通过上面的配置，已经可以调用 Blade 类来生成视图文件了。</p><h2 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h2><p>在 app&#x2F;view 下创建 layout，layout 是视图共用的模板，</p><p>比如顶部导航栏，底部 footer 之类的，也就是说 HTML 的母版。</p><p>在 layout 目录下面创建 app.blade.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    @yield(&#x27;content&#x27;)</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>blade 模板文件的命名规则是：视图名称.blade，当然也可以通过配置取消 blade 后缀</p></blockquote><p>这是一个简单的 HTML 代码，<code>@yield(&#39;content&#39;)</code> 即子页需要编写的内容。</p><blockquote><p>关于 blade 模板的使用方法可以网上自行了解</p></blockquote><p>接着在 app&#x2F;view 目录下创建首页 index.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@extends(&#x27;layout.app&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;content&#x27;)</span><br><span class="line">    &lt;h1&gt;index 首页&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;这是一个参数：&#123;&#123; $name &#125;&#125;&lt;/p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure><p>index 继承了 layout&#x2F;app.blade.php，只需要编写 ‘content’ 部分即可，</p><p>这里输出了一个 $name 参数，用来测试模板传参。</p><h2 id="调用-blade-模板"><a href="#调用-blade-模板" class="headerlink" title="调用 blade 模板"></a>调用 blade 模板</h2><p>编辑 IndexController 的 index 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $html = Blade::view(&#x27;index&#x27;, [&#x27;name&#x27; =&gt; &#x27;花花&#x27;]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用视图的方法为：<code>Blade::view(视图文件名, [参数])</code></p><p>视图文件名即去掉 blade 的名字，如：index.blade.php，即 index。</p><p><code>showMessage</code> 方法即调用 swoole 的 response 输出字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function showMessage($message)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;httpKernel-&gt;getResponse()-&gt;header(&quot;Content-Type&quot;, &quot;text/html; charset=utf-8&quot;);</span><br><span class="line">    $this-&gt;httpKernel-&gt;getResponse()-&gt;end($message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后打开浏览器，访问首页，即可看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index 首页</span><br><span class="line">这是一个参数：花花</span><br></pre></td></tr></table></figure><p>这样，框架的视图模块就完成了！</p>]]></content>
    
    
    <summary type="html">视图模块使用 blade 模板。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（八）路由中间件</title>
    <link href="http://huotublog.com/2021/02/12/my-swoole-framework-8/"/>
    <id>http://huotublog.com/2021/02/12/my-swoole-framework-8/</id>
    <published>2021-02-12T06:57:33.000Z</published>
    <updated>2023-02-16T06:50:23.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><p>中间件就是一种系统之间互相连接的“中间的一层”。</p><p>通俗的讲类似古代的关口，西游记里唐僧每到一个国家都要取得这个国家的“通关文凭”，如果没有通关文凭就无法离开国界。边关的守卫就可以理解为“中间件”，唐僧就是请求，如果没有通过文凭（即达不到某种要求）就会被拦截在关口。</p><p>也就是说，中间件的主要功能是“拦截不符合规范的请求”。</p><p>它就是一种 <code>if-else</code> 条件判断结构，如果……就……</p><p>比如要设计一个活动页面，只有今天晚上 9：00 到 10：00 这个时间段才会进入活动页，如果还不到 9 点就打开这个页面就会显示“活动还未开始”，如果是 10 点之后打开这个页面，就会显示“活动已结束”。</p><p>要实现这种功能十分简单，直接用 <code>if-else</code> 结构就可以了。</p><p>但是这种思想属于面向过程，在框架里可以将判断条件封装为“中间件”实现自动化处理请求，满足要求的就放过，不满足要求的就拦截下来，返回失败的处理。</p><h2 id="中间件的应用场景"><a href="#中间件的应用场景" class="headerlink" title="中间件的应用场景"></a>中间件的应用场景</h2><p>中间件即拦截不符合规范的请求，因此它能用的场景非常多。</p><p>例如规定了某个时间段开放、关闭的活动页面；</p><p>表单验证、用户登录状态验证等等。</p><p>总之，凡是能用“如果……就……”描述的，几乎都可以用中间件实现，因为它本身即是一种条件判断结构。</p><h2 id="Laravel-中的中间件"><a href="#Laravel-中的中间件" class="headerlink" title="Laravel 中的中间件"></a>Laravel 中的中间件</h2><p>Laravel 中的中间件的使用非常优雅！</p><p>创建一个中间件，用于验证用户是否登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">class AuthCheck</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param \Illuminate\Http\Request $request</span><br><span class="line">     * @param \Closure $next</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function handle($request, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        // 判断用户是否登录状态，如果已登录则进入下一步</span><br><span class="line">        if (auth()-&gt;check()) &#123;</span><br><span class="line">            return $next($request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果未登录则返回提示页面的视图</span><br><span class="line">        $message = &#x27;用户未登录，无法操作，&lt;a href=&quot;#&quot;&gt;前往登录&lt;/a&gt;。&#x27;;</span><br><span class="line">        return $this-&gt;showErrorPage($message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public functio showErrorPage($message) &#123;</span><br><span class="line">        // ... 返回自定义视图页面</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 Kernel.php 中注册中间件，并且命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    &#x27;auth.check&#x27; =&gt; AuthCheck::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>最后只要在路由配置中为需要验证用户身份的路由加上中间件即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;middleware(&#x27;auth.check&#x27;)-&gt;get(&#x27;/user&#x27;, &#x27;UserController@index&#x27;)-&gt;name(&#x27;user.index&#x27;);</span><br></pre></td></tr></table></figure><p>只需如此简单的配置即可实现路由拦截。</p><h2 id="Laravel-中间件的原理"><a href="#Laravel-中间件的原理" class="headerlink" title="Laravel 中间件的原理"></a>Laravel 中间件的原理</h2><p>一个路由可以有很多中间件，只有满足所有中间件才让请求继续下去，否则就终端请求返回错误的结果。</p><p>看起来只需要一个 foreach 循环就能实现中间件了，用伪代码实现思路如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$flag = true;</span><br><span class="line"></span><br><span class="line">$conditions = [条件1, 条件2, 条件3];</span><br><span class="line"></span><br><span class="line">foreach ($conditions as $condition) &#123;</span><br><span class="line">    if($condition == false) &#123;</span><br><span class="line">        $flag = false;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($flag == true) &#123;</span><br><span class="line">    // 成功，进入下一步</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 失败，返回失败页</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像确实可以，但我出于好奇研究了一下 Laravel 的源码。</p><h3 id="Laravel-源码"><a href="#Laravel-源码" class="headerlink" title="Laravel 源码"></a>Laravel 源码</h3><p>在定义 Middleware 类的时候，我发现 Middleware 不需要继承任何框架的基类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">class AuthCheck</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param \Illuminate\Http\Request $request</span><br><span class="line">     * @param \Closure $next</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function handle($request, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        // 判断用户是否登录状态，如果已登录则进入下一步</span><br><span class="line">        if (auth()-&gt;check()) &#123;</span><br><span class="line">            return $next($request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果未登录则返回提示页面的视图</span><br><span class="line">        $message = &#x27;用户未登录，无法操作，&lt;a href=&quot;#&quot;&gt;前往登录&lt;/a&gt;。&#x27;;</span><br><span class="line">        return $this-&gt;showErrorPage($message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public functio showErrorPage($message) &#123;</span><br><span class="line">        // ... 返回自定义视图页面</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是定义一个 handle 方法，一共接收两个参数，</p><p>一个是 Laravel 的 $request，另一个是闭包类型 $next。</p><p>如果请求验证成功，则直接返回闭包执行结果 <code>$next($request)</code>，</p><p>如果请求不符合要求，就自定义一个响应返回。</p><p>看来，玄机并不在 Middleware 的定义里。</p><p>基于 php-fpm 的框架入口文件基本上都是 index.php，</p><p>因此找到 Laravel 的入口文件在 public 目录下面，index.php 的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Laravel - A PHP Framework For Web Artisans</span><br><span class="line"> *</span><br><span class="line"> * @package  Laravel</span><br><span class="line"> * @author   Taylor Otwell &lt;taylor@laravel.com&gt;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">define(&#x27;LARAVEL_START&#x27;, microtime(true));</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Register The Auto Loader</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Composer provides a convenient, automatically generated class loader for</span><br><span class="line">| our application. We just need to utilize it! We&#x27;ll simply require it</span><br><span class="line">| into the script here so that we don&#x27;t have to worry about manual</span><br><span class="line">| loading any of our classes later on. It feels great to relax.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">require __DIR__.&#x27;/../vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Turn On The Lights</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| We need to illuminate PHP development, so let us turn on the lights.</span><br><span class="line">| This bootstraps the framework and gets it ready for use, then it</span><br><span class="line">| will load up this application so that we can run it and send</span><br><span class="line">| the responses back to the browser and delight our users.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$app = require_once __DIR__.&#x27;/../bootstrap/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Run The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Once we have the application, we can handle the incoming request</span><br><span class="line">| through the kernel, and send the associated response back to</span><br><span class="line">| the client&#x27;s browser allowing them to enjoy the creative</span><br><span class="line">| and wonderful application we have prepared for them.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里引入了一个文件，然后得到一个 $app 对象，接着调用 handle 方法执行响应事件，</p><p>然后就没有其他代码了，因此这个引入的 app.php 是关键所在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$app = require_once __DIR__.&#x27;/../bootstrap/app.php&#x27;;</span><br></pre></td></tr></table></figure><p>找到 app.php 发现如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Create The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| The first thing we will do is create a new Laravel application instance</span><br><span class="line">| which serves as the &quot;glue&quot; for all the components of Laravel, and is</span><br><span class="line">| the IoC container for the system binding all of the various parts.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$app = new Illuminate\Foundation\Application(</span><br><span class="line">    $_ENV[&#x27;APP_BASE_PATH&#x27;] ?? dirname(__DIR__)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Bind Important Interfaces</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Next, we need to bind some important interfaces into the container so</span><br><span class="line">| we will be able to resolve them when needed. The kernels serve the</span><br><span class="line">| incoming requests to this application from both the web and CLI.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Return The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| This script returns the application instance. The instance is given to</span><br><span class="line">| the calling script so we can separate the building of the instances</span><br><span class="line">| from the actual running of the application and sending responses.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">return $app;</span><br></pre></td></tr></table></figure><p>这里是注册服务容器的地方，服务容器 Laravel 实例化类的一种设计模式，</p><p>具体的原理我也没有搞懂，只要知道这是一个“注册和实例化类”的地方就可以了。</p><p>跟 HTTP 请求相关的部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>按住 Ctrl 点击 <code>App\Http\Kernel::class</code> 可以跳转到类定义的地方，</p><p>结果发现跳转到中间件配置的地方了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http;</span><br><span class="line"></span><br><span class="line">use Illuminate\Foundation\Http\Kernel as HttpKernel;</span><br><span class="line"></span><br><span class="line">class Kernel extends HttpKernel</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * The application&#x27;s global HTTP middleware stack.</span><br><span class="line">     *</span><br><span class="line">     * These middleware are run during every request to your application.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $middleware = [</span><br><span class="line">        // \App\Http\Middleware\TrustHosts::class,</span><br><span class="line">        \App\Http\Middleware\TrustProxies::class,</span><br><span class="line">        \Fruitcake\Cors\HandleCors::class,</span><br><span class="line">        \App\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line">        \App\Http\Middleware\TrimStrings::class,</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The application&#x27;s route middleware groups.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $middlewareGroups = [</span><br><span class="line">        &#x27;web&#x27; =&gt; [</span><br><span class="line">            \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line">            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line">            \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line">            // \Illuminate\Session\Middleware\AuthenticateSession::class,</span><br><span class="line">            \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line">            \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line">            \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        &#x27;api&#x27; =&gt; [</span><br><span class="line">//            &#x27;throttle:60,1&#x27;,</span><br><span class="line">            \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The application&#x27;s route middleware.</span><br><span class="line">     *</span><br><span class="line">     * These middleware may be assigned to groups or used individually.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $routeMiddleware = [</span><br><span class="line">        &#x27;auth&#x27; =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">        &#x27;auth.basic&#x27; =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看来离想要找到的结果不远了，这个配置也没什么奇怪的地方，</p><p>接着发现这个类继承了另一个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use Illuminate\Foundation\Http\Kernel as HttpKernel;</span><br></pre></td></tr></table></figure><p>于是我们继续前往这个类，发现这个类有很多方法，</p><p>我就直接截取关键部分了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Handle an incoming HTTP request.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Illuminate\Http\Request  $request</span><br><span class="line"> * @return \Illuminate\Http\Response</span><br><span class="line"> */</span><br><span class="line">public function handle($request)</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        $response = $this-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; catch (Throwable $e) &#123;</span><br><span class="line">        $this-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = $this-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;app[&#x27;events&#x27;]-&gt;dispatch(</span><br><span class="line">        new RequestHandled($request, $response)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handle 方法？也就是说最开始入口文件执行的便是这个方法了。</p><p>根据注释：Handle an incoming HTTP request</p><p>可以知道这里确实是处理进来请求的地方。</p><p>第一行执行的方法：<code>enableHttpMethodParameterOverride</code>，即 Laravel 重写请求方法的地方，</p><p>在 Laravel 除了 GET 和 POST 之外，还定义了 PUT、DELETE 等方法，</p><p>这里就是判断 <code>_method</code> 变量生成特殊请求方法的地方。</p><p>接着查看 <code>sendRequestThroughRouter</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Send the given request through the middleware / router.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Illuminate\Http\Request  $request</span><br><span class="line"> * @return \Illuminate\Http\Response</span><br><span class="line"> */</span><br><span class="line">protected function sendRequestThroughRouter($request)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;app-&gt;instance(&#x27;request&#x27;, $request);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(&#x27;request&#x27;);</span><br><span class="line"></span><br><span class="line">    $this-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    return (new Pipeline($this-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">                -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码应该就是我想要找的了，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return (new Pipeline($this-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">                -&gt;then($this-&gt;dispatchToRouter());</span><br></pre></td></tr></table></figure><p>send 方法非常简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * Set the object being sent through the pipeline.</span><br><span class="line"> *</span><br><span class="line"> * @param  mixed  $passable</span><br><span class="line"> * @return $this</span><br><span class="line"> */</span><br><span class="line">public function send($passable)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;passable = $passable;</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并不是处理中间件的逻辑，接着看 through：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Set the array of pipes.</span><br><span class="line"> *</span><br><span class="line"> * @param  array|mixed  $pipes</span><br><span class="line"> * @return $this</span><br><span class="line"> */</span><br><span class="line">public function through($pipes)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;pipes = is_array($pipes) ? $pipes : func_get_args();</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也不是，最后的 then：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Run the pipeline with a final destination callback.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Closure  $destination</span><br><span class="line"> * @return mixed</span><br><span class="line"> */</span><br><span class="line">public function then(Closure $destination)</span><br><span class="line">&#123;</span><br><span class="line">    $pipeline = array_reduce(</span><br><span class="line">        array_reverse($this-&gt;pipes()), $this-&gt;carry(), $this-&gt;prepareDestination($destination)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return $pipeline($this-&gt;passable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也只有短短数行的代码，难道最后也没找到中间件的实现逻辑？</p><p>而且……这个 <code>array_reduce</code> 是什么鬼？</p><p>仔细的研究了一番，发现这里的代码虽然只有 4 行，可真的不简单！</p><p>其中，最关键的部分是这个叫做 carry 的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Get a Closure that represents a slice of the application onion.</span><br><span class="line"> *</span><br><span class="line"> * @return \Closure</span><br><span class="line"> */</span><br><span class="line">protected function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (is_callable($pipe)) &#123;</span><br><span class="line">                    // If the pipe is a callable, then we will call it directly, but otherwise we</span><br><span class="line">                    // will resolve the pipes out of the dependency container and call it with</span><br><span class="line">                    // the appropriate method and arguments, returning the results back out.</span><br><span class="line">                    return $pipe($passable, $stack);</span><br><span class="line">                &#125; elseif (! is_object($pipe)) &#123;</span><br><span class="line">                    [$name, $parameters] = $this-&gt;parsePipeString($pipe);</span><br><span class="line"></span><br><span class="line">                    // If the pipe is a string we will parse the string and resolve the class out</span><br><span class="line">                    // of the dependency injection container. We can then build a callable and</span><br><span class="line">                    // execute the pipe function giving in the parameters that are required.</span><br><span class="line">                    $pipe = $this-&gt;getContainer()-&gt;make($name);</span><br><span class="line"></span><br><span class="line">                    $parameters = array_merge([$passable, $stack], $parameters);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // If the pipe is already an object we&#x27;ll just make a callable and pass it to</span><br><span class="line">                    // the pipe as-is. There is no need to do any extra parsing and formatting</span><br><span class="line">                    // since the object we&#x27;re given was already a fully instantiated object.</span><br><span class="line">                    $parameters = [$passable, $stack];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $carry = method_exists($pipe, $this-&gt;method)</span><br><span class="line">                                ? $pipe-&gt;&#123;$this-&gt;method&#125;(...$parameters)</span><br><span class="line">                                : $pipe(...$parameters);</span><br><span class="line"></span><br><span class="line">                return $this-&gt;handleCarry($carry);</span><br><span class="line">            &#125; catch (Throwable $e) &#123;</span><br><span class="line">                return $this-&gt;handleException($passable, $e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="array-reduce"><a href="#array-reduce" class="headerlink" title="array_reduce"></a>array_reduce</h3><p>如果猜的没错，Laravel 应该就是使用 <code>array_reduce</code> 来实现中间件的。</p><p>查了一下 PHP 的官方文档，它对 <code>array_reduce</code> 的描述是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_reduce — 用回调函数迭代地将数组简化为单一的值</span><br></pre></td></tr></table></figure><p>嗯……不愧是官方文档，说了跟没讲一样。</p><p>还是通过实战来了解一下什么是 <code>array_reduce</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$params = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">$result = array_reduce($params, function ($carry, $item) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;carry=&#x27; . $carry);</span><br><span class="line">    var_dump(&#x27;item=&#x27; . $item);</span><br><span class="line"></span><br><span class="line">    return $carry . $item;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>声明一个数组 $params 且包含三个字符串，</p><p>然后通过 array_reduce 传入数组参数，同时还有一个闭包，</p><p>闭包接收两个参数 $carry, $item，然后试着打印这两个参数以及最终结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string(6) &quot;carry=&quot;</span><br><span class="line">string(6) &quot;item=a&quot;</span><br><span class="line">string(7) &quot;carry=a&quot;</span><br><span class="line">string(6) &quot;item=b&quot;</span><br><span class="line">string(8) &quot;carry=ab&quot;</span><br><span class="line">string(6) &quot;item=c&quot;</span><br><span class="line">string(3) &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>也就是说，一开始 $carry 的值是空的（Null），然后随着循环，</p><p>$carry 会逐渐合并数组的每一个元素。</p><p><code>array_reduce</code> 可以说是如下代码构成的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$params = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">$result = null;</span><br><span class="line"></span><br><span class="line">foreach ($params as $param) &#123;</span><br><span class="line">    $result .= $param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>循环遍历数组的每一个元素，然后保持一个不变的值。</p><p>与官方文档的描述对应起来了！<strong>将数组简化为一个单一的值。</strong></p><p>也就是说通过 <code>array_reduce</code> 最终会返回一个值作为处理的结果。</p><p><code>array_reduce</code> 可以接收第三个参数，即初始值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$params = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">$result = array_reduce($params, function ($carry, $item) &#123;</span><br><span class="line">    return $carry . $item;</span><br><span class="line">&#125;, &#x27;init&#x27;);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>最终会输出：<code>initabc</code></p><p>如果不设置第三个参数，那么初始值就会默认为 Null。</p><p>最开始，我以为会是返回 true 或者 false 来判定中间件的执行结果，</p><p>但是 Laravel 的设计却令人惊叹！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Get a Closure that represents a slice of the application onion.</span><br><span class="line"> *</span><br><span class="line"> * @return \Closure</span><br><span class="line"> */</span><br><span class="line">protected function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (is_callable($pipe)) &#123;</span><br><span class="line">                    // If the pipe is a callable, then we will call it directly, but otherwise we</span><br><span class="line">                    // will resolve the pipes out of the dependency container and call it with</span><br><span class="line">                    // the appropriate method and arguments, returning the results back out.</span><br><span class="line">                    return $pipe($passable, $stack);</span><br><span class="line">                &#125; elseif (! is_object($pipe)) &#123;</span><br><span class="line">                    [$name, $parameters] = $this-&gt;parsePipeString($pipe);</span><br><span class="line"></span><br><span class="line">                    // If the pipe is a string we will parse the string and resolve the class out</span><br><span class="line">                    // of the dependency injection container. We can then build a callable and</span><br><span class="line">                    // execute the pipe function giving in the parameters that are required.</span><br><span class="line">                    $pipe = $this-&gt;getContainer()-&gt;make($name);</span><br><span class="line"></span><br><span class="line">                    $parameters = array_merge([$passable, $stack], $parameters);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // If the pipe is already an object we&#x27;ll just make a callable and pass it to</span><br><span class="line">                    // the pipe as-is. There is no need to do any extra parsing and formatting</span><br><span class="line">                    // since the object we&#x27;re given was already a fully instantiated object.</span><br><span class="line">                    $parameters = [$passable, $stack];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $carry = method_exists($pipe, $this-&gt;method)</span><br><span class="line">                                ? $pipe-&gt;&#123;$this-&gt;method&#125;(...$parameters)</span><br><span class="line">                                : $pipe(...$parameters);</span><br><span class="line"></span><br><span class="line">                return $this-&gt;handleCarry($carry);</span><br><span class="line">            &#125; catch (Throwable $e) &#123;</span><br><span class="line">                return $this-&gt;handleException($passable, $e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码十分生涩难懂，简直如同“天书”，</p><p>因此我自己尝试实现相同的逻辑并且让代码变成“说人话”。</p><h3 id="对暗号游戏"><a href="#对暗号游戏" class="headerlink" title="对暗号游戏"></a>对暗号游戏</h3><p>接下来我开始参考着 Laravel 中间件的代码实现一个“对暗号”的“游戏”，</p><p>比如在一个军营里，一共有 A、B、C 三个巡逻队，</p><p>为了避免整个暗号泄露出去，规定每一个巡逻队都只持有暗号的其中一句，</p><p>今晚的暗号是：“上山打老虎”，</p><p>那么三个巡逻队分别得到的暗号是：</p><p>A：上山</p><p>B：打</p><p>C：老虎</p><p>而你半夜出去嘘嘘，刚好被巡逻队给碰上了……</p><p>于是，你必须说出你的口令，否则就会被当做奸细就地正法……</p><p>三只巡逻队可以抽象成“巡逻队”概念，即定义一个 Middleware 作为父类，</p><p>他们都有核对口号的方法 handle，以及自己的密令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">abstract class Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword;</span><br><span class="line"></span><br><span class="line">    public function handle($value, Closure $closure)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#x27;暗号：&#x27; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">        // 包含指定关键词的口令视为核对成功</span><br><span class="line">        if (strstr($value, $this-&gt;keyword) != false) &#123;</span><br><span class="line">            return $closure($value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &#x27;口令核对失败&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建三个巡逻队，继承基类并且拥有独立的口令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Middleware_A extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword = &#x27;上山&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Middleware_B extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword = &#x27;打&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Middleware_C extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword = &#x27;老虎&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现具体的逻辑，声明一个包含 N 只巡逻队的数组（可以是 0-3 个）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function middlewares()</span><br><span class="line">&#123;</span><br><span class="line">    $params = [&#x27;Middleware_A&#x27;, &#x27;Middleware_B&#x27;, &#x27;Middleware_C&#x27;];</span><br><span class="line">    $params = array_reverse($params);</span><br><span class="line"></span><br><span class="line">    return $params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加了一个 <code>array_reverse</code> 将数组反转的方法，下文会解释。</p><p>然后实现核对密令的逻辑，比如你遇到巡逻队 A，那就核对巡逻队 A 的密令，</p><p>如果同时遇到两只巡逻队，A+B 或者 A+C 或者 B+C，那就应该核对两个巡逻队的密令，</p><p>如果你非常不幸的同时遇到三只巡逻队，那就要核对 ABC 的密令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">            if ($pipe instanceof Closure) &#123;</span><br><span class="line">                return $pipe($passable, $stack);</span><br><span class="line">            &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">                $pipe = new $pipe;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($destination) &#123;</span><br><span class="line"></span><br><span class="line">        var_dump($destination);</span><br><span class="line"></span><br><span class="line">        return &#x27;ok&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response = array_reduce(middlewares(), carry(), init());</span><br><span class="line"></span><br><span class="line">var_dump($response(&#x27;小鸡炖蘑菇&#x27;));</span><br><span class="line">var_dump($response(&#x27;上山打野鸡&#x27;));</span><br><span class="line">var_dump($response(&#x27;上山打老虎&#x27;));</span><br></pre></td></tr></table></figure><p>上面的代码虽然很短，但是要理解起来非常不易。</p><p><code>array_reduce</code> 可以接收三个参数：</p><p>第一个参数是数组，即要遍历的数组；</p><p>第二个参数是一个方法&#x2F;闭包（匿名函数），即执行遍历的逻辑；</p><p>第三个参数是初始值。</p><p>初始值是最终想要实现的结果，当满足所有条件后，就会返回初始值函数里的代码。</p><p>而 <code>middlewares</code> 是最开始定义巡逻队的地方，很不幸你同时遇到三只巡逻队：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function middlewares()</span><br><span class="line">&#123;</span><br><span class="line">    $params = [&#x27;Middleware_A&#x27;, &#x27;Middleware_B&#x27;, &#x27;Middleware_C&#x27;];</span><br><span class="line">    $params = array_reverse($params);</span><br><span class="line"></span><br><span class="line">    return $params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>array_reverse</code> 这里的反转数组与接下来的堆栈调用有关，</p><p>栈结构是先进后出，会导致乱序，我们希望的结果是按照 A、B、C 的顺序执行。</p><p><code>init</code> 方法定义了最终希望输出的值，如果满足所有条件的话，就返回这个值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($destination) &#123;</span><br><span class="line"></span><br><span class="line">        var_dump($destination);</span><br><span class="line"></span><br><span class="line">        return &#x27;ok&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>carry</code> 是整个逻辑最关键的部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">            if ($pipe instanceof Closure) &#123;</span><br><span class="line">                return $pipe($passable, $stack);</span><br><span class="line">            &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">                $pipe = new $pipe;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法涉及了闭包的递归调用，<strong>最终的返回结果依然是一个闭包。</strong></p><p>carry 方法传入两个参数 $stack, </p><p>$stack 即遍历过程中持续引用的值，而 $pipe 则是当前元素。</p><p>回忆一下上面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$params = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">$result = array_reduce($params, function ($carry, $item) &#123;</span><br><span class="line">    return $carry . $item;</span><br><span class="line">&#125;, &#x27;init&#x27;);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>应该不难理解，这里就是循环遍历一个数组，依次取值进行计算，最终返回一个结果而已。</p><p>接下来分析代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">return function ($stack, $pipe) &#123;</span><br><span class="line">    return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">        if ($pipe instanceof Closure) &#123;</span><br><span class="line">            return $pipe($passable, $stack);</span><br><span class="line">        &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">            $pipe = new $pipe;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>carry 返回一个闭包，同时它内层的代码也是返回一个闭包，并且接收一个 $passable 作为参数。</p><blockquote><p>$passable 的作用就是递归函数中不断传给下一次调用的值</p></blockquote><p>在最内层，是一个条件判断语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe = new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return $pipe-&gt;handle($passable, $stack);</span><br></pre></td></tr></table></figure><p>如果传来的值不是 Closure（闭包类型），则判断它是否是一个对象，</p><p>如果不是对象则根据这个元素的名字实例化出对象来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe = new $pipe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用实例化对象的 handle 方法，并且把 $passable 和 持续保留的那个值 $stack 传给 handle。</p><p>再看一次执行的逻辑，并且模拟每一次执行的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">return function ($stack, $pipe) &#123;</span><br><span class="line">    return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">        if ($pipe instanceof Closure) &#123;</span><br><span class="line">            return $pipe($passable, $stack);</span><br><span class="line">        &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">            $pipe = new $pipe;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设调用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// array_reduce 返回的是一个闭包，可以当做函数调用</span><br><span class="line">$response = array_reduce(middlewares(), carry(), init());</span><br><span class="line"></span><br><span class="line">// 传入一个用来验证的口令</span><br><span class="line">$result = $response(&#x27;上山打野鸡&#x27;);</span><br><span class="line"></span><br><span class="line">// 打印出验证结果</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>第一次遍历：</p><p>通过 init 方法赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// 第一步：$stack 赋值，init 方法也是一个闭包，接收一个 $destination 参数</span><br><span class="line">// $stack 的初始值即 init 方法返回的闭包，所以是：</span><br><span class="line"></span><br><span class="line">$stack = function ($destination) &#123;</span><br><span class="line">     var_dump($destination);</span><br><span class="line">     </span><br><span class="line">     return &#x27;ok&#x27;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">// 接着，取出数组的第一个元素</span><br><span class="line">$pipe = &#x27;Middleware_A&#x27;;</span><br><span class="line"></span><br><span class="line">// 第二步，进入闭包：function ($passable) use ($stack, $pipe)</span><br><span class="line">// 这里的 $passable 就是上面调用时传入的值：“上山打野鸡”</span><br><span class="line">// 执行判断语句</span><br><span class="line"></span><br><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe = new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 很明显 $pipe 此时只是一个字符串，因此不满足 $pipe instanceof Closure</span><br><span class="line">// 于是进入 else 条件 !is_object($pipe) 它并不是一个对象，因此满足此条件</span><br><span class="line">// 所以将 $pipe = new $pipe; 实例化成对象</span><br><span class="line">// 此处的代码即：$pipe = new Middleware_A();</span><br><span class="line">// 实例化出巡逻队A的对象，然后调用他的 handle 方法并返回</span><br><span class="line"></span><br><span class="line">return $pipe-&gt;handle($passable, $stack);</span><br><span class="line"></span><br><span class="line">// Middleware_A 继承了父类 Middleware，因此 handle 为：</span><br><span class="line"></span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;暗号：&#x27; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    // 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) != false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#x27;口令核对失败&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 此时 value 的值为：上山打野鸡，巡逻队A的暗号是：上山</span><br><span class="line">// 因此巡逻队A验证成功，将这个值传给闭包然后返回</span><br><span class="line"></span><br><span class="line">return $closure($value);</span><br><span class="line"></span><br><span class="line">// 接收到参数的 $closure 就是 $stack，也就是我们最开始定义的 init 方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二次遍历：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 此时已经不会经过 init 初始化了，</span><br><span class="line">// $stack的值是第一步返回的 return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">// 也就是说init方法</span><br><span class="line"></span><br><span class="line">// 第二次遍历$pipe就会取第二个巡逻队：Middleware_B</span><br><span class="line">// 继续进入 function ($passable) use ($stack, $pipe) 执行判断语句</span><br><span class="line"></span><br><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe = new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 同样Middleware_B只是一个字符串，因此会被实例化成类</span><br><span class="line">// 然后与第一步一样，进行比对暗号，Middleware_B的暗号是：打</span><br><span class="line">// 因此：上山打野鸡包含了这个字符，就符合巡逻队B的暗号</span><br><span class="line">// 又经过父类的方法：</span><br><span class="line"></span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;暗号：&#x27; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    // 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) != false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#x27;口令核对失败&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// init 方法继续被传递给下一个执行的对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步，也就是最后的一个巡逻队了，这里产生了一个分歧点，即最后一个暗号不符合要求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 第三次遍历$pipe就会取第三个巡逻队：Middleware_C</span><br><span class="line">// 继续进入 function ($passable) use ($stack, $pipe) 执行判断语句</span><br><span class="line"></span><br><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe = new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一样是实例化的过程，然后分歧点出现了</span><br><span class="line">// 第三个巡逻队的暗号是：老虎，而此时给出的却是：上山打野鸡</span><br><span class="line">// 不包括“老虎”两个字</span><br><span class="line"></span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;暗号：&#x27; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    // 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) != false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#x27;口令核对失败&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不符合结果就直接返回了一个字符串“口令核对失败”</span><br><span class="line">// 这个返回的值会被当做$stack的值</span><br><span class="line">// 最后就跟递归函数一样层层返回，将“口令核对失败”作为array_reduce将数组简化的唯一值</span><br><span class="line"></span><br><span class="line">// 也就是说，$response(&#x27;上山打野鸡&#x27;) 最后返回的是“口令核对失败”</span><br><span class="line"></span><br><span class="line">// array_reduce 返回的是一个闭包，可以当做函数调用</span><br><span class="line">$response = array_reduce(middlewares(), carry(), init());</span><br><span class="line"></span><br><span class="line">// 传入一个用来验证的口令</span><br><span class="line">$result = $response(&#x27;上山打野鸡&#x27;);</span><br><span class="line"></span><br><span class="line">// 打印出验证结果</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>如果是传入正确的口令：上山打老虎呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 巡逻队C核对口令正确，就会继续把参数传给闭包</span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#x27;暗号：&#x27; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    // 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) != false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#x27;口令核对失败&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 此时三个巡逻队已经遍历完了，还记得一直传下来的$stack的值是什么吗？</span><br><span class="line">// 答案是：init</span><br><span class="line">// 你可以重新返回去查看第一步到第三步，只要是验证口令成功的时候，</span><br><span class="line">// init 方法都会被当做下一个闭包传递下去，init 闭包即 $stack 的值</span><br><span class="line">// 所以最终返回的 $stack 即 init 方法</span><br></pre></td></tr></table></figure><blockquote><p>注意！上面的 array_reduce 执行完毕后并不是真的执行了代码，而是返回一个层层嵌套的递归函数（闭包），只有在调用的时候才会一层一层的执行，因而最先调用的中间件反而会变成最后执行（栈结构先进后出），所以我们才会在最开始反转数组，以保证执行顺序。</p></blockquote><p>至此，Laravel 中间件验证路由请求的原理也就搞清楚了。</p><p>捋顺之后只剩下久久的深思，一段简单的代码却蕴藏着如此精深的奥妙。</p><p>可是……写完了如此长篇的文章，我的框架的中间件却还没有开始着手……</p><h2 id="为框架添加中间件"><a href="#为框架添加中间件" class="headerlink" title="为框架添加中间件"></a>为框架添加中间件</h2><h3 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h3><p>中间件其实跟路由的原理类似，即创建一个专门保存命名和映射关系的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 键值对数组的键即中间件名称，值即对应的中间件</span><br><span class="line">&#x27;auth&#x27; =&gt; &#x27;App\\Middleware\\AuthMiddleware&#x27;</span><br></pre></td></tr></table></figure><p>只需要用一个简单的名称字符串即可映射到对应的中间件类。</p><p>由于一个路由可以有很多个中间件，所以路由配置里需要添加一个数组用来存储中间件的名称。</p><h3 id="优化路由模块"><a href="#优化路由模块" class="headerlink" title="优化路由模块"></a>优化路由模块</h3><p>在之前的设计中，Router 的 $routes 设计为静态变量，</p><p>其实只要修改 http_server.php 修改引入方式即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#x27;./vendor/autoload.php&#x27;;</span><br><span class="line">require_once &#x27;./app/route/web.php&#x27;;</span><br><span class="line"></span><br><span class="line">$http = new Swoole\Http\Server(&#x27;0.0.0.0&#x27;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#x27;request&#x27;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#x27;请求URI：&#x27; . $request-&gt;server[&#x27;request_uri&#x27;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>而路由配置文件 web.php 只要返回 $router 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Controller\\Home\\&#x27;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#x27;/user&#x27;, &#x27;IndexController@index&#x27;)-&gt;name(&#x27;index&#x27;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>这样 Router 的 $routes 就不再需要设置为静态变量了。</p><h3 id="路由添加中间件"><a href="#路由添加中间件" class="headerlink" title="路由添加中间件"></a>路由添加中间件</h3><p>在路由配置的时候，期望效果是可以通过如下两种方式配置中间件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Controller\\Home\\&#x27;,</span><br><span class="line">    &#x27;middleware&#x27; =&gt; [&#x27;auth&#x27;]</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#x27;/user&#x27;, &#x27;IndexController@index&#x27;)-&gt;name(&#x27;index&#x27;)-&gt;middleware([&#x27;auth&#x27;]);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>第一种是在分组的时候，配置全组共用的中间件，</p><p>第二种是在单个路由配置的时候，可以自定义该路由的中间件，</p><p>如果使用第二种方法，并且该路由在一个分组里，该路由不仅有分组的中间件，还有自己单独添加的中间件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Controller\\Home\\&#x27;,</span><br><span class="line">    &#x27;middleware&#x27; =&gt; [&#x27;auth&#x27;]</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    // 这个路由的中间件为：[auth, other]</span><br><span class="line">    $router-&gt;get(&#x27;/user&#x27;, &#x27;IndexController@index&#x27;)-&gt;middleware([&#x27;other&#x27;]);</span><br><span class="line"></span><br><span class="line">    // 这个路由的中间件为：[auth]</span><br><span class="line">    $router-&gt;get(&#x27;/admin&#x27;, &#x27;IndexController@index&#x27;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>上面的 &#x2F;user 路由额外添加了一个中间件 other，而 &#x2F;admin 路由不会受到影响。</p><p>中间件的合并顺序为：分组&gt;自定义</p><p>即优先执行分组设置的全局中间件，然后再执行自定义中间件。</p><p>middleware 方法必须放在 get&#x2F;post&#x2F;any 方法之后。</p><p>修改 name 方法，让该方法也返回 $this，这样就可以链式调用了。</p><p>然后为 Router 添加 middleware 方法，该方法接收一个数组参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 新增属性(全局中间件)</span><br><span class="line">protected $middlewares = [];</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 路由添加中间件</span><br><span class="line">*</span><br><span class="line">* @param array $middlewares</span><br><span class="line">* @return Router</span><br><span class="line">*/</span><br><span class="line">public function middleware(array $middlewares)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;lastHandleRouteIndex === null) &#123;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并中间件，优先级为：分组&gt;单个路由自定义配置</span><br><span class="line">    $middlewares = array_merge($this-&gt;middlewares, $middlewares);</span><br><span class="line">    // 去除重复中间件</span><br><span class="line">    $middlewares = array_unique($middlewares);</span><br><span class="line">    // 找到最后一个添加的路由</span><br><span class="line">    $route = $this-&gt;routes[$this-&gt;lastHandleRouteIndex];</span><br><span class="line">    $route-&gt;middleware = $middlewares;</span><br><span class="line"></span><br><span class="line">    $this-&gt;routes[$this-&gt;lastHandleRouteIndex] = $route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是分组的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 设置参数</span><br><span class="line">* @param $key</span><br><span class="line">* @param $value</span><br><span class="line">*/</span><br><span class="line">protected function createConfig($key, $value)</span><br><span class="line">&#123;</span><br><span class="line">    switch ($key) &#123;</span><br><span class="line">        case &#x27;namespace&#x27;:</span><br><span class="line">            $this-&gt;namespace = $value;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;middleware&#x27;:</span><br><span class="line">            $this-&gt;middlewares = $value;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分组配置时将中间件加入全局的中间件数组。</p><p>在调用结束的时候，应该把这个数组清空：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 路由分组</span><br><span class="line">* @param $func</span><br><span class="line">*/</span><br><span class="line">public function group($func)</span><br><span class="line">&#123;</span><br><span class="line">    $func();</span><br><span class="line"></span><br><span class="line">    // 执行完成后将参数初始化</span><br><span class="line">    $this-&gt;namespace = &#x27;&#x27;;</span><br><span class="line">    $this-&gt;middlewares = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给路由增加中间件的功能就完成了。</p><p>现在 RouteParams 路由配置对象里已经可以取到 middleware 属性的值了。</p><h3 id="封装请求与响应"><a href="#封装请求与响应" class="headerlink" title="封装请求与响应"></a>封装请求与响应</h3><p>框架的请求和响应是 swoole 的对象，内置的方法无法满足框架的需求，</p><p>因此需要将请求和响应进行封装，在框架的 module 目录新建文件夹 Http，</p><p>Http 模块用于实现 Http 请求相关的处理类，新建两个类：Request 和 Response 用于封装请求和响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"># Request.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Route\RouteParams;</span><br><span class="line"></span><br><span class="line">class Request</span><br><span class="line">&#123;</span><br><span class="line">    protected $request, $route;</span><br><span class="line"></span><br><span class="line">    public function __construct($request, $route)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request = $request;</span><br><span class="line">        $this-&gt;route = $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取路由</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function getRoute(): RouteParams</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断该请求是否ajax</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    public function isAjax()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;XMLHttpRequest&#x27; == $this-&gt;request-&gt;header[&#x27;x-requested-with&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取get参数</span><br><span class="line">     * @param null $key</span><br><span class="line">     * @param null $default</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function getQueryParams($key = null, $default = null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key == null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;get;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return isset($this-&gt;request-&gt;get[$key]) ? $this-&gt;request-&gt;get[$key] : $default;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取post参数</span><br><span class="line">     * @param null $key</span><br><span class="line">     * @param null $default</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function getPostParams($key = null, $default = null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key == null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;post;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return isset($this-&gt;request-&gt;post[$key]) ? $this-&gt;request-&gt;post[$key] : $default;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取请求方法</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function getRequestMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request-&gt;server[&#x27;request_method&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取请求IP地址</span><br><span class="line">     * @return string | null</span><br><span class="line">     */</span><br><span class="line">    public function getRequestIP()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request-&gt;header[&#x27;x-real-ip&#x27;] ?? null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取请求头</span><br><span class="line">     * @param $key</span><br><span class="line">     * @return string | null</span><br><span class="line">     */</span><br><span class="line">    public function getHeaders($key = null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key == null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;header;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;request-&gt;header[$key] ?? null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取cookie</span><br><span class="line">     * @param $key</span><br><span class="line">     * @return string | null</span><br><span class="line">     */</span><br><span class="line">    public function getCookies($key = null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key == null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;cookie;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;request-&gt;cookie[$key] ?? null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取请求URI</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function getRequestURI()</span><br><span class="line">    &#123;</span><br><span class="line">        return rtrim($this-&gt;request-&gt;server[&#x27;request_uri&#x27;], &#x27;/&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Request 请求类实现了一些简单方法的封装，后续如有需求还可以继续扩展。</p><p>接下来创建 Response 响应类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2/12/21</span><br><span class="line"> * Time：11:31 AM</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Response</span><br><span class="line">&#123;</span><br><span class="line">    protected $response;</span><br><span class="line"></span><br><span class="line">    public function __construct($response)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response = $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showMessage($message)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response-&gt;header(&quot;Content-Type&quot;, &quot;text/html; charset=utf-8&quot;);</span><br><span class="line">        $this-&gt;response-&gt;end($message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类实现了一个简单的输出消息的方法，后续将会增加输出 view 和 API 类型的响应。</p><p>现在 Request 和 Response 都有了，但是每次都要分别取这两个对象不太方便，</p><p>于是我又定义了一个 Kernel（Http 请求核心类）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">class Kernel</span><br><span class="line">&#123;</span><br><span class="line">    protected $request, $response;</span><br><span class="line"></span><br><span class="line">    public function __construct(Request $request, Response $response)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request = $request;</span><br><span class="line">        $this-&gt;response = $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request-&gt;getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;response-&gt;getResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getHttpRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getHttpResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类可以取到 swoole 的请求和响应，也可以取到框架自定义的请求和响应。</p><p>这样就把请求和响应封装成一个 Http 核心类了。</p><h3 id="中间件类"><a href="#中间件类" class="headerlink" title="中间件类"></a>中间件类</h3><p>Laravel 的中间件不需要继承任何类，完全由用户自定义，</p><p>为了统一规范，我定义了一个中间件的父类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">abstract class Middleware</span><br><span class="line">&#123;</span><br><span class="line">    abstract public function handle(Kernel $kernel, Closure $next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里类只有一个抽象方法 handle，所有的中间件继承这个类实现统一的标准。</p><p>handle 第一个参数即上文封装的 kernel，在中间件里通过 kernel 来获取参数和返回响应。</p><p>再在博客项目的路径下，新建 app&#x2F;middleware 用来存放中间件 TestMiddlewareA 和 TestMiddlewareB：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use FireRabbitEngine\Module\Http\Kernel;</span><br><span class="line">use FireRabbitEngine\Module\Http\Middleware;</span><br><span class="line"></span><br><span class="line">class TestMiddlewareA extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public function handle(Kernel $kernel, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        $request = $kernel-&gt;getHttpRequest();</span><br><span class="line"></span><br><span class="line">        if ($request-&gt;getQueryParams(&#x27;a&#x27;) == 1) &#123;</span><br><span class="line">            $kernel-&gt;getHttpResponse()-&gt;showMessage(&#x27;aa&#x27;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $next($kernel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestMiddlewareB：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use FireRabbitEngine\Module\Http\Kernel;</span><br><span class="line">use FireRabbitEngine\Module\Http\Middleware;</span><br><span class="line"></span><br><span class="line">class TestMiddlewareB extends Middleware</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public function handle(Kernel $kernel, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        $request = $kernel-&gt;getHttpRequest();</span><br><span class="line"></span><br><span class="line">        if ($request-&gt;getQueryParams(&#x27;b&#x27;) == 1) &#123;</span><br><span class="line">            $kernel-&gt;getHttpResponse()-&gt;showMessage(&#x27;bb&#x27;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $next($kernel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个中间件的逻辑非常简单，就是通过 get 参数来判断是否通过请求，</p><p>这样在测试的时候就很方便了，只要在路径上面修改参数即可看到中间件的效果。</p><blockquote><p>中间件实际上可以不需要 return null，为了美观后面会对此处的代码进行优化。</p></blockquote><h3 id="中间件逻辑"><a href="#中间件逻辑" class="headerlink" title="中间件逻辑"></a>中间件逻辑</h3><p>前文通过 array_reduce 来演示 Laravel 中间件的处理逻辑，</p><p>现在就要把这个逻辑在框架中进行实现，在 Http 文件夹下新建一个 PipeLine 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">class Pipeline</span><br><span class="line">&#123;</span><br><span class="line">    protected $pipes, $kernel;</span><br><span class="line"></span><br><span class="line">    public function send(Kernel $kernel)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;kernel = $kernel;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function through($pipes)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pipes = $pipes;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function then(Closure $destination)</span><br><span class="line">    &#123;</span><br><span class="line">        return array_reduce($this-&gt;pipes, $this-&gt;carry(), $this-&gt;dispatchRouter($destination));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function carry()</span><br><span class="line">    &#123;</span><br><span class="line">        return function ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">            return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">                if ($pipe instanceof Closure) &#123;</span><br><span class="line">                    return $pipe($passable, $stack);</span><br><span class="line">                &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">                    $pipe = new $pipe;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function dispatchRouter($destination)</span><br><span class="line">    &#123;</span><br><span class="line">        return function ($passable) use ($destination) &#123;</span><br><span class="line">            $destination($passable);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类就是用来处理中间件逻辑的地方，具体逻辑与前文“对口令游戏”一样。</p><p>这个类通过 send 方法接收上面封装好的 Http 核心类 Kernel，</p><p>Kernel 类具有获取请求参数和返回响应的权限，它会被传到中间件里。</p><blockquote><p>中间件要根据请求参数判断是否符合条件，在中间件还可以直接返回响应</p></blockquote><p>中间件的逻辑类也完成了，接下来就要修改 RouteParams 解析路由实例化控制器的地方。</p><p>将原来创建控制器实例的方法抽取出来，封装为 routeResponse：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 执行路由响应</span><br><span class="line">* @return \Closure</span><br><span class="line">*/</span><br><span class="line">protected function routeResponse()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($kernel) &#123;</span><br><span class="line"></span><br><span class="line">        // 实例化类</span><br><span class="line">        $controllerName = $this-&gt;getFullControllerName();</span><br><span class="line">        $controllerObject = new $controllerName($kernel);</span><br><span class="line">        $this-&gt;uri = rtrim($this-&gt;request-&gt;server[&#x27;request_uri&#x27;], &#x27;/&#x27;);</span><br><span class="line"></span><br><span class="line">        $params = $this-&gt;getRouteParams();</span><br><span class="line"></span><br><span class="line">        // 执行方法时，路径参数作为方法的参数</span><br><span class="line">        call_user_func_array([$controllerObject, $this-&gt;action], $params);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法返回的是一个闭包，也就是说返回值是一个匿名函数。</p><p>接下来修改原来的 createResponse 方法，现在可以直接实例化 PipeLine 来调用中间件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 执行路由</span><br><span class="line">    * @param $request</span><br><span class="line">    * @param $response</span><br><span class="line">    */</span><br><span class="line">public function createResponse($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    // 判断请求方法是否正确</span><br><span class="line">    if ($this-&gt;method != RequestMethod::ANY &amp;&amp; $request-&gt;server[&#x27;request_method&#x27;] != $this-&gt;method) &#123;</span><br><span class="line">        (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断方法是否存在</span><br><span class="line">    $controllerName = $this-&gt;getFullControllerName();</span><br><span class="line">    if (!class_exists($controllerName)) &#123;</span><br><span class="line">        (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $action = $this-&gt;action;</span><br><span class="line"></span><br><span class="line">    // 不存在方法则返回404</span><br><span class="line">    if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">        (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;request = $request;</span><br><span class="line">    $this-&gt;response = $response;</span><br><span class="line"></span><br><span class="line">    // 测试用</span><br><span class="line">    $pipes = [&#x27;App\\middleware\\TestMiddlewareA&#x27;, &#x27;App\\middleware\\TestMiddlewareB&#x27;];</span><br><span class="line"></span><br><span class="line">    $pipeline = new Pipeline();</span><br><span class="line"></span><br><span class="line">    $kernel = new Kernel(new Request($request, $this), new Response($response));</span><br><span class="line"></span><br><span class="line">    $routeResponse = $pipeline-&gt;send($kernel)</span><br><span class="line">        -&gt;through(array_reverse($pipes))</span><br><span class="line">        -&gt;then($this-&gt;routeResponse());</span><br><span class="line"></span><br><span class="line">    $routeResponse($kernel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pipes = [&#x27;App\\Middleware\\TestMiddlewareA&#x27;, &#x27;App\\middleware\\TestMiddlewareB&#x27;];</span><br></pre></td></tr></table></figure><p>手动声明了两个中间件，然后访问任意路由就可以看到中间件的效果了。</p><p>测试之后发现中间件正常运行。</p><h3 id="添加映射关系"><a href="#添加映射关系" class="headerlink" title="添加映射关系"></a>添加映射关系</h3><p>框架现在没有中间件名称和类名的映射关系，所以才只能用上面的测试代码来调试。</p><p>接下来创建一个配置中间件映射关系的文件，在博客目录下创建 app&#x2F;Middleware&#x2F;Kernel.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Middleware;</span><br><span class="line"></span><br><span class="line">class Kernel</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 实例化的中间件</span><br><span class="line">     *</span><br><span class="line">     * @var [Middleware]</span><br><span class="line">     */</span><br><span class="line">    protected static $instances;</span><br><span class="line"></span><br><span class="line">    protected static $middlewares = [</span><br><span class="line">        &#x27;a&#x27; =&gt; TestMiddlewareA::class,</span><br><span class="line">        &#x27;b&#x27; =&gt; TestMiddlewareB::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public static function getMiddlewareInstance($name)</span><br><span class="line">    &#123;</span><br><span class="line">        // 从已实例化的对象数组中取</span><br><span class="line">        if(isset(self::$instances[$name])) &#123;</span><br><span class="line">           return self::$instances[$name]; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 未实例化的创建新对象</span><br><span class="line">        $middlewareName = self::$middlewares[$name] ?? null;</span><br><span class="line"></span><br><span class="line">        if($middlewareName == null) &#123;</span><br><span class="line">            self::$instances[$name] = null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self::$instances[$name] = new $middlewareName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$instances[$name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我用一个静态变量来保存实例化的中间件，因为中间件的对象是固定的，</p><p>没必要每次调用的时候都重新创建一次，一旦实例化之后就直接放进内存，这样可以提高效率。</p><p>这样就完成整个中间件的功能了。</p><h2 id="测试中间件"><a href="#测试中间件" class="headerlink" title="测试中间件"></a>测试中间件</h2><p>编辑 web.php，添加两个测试路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Controller\\Home\\&#x27;,</span><br><span class="line">    &#x27;middleware&#x27; =&gt; [&#x27;a&#x27;]</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    // 这个路由的中间件为：[auth, other]</span><br><span class="line">    $router-&gt;get(&#x27;/user&#x27;, &#x27;IndexController@index&#x27;)-&gt;middleware([&#x27;b&#x27;]);</span><br><span class="line"></span><br><span class="line">    // 这个路由的中间件为：[auth]</span><br><span class="line">    $router-&gt;get(&#x27;/admin&#x27;, &#x27;IndexController@index&#x27;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>通过访问上述定义的路由，然后修改 a 和 b 参数的值即可看到中间件的拦截功能。</p><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><h3 id="中间件配置化"><a href="#中间件配置化" class="headerlink" title="中间件配置化"></a>中间件配置化</h3><p>修改时间：2020-02-13 22:47</p><p>突然发现 PipeLine 方法调用 Kernel 类十分不合理。</p><p>框架的代码不应该依赖项目的代码，因此需要优化。</p><p>在 app&#x2F;config 目录下创建 middleware.php 用来保存中间件的名称映射关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &#x27;a&#x27; =&gt; App\Middleware\TestMiddlewareA::class,</span><br><span class="line">    &#x27;b&#x27; =&gt; App\Middleware\TestMiddlewareB::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>接着将原本放在 app&#x2F;Middleware 下面的 Kernel 删掉，</p><p>并且在框架 module&#x2F;Http 目录新建一个 Middleware 目录，将 Middleware.php 移到这个目录下。</p><p>同时重新创建一个 Kernel 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http\Middleware;</span><br><span class="line"></span><br><span class="line">class Kernel</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 实例化的中间件</span><br><span class="line">     *</span><br><span class="line">     * @var [Middleware]</span><br><span class="line">     */</span><br><span class="line">    protected static $instances;</span><br><span class="line"></span><br><span class="line">    protected static $middlewares = [];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取配置文件</span><br><span class="line">     * @param $middlewares</span><br><span class="line">     */</span><br><span class="line">    public static function setConfig($middlewares)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$middlewares = $middlewares;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getMiddlewareInstance($name)</span><br><span class="line">    &#123;</span><br><span class="line">        // 从已实例化的对象数组中取</span><br><span class="line">        if (isset(self::$instances[$name])) &#123;</span><br><span class="line">            return self::$instances[$name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 未实例化的创建新对象</span><br><span class="line">        $middlewareName = self::$middlewares[$name] ?? null;</span><br><span class="line"></span><br><span class="line">        if ($middlewareName == null) &#123;</span><br><span class="line">            self::$instances[$name] = null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self::$instances[$name] = new $middlewareName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$instances[$name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件的配置不再直接写在这个类里，而是通过 <code>setConfig</code> 读取配置参数。</p><p>接着在修改文件 http_server.php，加入一行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#x27;./app/config/middleware.php&#x27;);</span><br></pre></td></tr></table></figure><p>这样框架和项目之间就不再有直接的依赖关系了。</p>]]></content>
    
    
    <summary type="html">通过 array_reduce 方法实现路由中间件的功能。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（七）路由动态注入参数</title>
    <link href="http://huotublog.com/2021/02/11/my-swoole-framework-7/"/>
    <id>http://huotublog.com/2021/02/11/my-swoole-framework-7/</id>
    <published>2021-02-11T14:33:44.000Z</published>
    <updated>2023-02-16T06:50:23.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经写到第七章了，竟然还是在写路由 &#x3D; &#x3D;</p><p>今天就来实现路由给方法动态传参的功能。</p><p>动态传参就是说路由定义的规则：<code>/article/&#123;id&#125;</code>，会自动注入到 ArticleController 的 show 方法。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个路由</span><br><span class="line">$router-&gt;get(&#x27;/article/&#123;id&#125;&#x27;, &#x27;ArticleController@show&#x27;)-&gt;name(&#x27;article.show&#x27;);</span><br><span class="line"></span><br><span class="line">// 有了上面的路由，用户访问地址：/article/1 就会自动调用ArticleController的show方法</span><br><span class="line">// 在前面Controller定义了一个setRouteParams方法把路由参数传给控制器</span><br><span class="line">// 控制器内部就存储了一个一维数组：[1]</span><br><span class="line">// 但是这样调用起来很麻烦，尤其是参数比较多的时候容易造成混乱</span><br><span class="line">// 最优雅的方式就是Laravel的路由参数自动注入</span><br><span class="line">// 只要在ArticleController定义一个show方法，接收一个id参数，而路由参数会自动注入到这个方法</span><br><span class="line"></span><br><span class="line">public function show($id) &#123;</span><br><span class="line">    var_dump($id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如果是多个参数的呢？也是一样的。</span><br><span class="line">$router-&gt;get(&#x27;/article/&#123;id&#125;/edit/&#123;classify&#125;&#x27;, &#x27;ArticleController@test&#x27;)-&gt;name(&#x27;article.test&#x27;);</span><br><span class="line"></span><br><span class="line">public function test($id, $classify) &#123;</span><br><span class="line">    var_dump($id, $classify);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>这里涉及到一个函数动态传参的问题，</p><p>“如何将数组元素的值，依次作为参数传给函数？”</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>PHP 支持函数不定参数，就是用三个点加上参数名即视为可变参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 支持可变参数的函数</span><br><span class="line">function test(...$args) &#123;</span><br><span class="line">    var_dump($args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试传入不同的参数</span><br><span class="line">test(&#x27;a&#x27;);</span><br><span class="line">test(&#x27;a&#x27;, &#x27;b&#x27;);</span><br><span class="line">test(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(1) &quot;b&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(1) &quot;b&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(1) &quot;c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，在函数中可以将可变参数当成数组来使用，</p><p>那是不是说明我们传一个数组进去，就会被当成多个参数了呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 支持可变参数的函数</span><br><span class="line">function test(...$args) &#123;</span><br><span class="line">    var_dump($args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试传入不同的参数</span><br><span class="line">$params = [&#x27;aa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;];</span><br><span class="line">test($params);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码，我们传入一个数组，按照设想的情况，</p><p>数组中的三个值应该会作为三个参数传入 test 方法，</p><p>假设的情况是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$params = [&#x27;aa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;];</span><br><span class="line"></span><br><span class="line">// 想象中的样子</span><br><span class="line">test($params); =&gt; test(&#x27;aa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;);</span><br></pre></td></tr></table></figure><p>但实际的打印结果却是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(2) &quot;aa&quot;</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    string(2) &quot;bb&quot;</span><br><span class="line">    [2]=&gt;</span><br><span class="line">    string(2) &quot;cc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，数组只是被当成了一个参数传给 test 方法，</p><p>其实不难想像，如果数组会被解析成多个参数，</p><p>那可变参数不是不能传入数组作为参数了吗？</p><h3 id="函数的动态调用"><a href="#函数的动态调用" class="headerlink" title="函数的动态调用"></a>函数的动态调用</h3><p>通常情况下，没办法实现将数组依次当做函数的参数。</p><p>而要用到 PHP 内置的一个方法：<code>call_user_func_array</code></p><blockquote><p>注意！有一个类似的方法：call_user_func，不要输错！</p></blockquote><p>这个方法可以动态调用函数，它可以接收两个数组作为参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array([调用对象，方法名称]，[参数1，参数2，参数3...]);</span><br></pre></td></tr></table></figure><p>第一个数组，第一个元素是调用的对象，即类的实例化，第二个参数是一个字符串即要调用对象的方法名称。</p><p>第二个数组即是要依次传入方法的参数。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class  Test</span><br><span class="line">&#123;</span><br><span class="line">    public function show($name)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function playGame($name, $game)</span><br><span class="line">    &#123;</span><br><span class="line">        $text = $name . &#x27;在玩&#x27; . $game;</span><br><span class="line">        var_dump($text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = new Test();</span><br><span class="line"></span><br><span class="line">call_user_func_array([$test, &#x27;show&#x27;], [&#x27;小白&#x27;]);</span><br><span class="line">call_user_func_array([$test, &#x27;playGame&#x27;], [&#x27;小白&#x27;, &#x27;俄罗斯方块&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(6) &quot;小白&quot;</span><br><span class="line">string(27) &quot;小白在玩俄罗斯方块&quot;</span><br></pre></td></tr></table></figure><h2 id="RouteParams：动态传参"><a href="#RouteParams：动态传参" class="headerlink" title="RouteParams：动态传参"></a>RouteParams：动态传参</h2><p>动态传参的原理已经弄明白了，接下来只要改造原来的解析方法就可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 执行路由</span><br><span class="line"> * @param $request</span><br><span class="line"> * @param $response</span><br><span class="line"> */</span><br><span class="line">public function createResponse($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    // 判断请求方法是否正确</span><br><span class="line">    if ($this-&gt;method != RequestMethod::ANY &amp;&amp; $request-&gt;server[&#x27;request_method&#x27;] != $this-&gt;method) &#123;</span><br><span class="line">        (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断方法是否存在</span><br><span class="line">    $controllerName = $this-&gt;getFullControllerName();</span><br><span class="line">    if (!class_exists($controllerName)) &#123;</span><br><span class="line">        (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $action = $this-&gt;action;</span><br><span class="line"></span><br><span class="line">    // 不存在方法则返回404</span><br><span class="line">    if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">        (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实例化类</span><br><span class="line">    $controllerObject = new $controllerName($request, $response, $this-&gt;name);</span><br><span class="line">    $this-&gt;uri = rtrim($request-&gt;server[&#x27;request_uri&#x27;], &#x27;/&#x27;);</span><br><span class="line"></span><br><span class="line">    $params = $this-&gt;getRouteParams();</span><br><span class="line"></span><br><span class="line">    // ... 以后的中间件写在这里</span><br><span class="line"></span><br><span class="line">    // 执行方法时，路径参数作为方法的参数</span><br><span class="line">    call_user_func_array([$controllerObject, $action], $params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取路由参数</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">public function getRouteParams()</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;uri == &#x27;&#x27;) &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    preg_match_all($this-&gt;pattern, $this-&gt;uri, $result);</span><br><span class="line"></span><br><span class="line">    if (count($result[0]) == 0) &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $params = [];</span><br><span class="line"></span><br><span class="line">    for ($i = 1; $i &lt; count($result); $i++) &#123;</span><br><span class="line">        $params[] = $result[$i][0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RouteParams 将获取路由参数的方法抽离出来，</p><p>并且移除了 Controller 的 setRouteParams 方法，改用动态注入参数。</p><p>这样路由的参数注入也完成了！</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>编辑 web.php 添加路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#x27;/article/&#123;id&#125;/edit/&#123;classify&#125;&#x27;, &#x27;ArticleController@test&#x27;)-&gt;name(&#x27;article.test&#x27;);</span><br><span class="line">$router-&gt;get(&#x27;/article/&#123;id&#125;&#x27;, &#x27;ArticleController@show&#x27;)-&gt;name(&#x27;article.show&#x27;);</span><br></pre></td></tr></table></figure><p>编辑 ArticleController 添加方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class ArticleController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function show($id)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($id);</span><br><span class="line">        $this-&gt;showMessage(&#x27;ok&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function test($id, $classify)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($id,$classify);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(&#x27;ok&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果均能正确打印出注入的参数。</p><p>另外，发现到一个新问题就是路由的顺序，由于是使用正则匹配的，只要修改声明路由的顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/article/&#123;id&#125;</span><br><span class="line">/article/&#123;id&#125;/edit/&#123;classify&#125;</span><br></pre></td></tr></table></figure><p>结果访问：<a href="http://firerabbit-engine.ht/article/1/edit/aa">http://firerabbit-engine.ht/article/1/edit/aa</a></p><p>就会优先匹配到上面的正则，而 id 参数则是：1&#x2F;edit&#x2F;aa</p><p>只能人为避免因为书写顺序而产生奇奇怪怪的问题了，在编辑路由的时候优先将匹配规则较多的写在上面就不会弄错了。</p>]]></content>
    
    
    <summary type="html">路由动态传参给控制器方法。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建自己的Swoole框架（六）为路由模块添加命名功能</title>
    <link href="http://huotublog.com/2021/02/10/my-swoole-framework-6/"/>
    <id>http://huotublog.com/2021/02/10/my-swoole-framework-6/</id>
    <published>2021-02-10T03:08:08.000Z</published>
    <updated>2023-02-16T06:50:23.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考 Laravel 的路由，希望我的框架可以跟 Laravel 一样给路由命名，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#x27;/home&#x27;, &#x27;IndexController@index&#x27;)-&gt;name(&#x27;index&#x27;);</span><br></pre></td></tr></table></figure><p>然后提供一个全局函数 <code>route</code> 生成链接。</p><p>比如定义一个路由名 index，路由规则是：“&#x2F;home”，</p><p>然后通过 <code>route(&#39;index&#39;)</code> 会生成 “&#x2F;home” 链接。</p><p>其实就是从路由配置表里找到对应名字的路由然后取出路由规则而已。</p><p>对于需要解析路由参数的就不能只是简单的返回字符串了，</p><p>比如显示文章详情：路由命名为：<code>article.show</code>，对应的路由规则：<code>/article/&#123;id&#125;</code>，</p><p>通过全局函数生成文章详情的链接 <code>route(&#39;article.show&#39;, [&#39;id&#39;=&gt;1])</code> 返回：“&#x2F;article&#x2F;1”。</p><p>原理与解析路由参数一样，即正则匹配进行替换。</p><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>只要方法返回类本身就可以实现链式调用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    protected $word = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    public function say($word)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;word .= $word . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showResult()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = new Test();</span><br><span class="line"></span><br><span class="line">$test-&gt;say(&#x27;hello&#x27;)-&gt;say(&#x27;world&#x27;)-&gt;showResult();</span><br></pre></td></tr></table></figure><h2 id="Router：添加命名功能"><a href="#Router：添加命名功能" class="headerlink" title="Router：添加命名功能"></a>Router：添加命名功能</h2><p>其实这个地方我有点疑惑，为什么 name 方法是写在最后面，</p><p>get 方法已经将路由参数写入到配置里面了，写在链式调用最后的方法如何修改前面设定的值？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#x27;/home&#x27;, &#x27;IndexController@index&#x27;)-&gt;name(&#x27;index&#x27;);</span><br></pre></td></tr></table></figure><p>结果灵鸡一动！突然想到一种奇妙的方法来实现“后调改前值”，</p><p>就是加入一个 lastIndex，在插入路由配置的时候，计算这个插入值所在数组的索引并保存下来。</p><p>如果要修改最后一个调用的配置，就可以从 lastIndex 获取到了。</p><p>修改 Router 原来生成路由配置的方法，</p><p>为了链式调用必须返回类本身，同时加入 lastIndex 变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存最后一个操作的路由对象索引</span><br><span class="line"> * @var null</span><br><span class="line"> */</span><br><span class="line">private $lastHandleRouteIndex = null;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定义一个 GET 请求路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> */</span><br><span class="line">public function get($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;addRoute(RequestMethod::GET, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定义一个 POST 请求路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> */</span><br><span class="line">public function post($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;addRoute(RequestMethod::POST, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定义一个任意请求皆可的路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> */</span><br><span class="line">public function any($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;addRoute(RequestMethod::ANY, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将路由加入配置数组</span><br><span class="line"> * @param $method</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> */</span><br><span class="line">protected function addRoute($method, $route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $param = new RouteParams();</span><br><span class="line"></span><br><span class="line">    $param-&gt;method = $method;</span><br><span class="line">    $param-&gt;route = $route;</span><br><span class="line"></span><br><span class="line">    // 格式为：控制器@方法名</span><br><span class="line">    $actions = explode(&#x27;@&#x27;, $controller);</span><br><span class="line"></span><br><span class="line">    // 如果不按照规则设置控制器和方法名则抛出异常</span><br><span class="line">    if (count($actions) != 2) &#123;</span><br><span class="line">        throw new RouteParamException(&#x27;控制器和方法名称错误，应该为：控制器名称@方法名称&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $param-&gt;controller = $actions[0];</span><br><span class="line">    $param-&gt;action = $actions[1];</span><br><span class="line">    $param-&gt;namespace = $this-&gt;namespace;</span><br><span class="line">    $param-&gt;pattern = $this-&gt;getPattern($route);</span><br><span class="line"></span><br><span class="line">    self::$routes[] = $param;</span><br><span class="line"></span><br><span class="line">    // 新加入行</span><br><span class="line">    $this-&gt;lastHandleRouteIndex = count(self::$routes) - 1;</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引一开始是空的，所以赋值为 null，在插入路由配置的时候，</p><p>通过 <code>count(self::$routes) - 1</code> 计算当前新插入值的索引。</p><p>接下来新增一个 name 方法，路由名相当于唯一的 ID，因此不允许重复：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给路由命名</span><br><span class="line"> * @param $routeName</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> */</span><br><span class="line">public function name($routeName)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;lastHandleRouteIndex === null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断路由是否存在同名</span><br><span class="line">    foreach (self::$routes as $route) &#123;</span><br><span class="line">        if ($route-&gt;name == $routeName) &#123;</span><br><span class="line">            throw  new RouteParamException(&#x27;路由名称重复[&#x27; . $routeName . &#x27;]&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $route = self::$routes[$this-&gt;lastHandleRouteIndex];</span><br><span class="line">    $route-&gt;name = $routeName;</span><br><span class="line"></span><br><span class="line">    self::$routes[$this-&gt;lastHandleRouteIndex] = $route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 lastIndex 找到最后一个修改的路由配置，然后给它赋值 name 属性。</p><h3 id="避坑指南：诡异的-null-值"><a href="#避坑指南：诡异的-null-值" class="headerlink" title="避坑指南：诡异的 null 值"></a>避坑指南：诡异的 null 值</h3><blockquote><p>这里有个神坑！</p></blockquote><p><strong>PHP 对 null 值的判定很诡异</strong>。</p><p>在 PHP 中，<code>0 == null</code> 的结果为 true。</p><p>因此必须使用三等号：<code>===</code> 来判定包括类型也必须完全一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($this-&gt;lastHandleRouteIndex === null) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 if 本来是为了判定是否有路由配置，如果还没配置路由就调用 name 就直接跳过，</p><p>第一次操作时，lastIndex 的索引是 0，如果不使用三等号第一个配置的路由就会被跳过了。</p><blockquote><p>在使用判空操作，如：empty、isset 时必须注意 0、null、false 这几个值</p></blockquote><p>再来个有趣的小测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(0 == false);</span><br><span class="line">var_dump(0 == null);</span><br><span class="line">var_dump(0 == &#x27;&#x27;);</span><br></pre></td></tr></table></figure><p>以上三个，全部输出：<code>bool(true)</code>，是不是惊到了！</p><p>在某些场合双等号判定会造成失误，应该改用三等号。</p><h2 id="测试路由名称"><a href="#测试路由名称" class="headerlink" title="测试路由名称"></a>测试路由名称</h2><p>编辑 web.php 修改路由配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#x27;namespace&#x27; =&gt; &#x27;App\\Controller\\Home\\&#x27;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#x27;/&#x27;, &#x27;IndexController@index&#x27;)-&gt;name(&#x27;index&#x27;);</span><br><span class="line">    $router-&gt;get(&#x27;/login&#x27;, &#x27;IndexController@login&#x27;)-&gt;name(&#x27;login&#x27;);</span><br><span class="line">    $router-&gt;get(&#x27;/user&#x27;, &#x27;UserController@index&#x27;)-&gt;name(&#x27;user.index&#x27;);</span><br><span class="line">    $router-&gt;post(&#x27;/user/loginSubmit&#x27;, &#x27;UserController@loginSubmit&#x27;)-&gt;name(&#x27;login.submit&#x27;);</span><br><span class="line">    $router-&gt;get(&#x27;/article/&#123;id&#125;&#x27;, &#x27;ArticleController@show&#x27;)-&gt;name(&#x27;article.show&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 Router 执行 <code>var_dump(self::$routes)</code> 即可看到所有路由，name 字段已经变成设置的值了。</p><h2 id="RouteParams：生成链接"><a href="#RouteParams：生成链接" class="headerlink" title="RouteParams：生成链接"></a>RouteParams：生成链接</h2><p>RouteParams 保存了路由的所有配置，接下来要让它能根据路由规则生成对应的链接。</p><p>PHP 提供了一个正则替换函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$uri = &#x27;/article/&#123;id&#125;/classify/&#123;classify&#125;&#x27;;</span><br><span class="line"></span><br><span class="line">$pattern = &#x27;/&#123;id&#125;/&#x27;;</span><br><span class="line"></span><br><span class="line">$res = preg_replace($pattern, &#x27;123&#x27;, $uri);</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>上面的示例代码通过正则替换将自定义规则的 id 替换成数字 123。</p><p>接着，继续看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$uri = &#x27;/article/&#123;id&#125;/classify/&#123;classify&#125;&#x27;;</span><br><span class="line"></span><br><span class="line">$patterns = [&#x27;/&#123;id&#125;/&#x27;, &#x27;/&#123;classify&#125;/&#x27;, ];</span><br><span class="line">$replacements = [123, 456];</span><br><span class="line"></span><br><span class="line">$res = preg_replace($patterns, $replacements, $uri);</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(25) &quot;/article/123/classify/456&quot;</span><br></pre></td></tr></table></figure><p>通过传入数组参数即可实现批量替换，输出的字符串即链接地址。</p><p>原理已经搞清楚了，开始实际上手，修改 RouteParams，创建一个空方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个用来生成 query 参数的私有方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 构建query参数的地址</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $query</span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">private function buildQuery($route, $query)</span><br><span class="line">&#123;</span><br><span class="line">    if (empty($query)) &#123;</span><br><span class="line">        return $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $route . &#x27;?&#x27; . http_build_query($query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有参数就直接返回，不然就返回包含 query 参数的路由地址。</p><p>现在可以开始编写 createLink 的方法体了，</p><p>因为斜杠是正则符号，所以首页的路由“&#x2F;”要单独返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;route == &#x27;/&#x27;) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着判断是否包含路由参数，没有参数的也直接返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;route == &#x27;/&#x27;) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 取出自定义规则</span><br><span class="line">    $pattern = &#x27;/.*?\/(\&#123;.*?\&#125;)/&#x27;;</span><br><span class="line">    preg_match_all($pattern, $this-&gt;route, $result);</span><br><span class="line"></span><br><span class="line">    // 如果匹配不到自定义参数则直接返回路由规则</span><br><span class="line">    if (count($result[0]) == 0) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我希望实现全局函数 <code>route</code> 传入指定的参数就可以替换掉路由自定义的参数，生成替换了值的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 通过调用全局函数生成路由</span><br><span class="line">route(&#x27;article.show&#x27;, [&#x27;id&#x27; =&gt; 1])    =&gt; 返回结果：/article/1</span><br><span class="line"></span><br><span class="line">// 也就是说，路由规则需要实现如下变换效果</span><br><span class="line">/article/&#123;id&#125;   =&gt; 从 route 函数传入的数组中取出 id 变量，然后再替换掉 &#123;id&#125;</span><br></pre></td></tr></table></figure><p>这一步比较复杂，要先获取到匹配的规则：<code>&#123;id&#125;</code>，以及花括号里面的参数名 <code>id</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 获取自定义匹配规则</span><br><span class="line">$patterns = [];</span><br><span class="line">$paramNames = [];</span><br><span class="line"></span><br><span class="line">for ($i = 1, $count = count($result[1]); $i &lt;= $count; $i++) &#123;</span><br><span class="line"></span><br><span class="line">    // 此处得到自定义规则的参数，如：&#123;id&#125;</span><br><span class="line">    $rule = $result[1][$i - 1];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 花括号是正则表达式的符号，必须加上反斜杠转转义</span><br><span class="line">     * 最后，在前后加上斜杠才是一个完整的正则表达式</span><br><span class="line">     */</span><br><span class="line">    $patterns[] = &#x27;/&#x27; . str_replace([&#x27;&#123;&#x27;, &#x27;&#125;&#x27;], [&#x27;\&#123;&#x27;, &#x27;\&#125;&#x27;], $rule) . &#x27;/&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 截取中间的变量名</span><br><span class="line">     */</span><br><span class="line">    $paramNames[] = substr($rule, 1, strlen($rule) - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共得到了两个数组，<code>$patterns</code> 是正则替换表达式，而 <code>$paramNames</code> 是自定义路由参数的名字。</p><p>接下来把自定义路由中的 <code>&#123;id&#125;</code> 替换成  <code>$params</code> 传入的变量值，</p><p>因为传入的 <code>$params</code> 是一个关联数组，而 PHP 的正则替换函数是一维数组，</p><p>所以要把 <code>$params</code> 中对应的参数提取出来，</p><p>从 <code>$paramNames</code> 获取到的路径参名称作为键，取 <code>$params</code> 传进来的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生成要替换的数组结构，根据规则与传入的参数一一对应</span><br><span class="line"> * 假设路由规则是 /article/&#123;id&#125;</span><br><span class="line"> * 那么$params传入的参数就应该是：[&#x27;id&#x27;=&gt;1]</span><br><span class="line"> */</span><br><span class="line">$replacements = [];</span><br><span class="line">foreach ($paramNames as $key) &#123;</span><br><span class="line"></span><br><span class="line">    if (!isset($params[$key])) &#123;</span><br><span class="line">        throw new RouteParamException(&#x27;路由缺失参数[&#x27; . $key . &#x27;]&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $replacements[] = $params[$key];</span><br><span class="line"></span><br><span class="line">    // 移除路径参数</span><br><span class="line">    unset($params[$key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的数组不符合规则就抛出一个 <code>RouteParamException</code> 异常（这个异常是之前定义的）。</p><p>生成替换的值后，就可以把这个键从 <code>$params</code> 里面移除了，因为最后我们要生成 query 参数，</p><p>而路径参数已经被使用了，如果不去掉，最后就会变成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/article/1?id=1</span><br></pre></td></tr></table></figure><p>所以这一步顺便使用 <code>unset</code> 方法把已经用过的数组元素去掉。</p><p>接下来就可以使用正则替换将规则中的 <code>&#123;id&#125;</code> 替换成对应的值了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 然后将替换值根据规则进行置换</span><br><span class="line">$res = preg_replace($patterns, $replacements, $this-&gt;route);</span><br></pre></td></tr></table></figure><p>最后再构建 query 参数就大功告成，完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生成链接</span><br><span class="line"> * @param $params</span><br><span class="line"> * @return string</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> */</span><br><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;route == &#x27;/&#x27;) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 取出自定义规则</span><br><span class="line">    $pattern = &#x27;/.*?\/(\&#123;.*?\&#125;)/&#x27;;</span><br><span class="line">    preg_match_all($pattern, $this-&gt;route, $result);</span><br><span class="line"></span><br><span class="line">    // 如果匹配不到自定义参数则直接返回路由规则</span><br><span class="line">    if (count($result) == 0) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取自定义匹配规则</span><br><span class="line">    $patterns = [];</span><br><span class="line">    $paramNames = [];</span><br><span class="line"></span><br><span class="line">    for ($i = 1, $count = count($result[1]); $i &lt;= $count; $i++) &#123;</span><br><span class="line"></span><br><span class="line">        // 此处得到自定义规则的参数，如：&#123;id&#125;</span><br><span class="line">        $rule = $result[1][$i - 1];</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 花括号是正则表达式的符号，必须加上反斜杠转转义</span><br><span class="line">         * 最后，在前后加上斜杠才是一个完整的正则表达式</span><br><span class="line">         */</span><br><span class="line">        $patterns[] = &#x27;/&#x27; . str_replace([&#x27;&#123;&#x27;, &#x27;&#125;&#x27;], [&#x27;\&#123;&#x27;, &#x27;\&#125;&#x27;], $rule) . &#x27;/&#x27;;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 截取中间的变量名</span><br><span class="line">         */</span><br><span class="line">        $paramNames[] = substr($rule, 1, strlen($rule) - 2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成要替换的数组结构，根据规则与传入的参数一一对应</span><br><span class="line">     * 假设路由规则是 /article/&#123;id&#125;</span><br><span class="line">     * 那么$params传入的参数就应该是：[&#x27;id&#x27;=&gt;1]</span><br><span class="line">     */</span><br><span class="line">    $replacements = [];</span><br><span class="line">    foreach ($paramNames as $key) &#123;</span><br><span class="line"></span><br><span class="line">        if (!isset($params[$key])) &#123;</span><br><span class="line">            throw new RouteParamException(&#x27;路由缺失参数[&#x27; . $key . &#x27;]&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $replacements[] = $params[$key];</span><br><span class="line"></span><br><span class="line">        // 移除路径参数</span><br><span class="line">        unset($params[$key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 然后将替换值根据规则进行置换</span><br><span class="line">    $res = preg_replace($patterns, $replacements, $this-&gt;route);</span><br><span class="line"></span><br><span class="line">    return $this-&gt;buildQuery($res, $params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 构建query参数的地址</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $query</span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">private function buildQuery($route, $query)</span><br><span class="line">&#123;</span><br><span class="line">    if (empty($query)) &#123;</span><br><span class="line">        return $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $route . &#x27;?&#x27; . http_build_query($query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Router：查找路由名"><a href="#Router：查找路由名" class="headerlink" title="Router：查找路由名"></a>Router：查找路由名</h2><p>路由的名称是唯一的，每一个名称对应一个路由，相当于路由的唯一 ID。</p><p>只要根据这个 ID 就可以找到对应的路由。</p><p>Router 方法应该暴露一个可供外部调用的查找路由名方法，修改 Router 添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据路由名称寻找路由</span><br><span class="line"> * @param $routeName</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> */</span><br><span class="line">public function findRouteFromName($routeName)</span><br><span class="line">&#123;</span><br><span class="line">    foreach (self::$routes as $route) &#123;</span><br><span class="line">        if ($route-&gt;name == $routeName) &#123;</span><br><span class="line">            return $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法倒是很简单，只要循环找到对应名字的路由配置就行了。</p><blockquote><p>查找数组效率最高的方法不是遍历而是通过数组的下标，我考虑过将路由分为已命名路由和未命名路由，未命名路由就是一个普通的索引数组，而已命名路由则是关联数组，键即路由的名字，这样查找路由时优先从已命名路由通过下标查询，如果没有再去遍历未命名路由，但是如果改成这样，Router 匹配路由规则时就要再进行一次数组合并，反而会降低路由解析的性能，因此舍弃了这种想法</p></blockquote><h2 id="route：全局函数"><a href="#route：全局函数" class="headerlink" title="route：全局函数"></a>route：全局函数</h2><p>只要 <code>new</code> 一个 Router 对象就可以调用 <code>findRouteFromName</code> 找到对应的路由，</p><p>然后再调用路由的 <code>createLink</code> 生成路由链接。</p><p>现在缺少一个全局函数：<code>route</code>。</p><p>同样借助 composer 的自动加载功能，修改 composer.jsp，添加加载规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;&#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\&quot;: &quot;app/&quot;,</span><br><span class="line">      &quot;FireRabbitEngine\\Module\\&quot;: &quot;firerabbit-engine/module/&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;files&quot;: [</span><br><span class="line">      &quot;firerabbit-engine/common/function.php&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https://mirrors.aliyun.com/composer/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 psr-4 下面增加了一个字段 files，而这个文件即框架的通用函数库。</p><p>创建 <code>firerabbit-engine/common/function.php</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 根据路由名称生成对应路由</span><br><span class="line"> * @param $routeName</span><br><span class="line"> * @param array $params</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> * @throws \FireRabbitEngine\Module\Route\Exception\RouteNotFoundException</span><br><span class="line"> */</span><br><span class="line">function route($routeName, $params = [])</span><br><span class="line">&#123;</span><br><span class="line">    $router = new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">    $route = $router-&gt;findRouteFromName($routeName);</span><br><span class="line"></span><br><span class="line">    if ($route == null) &#123;</span><br><span class="line">        throw new \FireRabbitEngine\Module\Route\Exception\RouteNotFoundException(&#x27;不存在路由[&#x27; . $routeName . &#x27;]&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $route-&gt;createLink($params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我不使用 <code>function_exists</code> 来判断方法是否存在，即使真的冲突了就直接报错，</p><p>实际上使用了这个方法来判断也没任何意义，重名了就不定义这个函数？</p><p>那连错在哪都不知道，为何要屏蔽可能报错的信息？我是百思不得其解。</p><p>如果遇到重名的函数，在我们执行 <code>php http_server.php</code> 启动程序的时候就会报错了，完全不用担心。</p><p>如果我们引入了第三方的包，其他人也定义了 route 函数那样才会产生麻烦。</p><p>一般的第三方包也不会去定义全局函数，而是封装成类进行调用，</p><p>函数是面向过程开发，也不符合开发包的理念，所以这一点完全不用担心。</p><p>因为我开发的是框架，只有框架才会定义全局函数，我的框架里也不可能引入其他框架。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>三种不同类型的路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#x27;/login&#x27;, &#x27;IndexController@login&#x27;)-&gt;name(&#x27;login&#x27;);</span><br><span class="line">$router-&gt;get(&#x27;/article/&#123;id&#125;&#x27;, &#x27;ArticleController@show&#x27;)-&gt;name(&#x27;article.show&#x27;);</span><br><span class="line">$router-&gt;get(&#x27;/test/&#123;id&#125;/user/&#123;name&#125;/goods/&#123;qq&#125;&#x27;, &#x27;TestController@test&#x27;)-&gt;name(&#x27;test&#x27;);</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$link = route(&#x27;test&#x27;, [&#x27;id&#x27; =&gt; 1, &#x27;name&#x27; =&gt; &#x27;哈哈怪&#x27;, &#x27;qq&#x27; =&gt; &#x27;okok&#x27;]);</span><br><span class="line">$link2 = route(&#x27;article.show&#x27;, [&#x27;id&#x27; =&gt; 123]);</span><br><span class="line">$link3 = route(&#x27;login&#x27;);</span><br><span class="line"></span><br><span class="line">var_dump($link, $link2, $link3);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(33) &quot;/test/1/user/哈哈怪/goods/okok&quot;</span><br><span class="line">string(12) &quot;/article/123&quot;</span><br><span class="line">string(6) &quot;/login&quot;</span><br></pre></td></tr></table></figure><p>看上去没有问题了！</p>]]></content>
    
    
    <summary type="html">为路由模块添加命名功能。</summary>
    
    
    
    <category term="架构" scheme="http://huotublog.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="PHP" scheme="http://huotublog.com/tags/PHP/"/>
    
    <category term="FireRabbitEngine" scheme="http://huotublog.com/tags/FireRabbitEngine/"/>
    
    <category term="Swoole" scheme="http://huotublog.com/tags/Swoole/"/>
    
  </entry>
  
</feed>
